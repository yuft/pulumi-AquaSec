// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ImageAssurancePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ImageAssurancePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageAssurancePolicyState, opts?: pulumi.CustomResourceOptions): ImageAssurancePolicy {
        return new ImageAssurancePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/imageAssurancePolicy:ImageAssurancePolicy';

    /**
     * Returns true if the given object is an instance of ImageAssurancePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageAssurancePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageAssurancePolicy.__pulumiType;
    }

    public readonly allowedImages!: pulumi.Output<string[] | undefined>;
    public readonly applicationScopes!: pulumi.Output<string[]>;
    public readonly assuranceType!: pulumi.Output<string | undefined>;
    public readonly auditOnFailure!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly author!: pulumi.Output<string>;
    public readonly autoScanConfigured!: pulumi.Output<boolean | undefined>;
    public readonly autoScanEnabled!: pulumi.Output<boolean | undefined>;
    public readonly autoScanTimes!: pulumi.Output<outputs.ImageAssurancePolicyAutoScanTime[]>;
    public readonly blacklistPermissions!: pulumi.Output<string[] | undefined>;
    public readonly blacklistPermissionsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly blacklistedLicenses!: pulumi.Output<string[] | undefined>;
    public readonly blacklistedLicensesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly blockFailed!: pulumi.Output<boolean | undefined>;
    public readonly controlExcludeNoFix!: pulumi.Output<boolean | undefined>;
    public readonly customChecks!: pulumi.Output<outputs.ImageAssurancePolicyCustomCheck[] | undefined>;
    public readonly customChecksEnabled!: pulumi.Output<boolean | undefined>;
    public readonly customSeverityEnabled!: pulumi.Output<boolean | undefined>;
    public readonly cvesBlackListEnabled!: pulumi.Output<boolean | undefined>;
    public readonly cvesBlackLists!: pulumi.Output<string[] | undefined>;
    public readonly cvesWhiteListEnabled!: pulumi.Output<boolean | undefined>;
    public readonly cvesWhiteLists!: pulumi.Output<string[] | undefined>;
    public readonly cvssSeverity!: pulumi.Output<string | undefined>;
    public readonly cvssSeverityEnabled!: pulumi.Output<boolean | undefined>;
    public readonly cvssSeverityExcludeNoFix!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disallowMalware!: pulumi.Output<boolean | undefined>;
    public readonly dockerCisEnabled!: pulumi.Output<boolean | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly domainName!: pulumi.Output<string | undefined>;
    public readonly dtaEnabled!: pulumi.Output<boolean | undefined>;
    public readonly dtaSeverity!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly enforce!: pulumi.Output<boolean | undefined>;
    public readonly enforceAfterDays!: pulumi.Output<number | undefined>;
    public readonly enforceExcessivePermissions!: pulumi.Output<boolean | undefined>;
    public readonly exceptionalMonitoredMalwarePaths!: pulumi.Output<string[] | undefined>;
    public readonly failCicd!: pulumi.Output<boolean | undefined>;
    public readonly forbiddenLabels!: pulumi.Output<outputs.ImageAssurancePolicyForbiddenLabel[] | undefined>;
    public readonly forbiddenLabelsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly forceMicroenforcer!: pulumi.Output<boolean | undefined>;
    public readonly functionIntegrityEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of this resource.
     */
    public /*out*/ readonly id!: pulumi.Output<string>;
    public readonly ignoreRecentlyPublishedVln!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly ignoreRecentlyPublishedVlnPeriod!: pulumi.Output<number>;
    public readonly ignoreRiskResourcesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly ignoredRiskResources!: pulumi.Output<string[] | undefined>;
    public readonly images!: pulumi.Output<string[] | undefined>;
    public readonly kubeCisEnabled!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<string[] | undefined>;
    public readonly malwareAction!: pulumi.Output<string | undefined>;
    public readonly maximumScore!: pulumi.Output<number | undefined>;
    public readonly maximumScoreEnabled!: pulumi.Output<boolean | undefined>;
    public readonly maximumScoreExcludeNoFix!: pulumi.Output<boolean | undefined>;
    public readonly monitoredMalwarePaths!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly onlyNoneRootUsers!: pulumi.Output<boolean | undefined>;
    public readonly packagesBlackListEnabled!: pulumi.Output<boolean | undefined>;
    public readonly packagesBlackLists!: pulumi.Output<outputs.ImageAssurancePolicyPackagesBlackList[] | undefined>;
    public readonly packagesWhiteListEnabled!: pulumi.Output<boolean | undefined>;
    public readonly packagesWhiteLists!: pulumi.Output<outputs.ImageAssurancePolicyPackagesWhiteList[] | undefined>;
    public readonly partialResultsImageFail!: pulumi.Output<boolean | undefined>;
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    public readonly registries!: pulumi.Output<string[] | undefined>;
    public readonly registry!: pulumi.Output<string | undefined>;
    public readonly requiredLabels!: pulumi.Output<outputs.ImageAssurancePolicyRequiredLabel[] | undefined>;
    public readonly requiredLabelsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly scanNfsMounts!: pulumi.Output<boolean | undefined>;
    public readonly scanSensitiveData!: pulumi.Output<boolean | undefined>;
    public readonly scapEnabled!: pulumi.Output<boolean | undefined>;
    public readonly scapFiles!: pulumi.Output<string[] | undefined>;
    public readonly scopes!: pulumi.Output<outputs.ImageAssurancePolicyScope[]>;
    public readonly trustedBaseImages!: pulumi.Output<outputs.ImageAssurancePolicyTrustedBaseImage[] | undefined>;
    public readonly trustedBaseImagesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly whitelistedLicenses!: pulumi.Output<string[] | undefined>;
    public readonly whitelistedLicensesEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ImageAssurancePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageAssurancePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageAssurancePolicyArgs | ImageAssurancePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageAssurancePolicyState | undefined;
            resourceInputs["allowedImages"] = state ? state.allowedImages : undefined;
            resourceInputs["applicationScopes"] = state ? state.applicationScopes : undefined;
            resourceInputs["assuranceType"] = state ? state.assuranceType : undefined;
            resourceInputs["auditOnFailure"] = state ? state.auditOnFailure : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["autoScanConfigured"] = state ? state.autoScanConfigured : undefined;
            resourceInputs["autoScanEnabled"] = state ? state.autoScanEnabled : undefined;
            resourceInputs["autoScanTimes"] = state ? state.autoScanTimes : undefined;
            resourceInputs["blacklistPermissions"] = state ? state.blacklistPermissions : undefined;
            resourceInputs["blacklistPermissionsEnabled"] = state ? state.blacklistPermissionsEnabled : undefined;
            resourceInputs["blacklistedLicenses"] = state ? state.blacklistedLicenses : undefined;
            resourceInputs["blacklistedLicensesEnabled"] = state ? state.blacklistedLicensesEnabled : undefined;
            resourceInputs["blockFailed"] = state ? state.blockFailed : undefined;
            resourceInputs["controlExcludeNoFix"] = state ? state.controlExcludeNoFix : undefined;
            resourceInputs["customChecks"] = state ? state.customChecks : undefined;
            resourceInputs["customChecksEnabled"] = state ? state.customChecksEnabled : undefined;
            resourceInputs["customSeverityEnabled"] = state ? state.customSeverityEnabled : undefined;
            resourceInputs["cvesBlackListEnabled"] = state ? state.cvesBlackListEnabled : undefined;
            resourceInputs["cvesBlackLists"] = state ? state.cvesBlackLists : undefined;
            resourceInputs["cvesWhiteListEnabled"] = state ? state.cvesWhiteListEnabled : undefined;
            resourceInputs["cvesWhiteLists"] = state ? state.cvesWhiteLists : undefined;
            resourceInputs["cvssSeverity"] = state ? state.cvssSeverity : undefined;
            resourceInputs["cvssSeverityEnabled"] = state ? state.cvssSeverityEnabled : undefined;
            resourceInputs["cvssSeverityExcludeNoFix"] = state ? state.cvssSeverityExcludeNoFix : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disallowMalware"] = state ? state.disallowMalware : undefined;
            resourceInputs["dockerCisEnabled"] = state ? state.dockerCisEnabled : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["dtaEnabled"] = state ? state.dtaEnabled : undefined;
            resourceInputs["dtaSeverity"] = state ? state.dtaSeverity : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enforce"] = state ? state.enforce : undefined;
            resourceInputs["enforceAfterDays"] = state ? state.enforceAfterDays : undefined;
            resourceInputs["enforceExcessivePermissions"] = state ? state.enforceExcessivePermissions : undefined;
            resourceInputs["exceptionalMonitoredMalwarePaths"] = state ? state.exceptionalMonitoredMalwarePaths : undefined;
            resourceInputs["failCicd"] = state ? state.failCicd : undefined;
            resourceInputs["forbiddenLabels"] = state ? state.forbiddenLabels : undefined;
            resourceInputs["forbiddenLabelsEnabled"] = state ? state.forbiddenLabelsEnabled : undefined;
            resourceInputs["forceMicroenforcer"] = state ? state.forceMicroenforcer : undefined;
            resourceInputs["functionIntegrityEnabled"] = state ? state.functionIntegrityEnabled : undefined;
            resourceInputs["id"] = state ? state.id : undefined;
            resourceInputs["ignoreRecentlyPublishedVln"] = state ? state.ignoreRecentlyPublishedVln : undefined;
            resourceInputs["ignoreRecentlyPublishedVlnPeriod"] = state ? state.ignoreRecentlyPublishedVlnPeriod : undefined;
            resourceInputs["ignoreRiskResourcesEnabled"] = state ? state.ignoreRiskResourcesEnabled : undefined;
            resourceInputs["ignoredRiskResources"] = state ? state.ignoredRiskResources : undefined;
            resourceInputs["images"] = state ? state.images : undefined;
            resourceInputs["kubeCisEnabled"] = state ? state.kubeCisEnabled : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["malwareAction"] = state ? state.malwareAction : undefined;
            resourceInputs["maximumScore"] = state ? state.maximumScore : undefined;
            resourceInputs["maximumScoreEnabled"] = state ? state.maximumScoreEnabled : undefined;
            resourceInputs["maximumScoreExcludeNoFix"] = state ? state.maximumScoreExcludeNoFix : undefined;
            resourceInputs["monitoredMalwarePaths"] = state ? state.monitoredMalwarePaths : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onlyNoneRootUsers"] = state ? state.onlyNoneRootUsers : undefined;
            resourceInputs["packagesBlackListEnabled"] = state ? state.packagesBlackListEnabled : undefined;
            resourceInputs["packagesBlackLists"] = state ? state.packagesBlackLists : undefined;
            resourceInputs["packagesWhiteListEnabled"] = state ? state.packagesWhiteListEnabled : undefined;
            resourceInputs["packagesWhiteLists"] = state ? state.packagesWhiteLists : undefined;
            resourceInputs["partialResultsImageFail"] = state ? state.partialResultsImageFail : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["registries"] = state ? state.registries : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["requiredLabels"] = state ? state.requiredLabels : undefined;
            resourceInputs["requiredLabelsEnabled"] = state ? state.requiredLabelsEnabled : undefined;
            resourceInputs["scanNfsMounts"] = state ? state.scanNfsMounts : undefined;
            resourceInputs["scanSensitiveData"] = state ? state.scanSensitiveData : undefined;
            resourceInputs["scapEnabled"] = state ? state.scapEnabled : undefined;
            resourceInputs["scapFiles"] = state ? state.scapFiles : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["trustedBaseImages"] = state ? state.trustedBaseImages : undefined;
            resourceInputs["trustedBaseImagesEnabled"] = state ? state.trustedBaseImagesEnabled : undefined;
            resourceInputs["whitelistedLicenses"] = state ? state.whitelistedLicenses : undefined;
            resourceInputs["whitelistedLicensesEnabled"] = state ? state.whitelistedLicensesEnabled : undefined;
        } else {
            const args = argsOrState as ImageAssurancePolicyArgs | undefined;
            if ((!args || args.applicationScopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationScopes'");
            }
            resourceInputs["allowedImages"] = args ? args.allowedImages : undefined;
            resourceInputs["applicationScopes"] = args ? args.applicationScopes : undefined;
            resourceInputs["assuranceType"] = args ? args.assuranceType : undefined;
            resourceInputs["auditOnFailure"] = args ? args.auditOnFailure : undefined;
            resourceInputs["autoScanConfigured"] = args ? args.autoScanConfigured : undefined;
            resourceInputs["autoScanEnabled"] = args ? args.autoScanEnabled : undefined;
            resourceInputs["autoScanTimes"] = args ? args.autoScanTimes : undefined;
            resourceInputs["blacklistPermissions"] = args ? args.blacklistPermissions : undefined;
            resourceInputs["blacklistPermissionsEnabled"] = args ? args.blacklistPermissionsEnabled : undefined;
            resourceInputs["blacklistedLicenses"] = args ? args.blacklistedLicenses : undefined;
            resourceInputs["blacklistedLicensesEnabled"] = args ? args.blacklistedLicensesEnabled : undefined;
            resourceInputs["blockFailed"] = args ? args.blockFailed : undefined;
            resourceInputs["controlExcludeNoFix"] = args ? args.controlExcludeNoFix : undefined;
            resourceInputs["customChecks"] = args ? args.customChecks : undefined;
            resourceInputs["customChecksEnabled"] = args ? args.customChecksEnabled : undefined;
            resourceInputs["customSeverityEnabled"] = args ? args.customSeverityEnabled : undefined;
            resourceInputs["cvesBlackListEnabled"] = args ? args.cvesBlackListEnabled : undefined;
            resourceInputs["cvesBlackLists"] = args ? args.cvesBlackLists : undefined;
            resourceInputs["cvesWhiteListEnabled"] = args ? args.cvesWhiteListEnabled : undefined;
            resourceInputs["cvesWhiteLists"] = args ? args.cvesWhiteLists : undefined;
            resourceInputs["cvssSeverity"] = args ? args.cvssSeverity : undefined;
            resourceInputs["cvssSeverityEnabled"] = args ? args.cvssSeverityEnabled : undefined;
            resourceInputs["cvssSeverityExcludeNoFix"] = args ? args.cvssSeverityExcludeNoFix : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disallowMalware"] = args ? args.disallowMalware : undefined;
            resourceInputs["dockerCisEnabled"] = args ? args.dockerCisEnabled : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["dtaEnabled"] = args ? args.dtaEnabled : undefined;
            resourceInputs["dtaSeverity"] = args ? args.dtaSeverity : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enforce"] = args ? args.enforce : undefined;
            resourceInputs["enforceAfterDays"] = args ? args.enforceAfterDays : undefined;
            resourceInputs["enforceExcessivePermissions"] = args ? args.enforceExcessivePermissions : undefined;
            resourceInputs["exceptionalMonitoredMalwarePaths"] = args ? args.exceptionalMonitoredMalwarePaths : undefined;
            resourceInputs["failCicd"] = args ? args.failCicd : undefined;
            resourceInputs["forbiddenLabels"] = args ? args.forbiddenLabels : undefined;
            resourceInputs["forbiddenLabelsEnabled"] = args ? args.forbiddenLabelsEnabled : undefined;
            resourceInputs["forceMicroenforcer"] = args ? args.forceMicroenforcer : undefined;
            resourceInputs["functionIntegrityEnabled"] = args ? args.functionIntegrityEnabled : undefined;
            resourceInputs["ignoreRecentlyPublishedVln"] = args ? args.ignoreRecentlyPublishedVln : undefined;
            resourceInputs["ignoreRiskResourcesEnabled"] = args ? args.ignoreRiskResourcesEnabled : undefined;
            resourceInputs["ignoredRiskResources"] = args ? args.ignoredRiskResources : undefined;
            resourceInputs["images"] = args ? args.images : undefined;
            resourceInputs["kubeCisEnabled"] = args ? args.kubeCisEnabled : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["malwareAction"] = args ? args.malwareAction : undefined;
            resourceInputs["maximumScore"] = args ? args.maximumScore : undefined;
            resourceInputs["maximumScoreEnabled"] = args ? args.maximumScoreEnabled : undefined;
            resourceInputs["maximumScoreExcludeNoFix"] = args ? args.maximumScoreExcludeNoFix : undefined;
            resourceInputs["monitoredMalwarePaths"] = args ? args.monitoredMalwarePaths : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onlyNoneRootUsers"] = args ? args.onlyNoneRootUsers : undefined;
            resourceInputs["packagesBlackListEnabled"] = args ? args.packagesBlackListEnabled : undefined;
            resourceInputs["packagesBlackLists"] = args ? args.packagesBlackLists : undefined;
            resourceInputs["packagesWhiteListEnabled"] = args ? args.packagesWhiteListEnabled : undefined;
            resourceInputs["packagesWhiteLists"] = args ? args.packagesWhiteLists : undefined;
            resourceInputs["partialResultsImageFail"] = args ? args.partialResultsImageFail : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["registries"] = args ? args.registries : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["requiredLabels"] = args ? args.requiredLabels : undefined;
            resourceInputs["requiredLabelsEnabled"] = args ? args.requiredLabelsEnabled : undefined;
            resourceInputs["scanNfsMounts"] = args ? args.scanNfsMounts : undefined;
            resourceInputs["scanSensitiveData"] = args ? args.scanSensitiveData : undefined;
            resourceInputs["scapEnabled"] = args ? args.scapEnabled : undefined;
            resourceInputs["scapFiles"] = args ? args.scapFiles : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["trustedBaseImages"] = args ? args.trustedBaseImages : undefined;
            resourceInputs["trustedBaseImagesEnabled"] = args ? args.trustedBaseImagesEnabled : undefined;
            resourceInputs["whitelistedLicenses"] = args ? args.whitelistedLicenses : undefined;
            resourceInputs["whitelistedLicensesEnabled"] = args ? args.whitelistedLicensesEnabled : undefined;
            resourceInputs["author"] = undefined /*out*/;
            resourceInputs["id"] = undefined /*out*/;
            resourceInputs["ignoreRecentlyPublishedVlnPeriod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageAssurancePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageAssurancePolicy resources.
 */
export interface ImageAssurancePolicyState {
    allowedImages?: pulumi.Input<pulumi.Input<string>[]>;
    applicationScopes?: pulumi.Input<pulumi.Input<string>[]>;
    assuranceType?: pulumi.Input<string>;
    auditOnFailure?: pulumi.Input<boolean>;
    author?: pulumi.Input<string>;
    autoScanConfigured?: pulumi.Input<boolean>;
    autoScanEnabled?: pulumi.Input<boolean>;
    autoScanTimes?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyAutoScanTime>[]>;
    blacklistPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    blacklistPermissionsEnabled?: pulumi.Input<boolean>;
    blacklistedLicenses?: pulumi.Input<pulumi.Input<string>[]>;
    blacklistedLicensesEnabled?: pulumi.Input<boolean>;
    blockFailed?: pulumi.Input<boolean>;
    controlExcludeNoFix?: pulumi.Input<boolean>;
    customChecks?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyCustomCheck>[]>;
    customChecksEnabled?: pulumi.Input<boolean>;
    customSeverityEnabled?: pulumi.Input<boolean>;
    cvesBlackListEnabled?: pulumi.Input<boolean>;
    cvesBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    cvesWhiteListEnabled?: pulumi.Input<boolean>;
    cvesWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    cvssSeverity?: pulumi.Input<string>;
    cvssSeverityEnabled?: pulumi.Input<boolean>;
    cvssSeverityExcludeNoFix?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disallowMalware?: pulumi.Input<boolean>;
    dockerCisEnabled?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    dtaEnabled?: pulumi.Input<boolean>;
    dtaSeverity?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    enforce?: pulumi.Input<boolean>;
    enforceAfterDays?: pulumi.Input<number>;
    enforceExcessivePermissions?: pulumi.Input<boolean>;
    exceptionalMonitoredMalwarePaths?: pulumi.Input<pulumi.Input<string>[]>;
    failCicd?: pulumi.Input<boolean>;
    forbiddenLabels?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyForbiddenLabel>[]>;
    forbiddenLabelsEnabled?: pulumi.Input<boolean>;
    forceMicroenforcer?: pulumi.Input<boolean>;
    functionIntegrityEnabled?: pulumi.Input<boolean>;
    /**
     * The ID of this resource.
     */
    id?: pulumi.Input<string>;
    ignoreRecentlyPublishedVln?: pulumi.Input<boolean>;
    ignoreRecentlyPublishedVlnPeriod?: pulumi.Input<number>;
    ignoreRiskResourcesEnabled?: pulumi.Input<boolean>;
    ignoredRiskResources?: pulumi.Input<pulumi.Input<string>[]>;
    images?: pulumi.Input<pulumi.Input<string>[]>;
    kubeCisEnabled?: pulumi.Input<boolean>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    malwareAction?: pulumi.Input<string>;
    maximumScore?: pulumi.Input<number>;
    maximumScoreEnabled?: pulumi.Input<boolean>;
    maximumScoreExcludeNoFix?: pulumi.Input<boolean>;
    monitoredMalwarePaths?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    onlyNoneRootUsers?: pulumi.Input<boolean>;
    packagesBlackListEnabled?: pulumi.Input<boolean>;
    packagesBlackLists?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyPackagesBlackList>[]>;
    packagesWhiteListEnabled?: pulumi.Input<boolean>;
    packagesWhiteLists?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyPackagesWhiteList>[]>;
    partialResultsImageFail?: pulumi.Input<boolean>;
    readOnly?: pulumi.Input<boolean>;
    registries?: pulumi.Input<pulumi.Input<string>[]>;
    registry?: pulumi.Input<string>;
    requiredLabels?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyRequiredLabel>[]>;
    requiredLabelsEnabled?: pulumi.Input<boolean>;
    scanNfsMounts?: pulumi.Input<boolean>;
    scanSensitiveData?: pulumi.Input<boolean>;
    scapEnabled?: pulumi.Input<boolean>;
    scapFiles?: pulumi.Input<pulumi.Input<string>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyScope>[]>;
    trustedBaseImages?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyTrustedBaseImage>[]>;
    trustedBaseImagesEnabled?: pulumi.Input<boolean>;
    whitelistedLicenses?: pulumi.Input<pulumi.Input<string>[]>;
    whitelistedLicensesEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ImageAssurancePolicy resource.
 */
export interface ImageAssurancePolicyArgs {
    allowedImages?: pulumi.Input<pulumi.Input<string>[]>;
    applicationScopes: pulumi.Input<pulumi.Input<string>[]>;
    assuranceType?: pulumi.Input<string>;
    auditOnFailure?: pulumi.Input<boolean>;
    autoScanConfigured?: pulumi.Input<boolean>;
    autoScanEnabled?: pulumi.Input<boolean>;
    autoScanTimes?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyAutoScanTime>[]>;
    blacklistPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    blacklistPermissionsEnabled?: pulumi.Input<boolean>;
    blacklistedLicenses?: pulumi.Input<pulumi.Input<string>[]>;
    blacklistedLicensesEnabled?: pulumi.Input<boolean>;
    blockFailed?: pulumi.Input<boolean>;
    controlExcludeNoFix?: pulumi.Input<boolean>;
    customChecks?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyCustomCheck>[]>;
    customChecksEnabled?: pulumi.Input<boolean>;
    customSeverityEnabled?: pulumi.Input<boolean>;
    cvesBlackListEnabled?: pulumi.Input<boolean>;
    cvesBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    cvesWhiteListEnabled?: pulumi.Input<boolean>;
    cvesWhiteLists?: pulumi.Input<pulumi.Input<string>[]>;
    cvssSeverity?: pulumi.Input<string>;
    cvssSeverityEnabled?: pulumi.Input<boolean>;
    cvssSeverityExcludeNoFix?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disallowMalware?: pulumi.Input<boolean>;
    dockerCisEnabled?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    dtaEnabled?: pulumi.Input<boolean>;
    dtaSeverity?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    enforce?: pulumi.Input<boolean>;
    enforceAfterDays?: pulumi.Input<number>;
    enforceExcessivePermissions?: pulumi.Input<boolean>;
    exceptionalMonitoredMalwarePaths?: pulumi.Input<pulumi.Input<string>[]>;
    failCicd?: pulumi.Input<boolean>;
    forbiddenLabels?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyForbiddenLabel>[]>;
    forbiddenLabelsEnabled?: pulumi.Input<boolean>;
    forceMicroenforcer?: pulumi.Input<boolean>;
    functionIntegrityEnabled?: pulumi.Input<boolean>;
    ignoreRecentlyPublishedVln?: pulumi.Input<boolean>;
    ignoreRiskResourcesEnabled?: pulumi.Input<boolean>;
    ignoredRiskResources?: pulumi.Input<pulumi.Input<string>[]>;
    images?: pulumi.Input<pulumi.Input<string>[]>;
    kubeCisEnabled?: pulumi.Input<boolean>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    malwareAction?: pulumi.Input<string>;
    maximumScore?: pulumi.Input<number>;
    maximumScoreEnabled?: pulumi.Input<boolean>;
    maximumScoreExcludeNoFix?: pulumi.Input<boolean>;
    monitoredMalwarePaths?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    onlyNoneRootUsers?: pulumi.Input<boolean>;
    packagesBlackListEnabled?: pulumi.Input<boolean>;
    packagesBlackLists?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyPackagesBlackList>[]>;
    packagesWhiteListEnabled?: pulumi.Input<boolean>;
    packagesWhiteLists?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyPackagesWhiteList>[]>;
    partialResultsImageFail?: pulumi.Input<boolean>;
    readOnly?: pulumi.Input<boolean>;
    registries?: pulumi.Input<pulumi.Input<string>[]>;
    registry?: pulumi.Input<string>;
    requiredLabels?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyRequiredLabel>[]>;
    requiredLabelsEnabled?: pulumi.Input<boolean>;
    scanNfsMounts?: pulumi.Input<boolean>;
    scanSensitiveData?: pulumi.Input<boolean>;
    scapEnabled?: pulumi.Input<boolean>;
    scapFiles?: pulumi.Input<pulumi.Input<string>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyScope>[]>;
    trustedBaseImages?: pulumi.Input<pulumi.Input<inputs.ImageAssurancePolicyTrustedBaseImage>[]>;
    trustedBaseImagesEnabled?: pulumi.Input<boolean>;
    whitelistedLicenses?: pulumi.Input<pulumi.Input<string>[]>;
    whitelistedLicensesEnabled?: pulumi.Input<boolean>;
}
