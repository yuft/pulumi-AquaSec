// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class AquasecHostRuntimePolicy extends pulumi.CustomResource {
    /**
     * Get an existing AquasecHostRuntimePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AquasecHostRuntimePolicyState, opts?: pulumi.CustomResourceOptions): AquasecHostRuntimePolicy {
        return new AquasecHostRuntimePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/aquasecHostRuntimePolicy:AquasecHostRuntimePolicy';

    /**
     * Returns true if the given object is an instance of AquasecHostRuntimePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AquasecHostRuntimePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AquasecHostRuntimePolicy.__pulumiType;
    }

    /**
     * Indicates the application scope of the service.
     */
    public readonly applicationScopes!: pulumi.Output<string[]>;
    /**
     * If true, all process activity will be audited.
     */
    public readonly auditAllOsUserActivity!: pulumi.Output<boolean | undefined>;
    /**
     * If true, full command arguments will be audited.
     */
    public readonly auditFullCommandArguments!: pulumi.Output<boolean | undefined>;
    /**
     * Username of the account that created the service.
     */
    public /*out*/ readonly author!: pulumi.Output<string>;
    /**
     * List of files that are prevented from being read, modified and executed in the containers.
     */
    public readonly blockedFiles!: pulumi.Output<string[] | undefined>;
    /**
     * The description of the host runtime policy
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     */
    public readonly enableIpReputationSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates if the runtime policy is enabled or not.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates that policy should effect container execution (not just for audit).
     */
    public readonly enforce!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates the number of days after which the runtime policy will be changed to enforce mode.
     */
    public readonly enforceAfterDays!: pulumi.Output<number | undefined>;
    /**
     * Configuration for file integrity monitoring.
     */
    public readonly fileIntegrityMonitoring!: pulumi.Output<outputs.AquasecHostRuntimePolicyFileIntegrityMonitoring | undefined>;
    /**
     * If true, system time changes will be monitored.
     */
    public readonly monitorSystemTimeChanges!: pulumi.Output<boolean | undefined>;
    /**
     * If true, windows service operations will be monitored.
     */
    public readonly monitorWindowsServices!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the host runtime policy
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     */
    public readonly osGroupsAlloweds!: pulumi.Output<string[] | undefined>;
    /**
     * List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     */
    public readonly osGroupsBlockeds!: pulumi.Output<string[] | undefined>;
    /**
     * List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
     */
    public readonly osUsersAlloweds!: pulumi.Output<string[] | undefined>;
    /**
     * List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
     */
    public readonly osUsersBlockeds!: pulumi.Output<string[] | undefined>;
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     */
    public readonly scopeExpression!: pulumi.Output<string>;
    /**
     * List of scope attributes.
     */
    public readonly scopeVariables!: pulumi.Output<outputs.AquasecHostRuntimePolicyScopeVariable[]>;
    /**
     * Configuration for windows registry monitoring.
     */
    public readonly windowsRegistryMonitoring!: pulumi.Output<outputs.AquasecHostRuntimePolicyWindowsRegistryMonitoring | undefined>;
    /**
     * Configuration for windows registry protection.
     */
    public readonly windowsRegistryProtection!: pulumi.Output<outputs.AquasecHostRuntimePolicyWindowsRegistryProtection | undefined>;

    /**
     * Create a AquasecHostRuntimePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AquasecHostRuntimePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AquasecHostRuntimePolicyArgs | AquasecHostRuntimePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AquasecHostRuntimePolicyState | undefined;
            resourceInputs["applicationScopes"] = state ? state.applicationScopes : undefined;
            resourceInputs["auditAllOsUserActivity"] = state ? state.auditAllOsUserActivity : undefined;
            resourceInputs["auditFullCommandArguments"] = state ? state.auditFullCommandArguments : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["blockedFiles"] = state ? state.blockedFiles : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableIpReputationSecurity"] = state ? state.enableIpReputationSecurity : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enforce"] = state ? state.enforce : undefined;
            resourceInputs["enforceAfterDays"] = state ? state.enforceAfterDays : undefined;
            resourceInputs["fileIntegrityMonitoring"] = state ? state.fileIntegrityMonitoring : undefined;
            resourceInputs["monitorSystemTimeChanges"] = state ? state.monitorSystemTimeChanges : undefined;
            resourceInputs["monitorWindowsServices"] = state ? state.monitorWindowsServices : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osGroupsAlloweds"] = state ? state.osGroupsAlloweds : undefined;
            resourceInputs["osGroupsBlockeds"] = state ? state.osGroupsBlockeds : undefined;
            resourceInputs["osUsersAlloweds"] = state ? state.osUsersAlloweds : undefined;
            resourceInputs["osUsersBlockeds"] = state ? state.osUsersBlockeds : undefined;
            resourceInputs["scopeExpression"] = state ? state.scopeExpression : undefined;
            resourceInputs["scopeVariables"] = state ? state.scopeVariables : undefined;
            resourceInputs["windowsRegistryMonitoring"] = state ? state.windowsRegistryMonitoring : undefined;
            resourceInputs["windowsRegistryProtection"] = state ? state.windowsRegistryProtection : undefined;
        } else {
            const args = argsOrState as AquasecHostRuntimePolicyArgs | undefined;
            resourceInputs["applicationScopes"] = args ? args.applicationScopes : undefined;
            resourceInputs["auditAllOsUserActivity"] = args ? args.auditAllOsUserActivity : undefined;
            resourceInputs["auditFullCommandArguments"] = args ? args.auditFullCommandArguments : undefined;
            resourceInputs["blockedFiles"] = args ? args.blockedFiles : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableIpReputationSecurity"] = args ? args.enableIpReputationSecurity : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enforce"] = args ? args.enforce : undefined;
            resourceInputs["enforceAfterDays"] = args ? args.enforceAfterDays : undefined;
            resourceInputs["fileIntegrityMonitoring"] = args ? args.fileIntegrityMonitoring : undefined;
            resourceInputs["monitorSystemTimeChanges"] = args ? args.monitorSystemTimeChanges : undefined;
            resourceInputs["monitorWindowsServices"] = args ? args.monitorWindowsServices : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osGroupsAlloweds"] = args ? args.osGroupsAlloweds : undefined;
            resourceInputs["osGroupsBlockeds"] = args ? args.osGroupsBlockeds : undefined;
            resourceInputs["osUsersAlloweds"] = args ? args.osUsersAlloweds : undefined;
            resourceInputs["osUsersBlockeds"] = args ? args.osUsersBlockeds : undefined;
            resourceInputs["scopeExpression"] = args ? args.scopeExpression : undefined;
            resourceInputs["scopeVariables"] = args ? args.scopeVariables : undefined;
            resourceInputs["windowsRegistryMonitoring"] = args ? args.windowsRegistryMonitoring : undefined;
            resourceInputs["windowsRegistryProtection"] = args ? args.windowsRegistryProtection : undefined;
            resourceInputs["author"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AquasecHostRuntimePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AquasecHostRuntimePolicy resources.
 */
export interface AquasecHostRuntimePolicyState {
    /**
     * Indicates the application scope of the service.
     */
    applicationScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, all process activity will be audited.
     */
    auditAllOsUserActivity?: pulumi.Input<boolean>;
    /**
     * If true, full command arguments will be audited.
     */
    auditFullCommandArguments?: pulumi.Input<boolean>;
    /**
     * Username of the account that created the service.
     */
    author?: pulumi.Input<string>;
    /**
     * List of files that are prevented from being read, modified and executed in the containers.
     */
    blockedFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the host runtime policy
     */
    description?: pulumi.Input<string>;
    /**
     * If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     */
    enableIpReputationSecurity?: pulumi.Input<boolean>;
    /**
     * Indicates if the runtime policy is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates that policy should effect container execution (not just for audit).
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * Indicates the number of days after which the runtime policy will be changed to enforce mode.
     */
    enforceAfterDays?: pulumi.Input<number>;
    /**
     * Configuration for file integrity monitoring.
     */
    fileIntegrityMonitoring?: pulumi.Input<inputs.AquasecHostRuntimePolicyFileIntegrityMonitoring>;
    /**
     * If true, system time changes will be monitored.
     */
    monitorSystemTimeChanges?: pulumi.Input<boolean>;
    /**
     * If true, windows service operations will be monitored.
     */
    monitorWindowsServices?: pulumi.Input<boolean>;
    /**
     * Name of the host runtime policy
     */
    name?: pulumi.Input<string>;
    /**
     * List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     */
    osGroupsAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     */
    osGroupsBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
     */
    osUsersAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
     */
    osUsersBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     */
    scopeExpression?: pulumi.Input<string>;
    /**
     * List of scope attributes.
     */
    scopeVariables?: pulumi.Input<pulumi.Input<inputs.AquasecHostRuntimePolicyScopeVariable>[]>;
    /**
     * Configuration for windows registry monitoring.
     */
    windowsRegistryMonitoring?: pulumi.Input<inputs.AquasecHostRuntimePolicyWindowsRegistryMonitoring>;
    /**
     * Configuration for windows registry protection.
     */
    windowsRegistryProtection?: pulumi.Input<inputs.AquasecHostRuntimePolicyWindowsRegistryProtection>;
}

/**
 * The set of arguments for constructing a AquasecHostRuntimePolicy resource.
 */
export interface AquasecHostRuntimePolicyArgs {
    /**
     * Indicates the application scope of the service.
     */
    applicationScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If true, all process activity will be audited.
     */
    auditAllOsUserActivity?: pulumi.Input<boolean>;
    /**
     * If true, full command arguments will be audited.
     */
    auditFullCommandArguments?: pulumi.Input<boolean>;
    /**
     * List of files that are prevented from being read, modified and executed in the containers.
     */
    blockedFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the host runtime policy
     */
    description?: pulumi.Input<string>;
    /**
     * If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
     */
    enableIpReputationSecurity?: pulumi.Input<boolean>;
    /**
     * Indicates if the runtime policy is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Indicates that policy should effect container execution (not just for audit).
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * Indicates the number of days after which the runtime policy will be changed to enforce mode.
     */
    enforceAfterDays?: pulumi.Input<number>;
    /**
     * Configuration for file integrity monitoring.
     */
    fileIntegrityMonitoring?: pulumi.Input<inputs.AquasecHostRuntimePolicyFileIntegrityMonitoring>;
    /**
     * If true, system time changes will be monitored.
     */
    monitorSystemTimeChanges?: pulumi.Input<boolean>;
    /**
     * If true, windows service operations will be monitored.
     */
    monitorWindowsServices?: pulumi.Input<boolean>;
    /**
     * Name of the host runtime policy
     */
    name?: pulumi.Input<string>;
    /**
     * List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     */
    osGroupsAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
     */
    osGroupsBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
     */
    osUsersAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
     */
    osUsersBlockeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     */
    scopeExpression?: pulumi.Input<string>;
    /**
     * List of scope attributes.
     */
    scopeVariables?: pulumi.Input<pulumi.Input<inputs.AquasecHostRuntimePolicyScopeVariable>[]>;
    /**
     * Configuration for windows registry monitoring.
     */
    windowsRegistryMonitoring?: pulumi.Input<inputs.AquasecHostRuntimePolicyWindowsRegistryMonitoring>;
    /**
     * Configuration for windows registry protection.
     */
    windowsRegistryProtection?: pulumi.Input<inputs.AquasecHostRuntimePolicyWindowsRegistryProtection>;
}
