// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * The `aquasec.UserSaas` resource manages your saas users within Aqua.
 *
 * The users created must have at least one Csp Role that is already present within Aqua.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aquasec from "@pulumi/aquasec";
 *
 * const iaC1 = new aquasec.UserSaas("IaC1", {
 *     accountAdmin: true,
 *     cspRoles: [],
 *     email: "infrastructure1@example.com",
 * });
 * const iaC2 = new aquasec.UserSaas("IaC2", {
 *     accountAdmin: false,
 *     cspRoles: ["Default"],
 *     email: "infrastructure2@example.com",
 *     //optional
 *     groups: [{
 *         groupAdmin: false,
 *         name: "IacGroupName",
 *     }],
 * });
 * ```
 */
export class UserSaas extends pulumi.CustomResource {
    /**
     * Get an existing UserSaas resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserSaasState, opts?: pulumi.CustomResourceOptions): UserSaas {
        return new UserSaas(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/userSaas:UserSaas';

    /**
     * Returns true if the given object is an instance of UserSaas.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserSaas {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserSaas.__pulumiType;
    }

    public readonly accountAdmin!: pulumi.Output<boolean>;
    public /*out*/ readonly confirmed!: pulumi.Output<boolean>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public readonly cspRoles!: pulumi.Output<string[]>;
    public readonly email!: pulumi.Output<string>;
    public readonly groups!: pulumi.Output<outputs.UserSaasGroup[] | undefined>;
    public /*out*/ readonly logins!: pulumi.Output<outputs.UserSaasLogin[]>;
    public /*out*/ readonly multiaccount!: pulumi.Output<boolean>;
    public /*out*/ readonly passwordReset!: pulumi.Output<boolean>;
    public /*out*/ readonly sendAnnouncements!: pulumi.Output<boolean>;
    public /*out*/ readonly sendNewPlugins!: pulumi.Output<boolean>;
    public /*out*/ readonly sendNewRisks!: pulumi.Output<boolean>;
    public /*out*/ readonly sendScanResults!: pulumi.Output<boolean>;
    public /*out*/ readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserSaas resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserSaasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserSaasArgs | UserSaasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserSaasState | undefined;
            resourceInputs["accountAdmin"] = state ? state.accountAdmin : undefined;
            resourceInputs["confirmed"] = state ? state.confirmed : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["cspRoles"] = state ? state.cspRoles : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["logins"] = state ? state.logins : undefined;
            resourceInputs["multiaccount"] = state ? state.multiaccount : undefined;
            resourceInputs["passwordReset"] = state ? state.passwordReset : undefined;
            resourceInputs["sendAnnouncements"] = state ? state.sendAnnouncements : undefined;
            resourceInputs["sendNewPlugins"] = state ? state.sendNewPlugins : undefined;
            resourceInputs["sendNewRisks"] = state ? state.sendNewRisks : undefined;
            resourceInputs["sendScanResults"] = state ? state.sendScanResults : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserSaasArgs | undefined;
            if ((!args || args.accountAdmin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountAdmin'");
            }
            if ((!args || args.cspRoles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cspRoles'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["accountAdmin"] = args ? args.accountAdmin : undefined;
            resourceInputs["cspRoles"] = args ? args.cspRoles : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["confirmed"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["logins"] = undefined /*out*/;
            resourceInputs["multiaccount"] = undefined /*out*/;
            resourceInputs["passwordReset"] = undefined /*out*/;
            resourceInputs["sendAnnouncements"] = undefined /*out*/;
            resourceInputs["sendNewPlugins"] = undefined /*out*/;
            resourceInputs["sendNewRisks"] = undefined /*out*/;
            resourceInputs["sendScanResults"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserSaas.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserSaas resources.
 */
export interface UserSaasState {
    accountAdmin?: pulumi.Input<boolean>;
    confirmed?: pulumi.Input<boolean>;
    created?: pulumi.Input<string>;
    cspRoles?: pulumi.Input<pulumi.Input<string>[]>;
    email?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.UserSaasGroup>[]>;
    logins?: pulumi.Input<pulumi.Input<inputs.UserSaasLogin>[]>;
    multiaccount?: pulumi.Input<boolean>;
    passwordReset?: pulumi.Input<boolean>;
    sendAnnouncements?: pulumi.Input<boolean>;
    sendNewPlugins?: pulumi.Input<boolean>;
    sendNewRisks?: pulumi.Input<boolean>;
    sendScanResults?: pulumi.Input<boolean>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserSaas resource.
 */
export interface UserSaasArgs {
    accountAdmin: pulumi.Input<boolean>;
    cspRoles: pulumi.Input<pulumi.Input<string>[]>;
    email: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.UserSaasGroup>[]>;
}
