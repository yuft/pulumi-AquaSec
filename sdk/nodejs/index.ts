// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./applicationScope";
export * from "./aquasecHostRuntimePolicy";
export * from "./containerRuntimePolicy";
export * from "./enforcerGroups";
export * from "./firewallPolicy";
export * from "./functionAssurancePolicy";
export * from "./functionRuntimePolicy";
export * from "./getApplicationScope";
export * from "./getContainerRuntimePolicy";
export * from "./getEnforcerGroups";
export * from "./getFirewallPolicy";
export * from "./getFunctionAssurancePolicy";
export * from "./getFunctionRuntimePolicy";
export * from "./getGateways";
export * from "./getGroups";
export * from "./getHostAssurancePolicy";
export * from "./getHostRuntimePolicy";
export * from "./getImage";
export * from "./getImageAssurancePolicy";
export * from "./getIntegrationRegistries";
export * from "./getPermissionsSets";
export * from "./getRoles";
export * from "./getService";
export * from "./getUsers";
export * from "./getUsersSaas";
export * from "./group";
export * from "./hostAssurancePolicy";
export * from "./image";
export * from "./imageAssurancePolicy";
export * from "./integrationRegistry";
export * from "./notificationSlack";
export * from "./permissionsSets";
export * from "./provider";
export * from "./role";
export * from "./service";
export * from "./user";
export * from "./userSaas";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { ApplicationScope } from "./applicationScope";
import { AquasecHostRuntimePolicy } from "./aquasecHostRuntimePolicy";
import { ContainerRuntimePolicy } from "./containerRuntimePolicy";
import { EnforcerGroups } from "./enforcerGroups";
import { FirewallPolicy } from "./firewallPolicy";
import { FunctionAssurancePolicy } from "./functionAssurancePolicy";
import { FunctionRuntimePolicy } from "./functionRuntimePolicy";
import { Group } from "./group";
import { HostAssurancePolicy } from "./hostAssurancePolicy";
import { Image } from "./image";
import { ImageAssurancePolicy } from "./imageAssurancePolicy";
import { IntegrationRegistry } from "./integrationRegistry";
import { NotificationSlack } from "./notificationSlack";
import { PermissionsSets } from "./permissionsSets";
import { Role } from "./role";
import { Service } from "./service";
import { User } from "./user";
import { UserSaas } from "./userSaas";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aquasec:index/applicationScope:ApplicationScope":
                return new ApplicationScope(name, <any>undefined, { urn })
            case "aquasec:index/aquasecHostRuntimePolicy:AquasecHostRuntimePolicy":
                return new AquasecHostRuntimePolicy(name, <any>undefined, { urn })
            case "aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy":
                return new ContainerRuntimePolicy(name, <any>undefined, { urn })
            case "aquasec:index/enforcerGroups:EnforcerGroups":
                return new EnforcerGroups(name, <any>undefined, { urn })
            case "aquasec:index/firewallPolicy:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "aquasec:index/functionAssurancePolicy:FunctionAssurancePolicy":
                return new FunctionAssurancePolicy(name, <any>undefined, { urn })
            case "aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy":
                return new FunctionRuntimePolicy(name, <any>undefined, { urn })
            case "aquasec:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "aquasec:index/hostAssurancePolicy:HostAssurancePolicy":
                return new HostAssurancePolicy(name, <any>undefined, { urn })
            case "aquasec:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "aquasec:index/imageAssurancePolicy:ImageAssurancePolicy":
                return new ImageAssurancePolicy(name, <any>undefined, { urn })
            case "aquasec:index/integrationRegistry:IntegrationRegistry":
                return new IntegrationRegistry(name, <any>undefined, { urn })
            case "aquasec:index/notificationSlack:NotificationSlack":
                return new NotificationSlack(name, <any>undefined, { urn })
            case "aquasec:index/permissionsSets:PermissionsSets":
                return new PermissionsSets(name, <any>undefined, { urn })
            case "aquasec:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "aquasec:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "aquasec:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "aquasec:index/userSaas:UserSaas":
                return new UserSaas(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aquasec", "index/applicationScope", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/aquasecHostRuntimePolicy", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/containerRuntimePolicy", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/enforcerGroups", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/firewallPolicy", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/functionAssurancePolicy", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/functionRuntimePolicy", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/group", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/hostAssurancePolicy", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/image", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/imageAssurancePolicy", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/integrationRegistry", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/notificationSlack", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/permissionsSets", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/role", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/service", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/user", _module)
pulumi.runtime.registerResourceModule("aquasec", "index/userSaas", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("aquasec", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aquasec") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
