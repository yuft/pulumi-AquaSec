// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getFunctionAssurancePolicy(args: GetFunctionAssurancePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetFunctionAssurancePolicyResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aquasec:index/getFunctionAssurancePolicy:getFunctionAssurancePolicy", {
        "maximumScoreExcludeNoFix": args.maximumScoreExcludeNoFix,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getFunctionAssurancePolicy.
 */
export interface GetFunctionAssurancePolicyArgs {
    maximumScoreExcludeNoFix?: boolean;
    name: string;
}

/**
 * A collection of values returned by getFunctionAssurancePolicy.
 */
export interface GetFunctionAssurancePolicyResult {
    readonly allowedImages: string[];
    readonly applicationScopes: string[];
    readonly assuranceType: string;
    readonly auditOnFailure: boolean;
    readonly author: string;
    readonly autoScanConfigured: boolean;
    readonly autoScanEnabled: boolean;
    readonly autoScanTimes: outputs.GetFunctionAssurancePolicyAutoScanTime[];
    readonly blacklistPermissions: string[];
    readonly blacklistPermissionsEnabled: boolean;
    readonly blacklistedLicenses: string[];
    readonly blacklistedLicensesEnabled: boolean;
    readonly blockFailed: boolean;
    readonly controlExcludeNoFix: boolean;
    readonly customChecks: outputs.GetFunctionAssurancePolicyCustomCheck[];
    readonly customChecksEnabled: boolean;
    readonly customSeverityEnabled: boolean;
    readonly cvesBlackListEnabled: boolean;
    readonly cvesBlackLists: string[];
    readonly cvesWhiteListEnabled: boolean;
    readonly cvesWhiteLists: string[];
    readonly cvssSeverity: string;
    readonly cvssSeverityEnabled: boolean;
    readonly cvssSeverityExcludeNoFix: boolean;
    readonly description: string;
    readonly disallowMalware: boolean;
    readonly dockerCisEnabled: boolean;
    readonly domain: string;
    readonly domainName: string;
    readonly dtaEnabled: boolean;
    readonly dtaSeverity: string;
    readonly enabled: boolean;
    readonly enforce: boolean;
    readonly enforceAfterDays: number;
    readonly enforceExcessivePermissions: boolean;
    readonly exceptionalMonitoredMalwarePaths: string[];
    readonly failCicd: boolean;
    readonly forbiddenLabels: outputs.GetFunctionAssurancePolicyForbiddenLabel[];
    readonly forbiddenLabelsEnabled: boolean;
    readonly forceMicroenforcer: boolean;
    readonly functionIntegrityEnabled: boolean;
    /**
     * The ID of this resource.
     */
    readonly id: string;
    readonly ignoreRecentlyPublishedVln: boolean;
    readonly ignoreRecentlyPublishedVlnPeriod: number;
    readonly ignoreRiskResourcesEnabled: boolean;
    readonly ignoredRiskResources: string[];
    readonly images: string[];
    readonly kubeCisEnabled: boolean;
    readonly labels: string[];
    readonly malwareAction: string;
    readonly maximumScore: number;
    readonly maximumScoreEnabled: boolean;
    readonly maximumScoreExcludeNoFix?: boolean;
    readonly monitoredMalwarePaths: string[];
    readonly name: string;
    readonly onlyNoneRootUsers: boolean;
    readonly packagesBlackListEnabled: boolean;
    readonly packagesBlackLists: outputs.GetFunctionAssurancePolicyPackagesBlackList[];
    readonly packagesWhiteListEnabled: boolean;
    readonly packagesWhiteLists: outputs.GetFunctionAssurancePolicyPackagesWhiteList[];
    readonly partialResultsImageFail: boolean;
    readonly readOnly: boolean;
    readonly registries: string[];
    readonly registry: string;
    readonly requiredLabels: outputs.GetFunctionAssurancePolicyRequiredLabel[];
    readonly requiredLabelsEnabled: boolean;
    readonly scanNfsMounts: boolean;
    readonly scanSensitiveData: boolean;
    readonly scapEnabled: boolean;
    readonly scapFiles: string[];
    readonly scopes: outputs.GetFunctionAssurancePolicyScope[];
    readonly trustedBaseImages: outputs.GetFunctionAssurancePolicyTrustedBaseImage[];
    readonly trustedBaseImagesEnabled: boolean;
    readonly whitelistedLicenses: string[];
    readonly whitelistedLicensesEnabled: boolean;
}

export function getFunctionAssurancePolicyOutput(args: GetFunctionAssurancePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFunctionAssurancePolicyResult> {
    return pulumi.output(args).apply(a => getFunctionAssurancePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getFunctionAssurancePolicy.
 */
export interface GetFunctionAssurancePolicyOutputArgs {
    maximumScoreExcludeNoFix?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}
