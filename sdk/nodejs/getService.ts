// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("aquasec:index/getService:getService", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    /**
     * The name of the service. It is recommended not to use whitespace characters in the name.
     */
    name: string;
}

/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    /**
     * Indicates the application scope of the service.
     */
    readonly applicationScopes: string[];
    /**
     * Username of the account that created the service.
     */
    readonly author: string;
    /**
     * The number of containers associated with the service.
     */
    readonly containersCount: number;
    /**
     * A textual description of the service record; maximum 500 characters.
     */
    readonly description: string;
    /**
     * Enforcement status of the service.
     */
    readonly enforce: boolean;
    /**
     * Whether the service has been evaluated for security vulnerabilities.
     */
    readonly evaluated: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates if registered or not.
     */
    readonly isRegistered: boolean;
    /**
     * Timestamp of the last update in Unix time format.
     */
    readonly lastupdate: number;
    /**
     * Indicates if monitoring is enabled or not
     */
    readonly monitoring: boolean;
    /**
     * The name of the service. It is recommended not to use whitespace characters in the name.
     */
    readonly name: string;
    /**
     * The number of container that are not evaluated.
     */
    readonly notEvaluatedCount: number;
    /**
     * The service's policies; an array of container firewall policy names.
     */
    readonly policies: string[];
    /**
     * Rules priority, must be between 1-100.
     */
    readonly priority: number;
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     */
    readonly scopeExpression: string;
    /**
     * List of scope attributes.
     */
    readonly scopeVariables: outputs.GetServiceScopeVariable[];
    /**
     * Type of the workload. container or host.
     */
    readonly target: string;
    /**
     * The number of containers allocated to the service that are not registered.
     */
    readonly unregisteredCount: number;
    /**
     * Number of high severity vulnerabilities.
     */
    readonly vulnerabilitiesHigh: number;
    /**
     * Number of low severity vulnerabilities.
     */
    readonly vulnerabilitiesLow: number;
    /**
     * Number of malware.
     */
    readonly vulnerabilitiesMalware: number;
    /**
     * Number of medium severity vulnerabilities.
     */
    readonly vulnerabilitiesMedium: number;
    /**
     * Number of negligible vulnerabilities.
     */
    readonly vulnerabilitiesNegligible: number;
    /**
     * The CVSS average vulnerabilities score.
     */
    readonly vulnerabilitiesScoreAverage: number;
    /**
     * Number of sensitive vulnerabilities.
     */
    readonly vulnerabilitiesSensitive: number;
    /**
     * Total number of vulnerabilities.
     */
    readonly vulnerabilitiesTotal: number;
}

export function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult> {
    return pulumi.output(args).apply(a => getService(a, opts))
}

/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    /**
     * The name of the service. It is recommended not to use whitespace characters in the name.
     */
    name: pulumi.Input<string>;
}
