// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `aquasec.Role` resource manages your roles within Aqua.
 *
 * The roles created must have permission set and at least one Role Application Scope that is already present within Aqua.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aquasec from "@pulumi/aquasec";
 *
 * const iaC = new aquasec.Role("IaC", {
 *     description: "RoleIaC",
 *     permission: "PermissionIaC",
 *     roleName: "RoleIaC",
 *     scopes: ["Global"],
 * });
 * ```
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    public /*out*/ readonly author!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly permission!: pulumi.Output<string>;
    public readonly roleName!: pulumi.Output<string>;
    public readonly scopes!: pulumi.Output<string[]>;
    public readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["updatedAt"] = args ? args.updatedAt : undefined;
            resourceInputs["author"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    author?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    permission?: pulumi.Input<string>;
    roleName?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    description?: pulumi.Input<string>;
    permission: pulumi.Input<string>;
    roleName: pulumi.Input<string>;
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    updatedAt?: pulumi.Input<string>;
}
