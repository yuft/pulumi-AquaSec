// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aquasec:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Indicates the application scope of the service.
     */
    public readonly applicationScopes!: pulumi.Output<string[]>;
    /**
     * Username of the account that created the service.
     */
    public /*out*/ readonly author!: pulumi.Output<string>;
    /**
     * The number of containers associated with the service.
     */
    public /*out*/ readonly containersCount!: pulumi.Output<number>;
    /**
     * A textual description of the service record; maximum 500 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enforcement status of the service.
     */
    public readonly enforce!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the service has been evaluated for security vulnerabilities.
     */
    public /*out*/ readonly evaluated!: pulumi.Output<boolean>;
    /**
     * Indicates if registered or not.
     */
    public /*out*/ readonly isRegistered!: pulumi.Output<boolean>;
    /**
     * Timestamp of the last update in Unix time format.
     */
    public /*out*/ readonly lastupdate!: pulumi.Output<number>;
    /**
     * Indicates if monitoring is enabled or not
     */
    public readonly monitoring!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the service. It is recommended not to use whitespace characters in the name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of container that are not evaluated.
     */
    public /*out*/ readonly notEvaluatedCount!: pulumi.Output<number>;
    /**
     * The service's policies; an array of container firewall policy names.
     */
    public readonly policies!: pulumi.Output<string[]>;
    /**
     * Rules priority, must be between 1-100.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     */
    public readonly scopeExpression!: pulumi.Output<string>;
    /**
     * List of scope attributes.
     */
    public readonly scopeVariables!: pulumi.Output<outputs.ServiceScopeVariable[]>;
    /**
     * Type of the workload. container or host.
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * The number of containers allocated to the service that are not registered.
     */
    public /*out*/ readonly unregisteredCount!: pulumi.Output<number>;
    /**
     * Number of high severity vulnerabilities.
     */
    public /*out*/ readonly vulnerabilitiesHigh!: pulumi.Output<number>;
    /**
     * Number of low severity vulnerabilities.
     */
    public /*out*/ readonly vulnerabilitiesLow!: pulumi.Output<number>;
    /**
     * Number of malware.
     */
    public /*out*/ readonly vulnerabilitiesMalware!: pulumi.Output<number>;
    /**
     * Number of medium severity vulnerabilities.
     */
    public /*out*/ readonly vulnerabilitiesMedium!: pulumi.Output<number>;
    /**
     * Number of negligible vulnerabilities.
     */
    public /*out*/ readonly vulnerabilitiesNegligible!: pulumi.Output<number>;
    /**
     * The CVSS average vulnerabilities score.
     */
    public /*out*/ readonly vulnerabilitiesScoreAverage!: pulumi.Output<number>;
    /**
     * Number of sensitive vulnerabilities.
     */
    public /*out*/ readonly vulnerabilitiesSensitive!: pulumi.Output<number>;
    /**
     * Total number of vulnerabilities.
     */
    public /*out*/ readonly vulnerabilitiesTotal!: pulumi.Output<number>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["applicationScopes"] = state ? state.applicationScopes : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["containersCount"] = state ? state.containersCount : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enforce"] = state ? state.enforce : undefined;
            resourceInputs["evaluated"] = state ? state.evaluated : undefined;
            resourceInputs["isRegistered"] = state ? state.isRegistered : undefined;
            resourceInputs["lastupdate"] = state ? state.lastupdate : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notEvaluatedCount"] = state ? state.notEvaluatedCount : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["scopeExpression"] = state ? state.scopeExpression : undefined;
            resourceInputs["scopeVariables"] = state ? state.scopeVariables : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["unregisteredCount"] = state ? state.unregisteredCount : undefined;
            resourceInputs["vulnerabilitiesHigh"] = state ? state.vulnerabilitiesHigh : undefined;
            resourceInputs["vulnerabilitiesLow"] = state ? state.vulnerabilitiesLow : undefined;
            resourceInputs["vulnerabilitiesMalware"] = state ? state.vulnerabilitiesMalware : undefined;
            resourceInputs["vulnerabilitiesMedium"] = state ? state.vulnerabilitiesMedium : undefined;
            resourceInputs["vulnerabilitiesNegligible"] = state ? state.vulnerabilitiesNegligible : undefined;
            resourceInputs["vulnerabilitiesScoreAverage"] = state ? state.vulnerabilitiesScoreAverage : undefined;
            resourceInputs["vulnerabilitiesSensitive"] = state ? state.vulnerabilitiesSensitive : undefined;
            resourceInputs["vulnerabilitiesTotal"] = state ? state.vulnerabilitiesTotal : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.applicationScopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationScopes'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            if ((!args || args.scopeExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeExpression'");
            }
            if ((!args || args.scopeVariables === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeVariables'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["applicationScopes"] = args ? args.applicationScopes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enforce"] = args ? args.enforce : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["scopeExpression"] = args ? args.scopeExpression : undefined;
            resourceInputs["scopeVariables"] = args ? args.scopeVariables : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["author"] = undefined /*out*/;
            resourceInputs["containersCount"] = undefined /*out*/;
            resourceInputs["evaluated"] = undefined /*out*/;
            resourceInputs["isRegistered"] = undefined /*out*/;
            resourceInputs["lastupdate"] = undefined /*out*/;
            resourceInputs["notEvaluatedCount"] = undefined /*out*/;
            resourceInputs["unregisteredCount"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesHigh"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesLow"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesMalware"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesMedium"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesNegligible"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesScoreAverage"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesSensitive"] = undefined /*out*/;
            resourceInputs["vulnerabilitiesTotal"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Indicates the application scope of the service.
     */
    applicationScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Username of the account that created the service.
     */
    author?: pulumi.Input<string>;
    /**
     * The number of containers associated with the service.
     */
    containersCount?: pulumi.Input<number>;
    /**
     * A textual description of the service record; maximum 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Enforcement status of the service.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * Whether the service has been evaluated for security vulnerabilities.
     */
    evaluated?: pulumi.Input<boolean>;
    /**
     * Indicates if registered or not.
     */
    isRegistered?: pulumi.Input<boolean>;
    /**
     * Timestamp of the last update in Unix time format.
     */
    lastupdate?: pulumi.Input<number>;
    /**
     * Indicates if monitoring is enabled or not
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The name of the service. It is recommended not to use whitespace characters in the name.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of container that are not evaluated.
     */
    notEvaluatedCount?: pulumi.Input<number>;
    /**
     * The service's policies; an array of container firewall policy names.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rules priority, must be between 1-100.
     */
    priority?: pulumi.Input<number>;
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     */
    scopeExpression?: pulumi.Input<string>;
    /**
     * List of scope attributes.
     */
    scopeVariables?: pulumi.Input<pulumi.Input<inputs.ServiceScopeVariable>[]>;
    /**
     * Type of the workload. container or host.
     */
    target?: pulumi.Input<string>;
    /**
     * The number of containers allocated to the service that are not registered.
     */
    unregisteredCount?: pulumi.Input<number>;
    /**
     * Number of high severity vulnerabilities.
     */
    vulnerabilitiesHigh?: pulumi.Input<number>;
    /**
     * Number of low severity vulnerabilities.
     */
    vulnerabilitiesLow?: pulumi.Input<number>;
    /**
     * Number of malware.
     */
    vulnerabilitiesMalware?: pulumi.Input<number>;
    /**
     * Number of medium severity vulnerabilities.
     */
    vulnerabilitiesMedium?: pulumi.Input<number>;
    /**
     * Number of negligible vulnerabilities.
     */
    vulnerabilitiesNegligible?: pulumi.Input<number>;
    /**
     * The CVSS average vulnerabilities score.
     */
    vulnerabilitiesScoreAverage?: pulumi.Input<number>;
    /**
     * Number of sensitive vulnerabilities.
     */
    vulnerabilitiesSensitive?: pulumi.Input<number>;
    /**
     * Total number of vulnerabilities.
     */
    vulnerabilitiesTotal?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Indicates the application scope of the service.
     */
    applicationScopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A textual description of the service record; maximum 500 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * Enforcement status of the service.
     */
    enforce?: pulumi.Input<boolean>;
    /**
     * Indicates if monitoring is enabled or not
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * The name of the service. It is recommended not to use whitespace characters in the name.
     */
    name?: pulumi.Input<string>;
    /**
     * The service's policies; an array of container firewall policy names.
     */
    policies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rules priority, must be between 1-100.
     */
    priority?: pulumi.Input<number>;
    /**
     * Logical expression of how to compute the dependency of the scope variables.
     */
    scopeExpression: pulumi.Input<string>;
    /**
     * List of scope attributes.
     */
    scopeVariables: pulumi.Input<pulumi.Input<inputs.ServiceScopeVariable>[]>;
    /**
     * Type of the workload. container or host.
     */
    target: pulumi.Input<string>;
}
