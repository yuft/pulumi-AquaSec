// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IntegrationRegistry struct {
	pulumi.CustomResourceState

	Author       pulumi.StringOutput      `pulumi:"author"`
	AutoPull     pulumi.BoolPtrOutput     `pulumi:"autoPull"`
	AutoPullMax  pulumi.IntPtrOutput      `pulumi:"autoPullMax"`
	AutoPullTime pulumi.StringPtrOutput   `pulumi:"autoPullTime"`
	LastUpdated  pulumi.StringOutput      `pulumi:"lastUpdated"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	Password     pulumi.StringPtrOutput   `pulumi:"password"`
	Prefixes     pulumi.StringArrayOutput `pulumi:"prefixes"`
	Type         pulumi.StringOutput      `pulumi:"type"`
	Url          pulumi.StringPtrOutput   `pulumi:"url"`
	Username     pulumi.StringPtrOutput   `pulumi:"username"`
}

// NewIntegrationRegistry registers a new resource with the given unique name, arguments, and options.
func NewIntegrationRegistry(ctx *pulumi.Context,
	name string, args *IntegrationRegistryArgs, opts ...pulumi.ResourceOption) (*IntegrationRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Prefixes == nil {
		return nil, errors.New("invalid value for required argument 'Prefixes'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource IntegrationRegistry
	err := ctx.RegisterResource("aquasec:index/integrationRegistry:IntegrationRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationRegistry gets an existing IntegrationRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationRegistryState, opts ...pulumi.ResourceOption) (*IntegrationRegistry, error) {
	var resource IntegrationRegistry
	err := ctx.ReadResource("aquasec:index/integrationRegistry:IntegrationRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationRegistry resources.
type integrationRegistryState struct {
	Author       *string  `pulumi:"author"`
	AutoPull     *bool    `pulumi:"autoPull"`
	AutoPullMax  *int     `pulumi:"autoPullMax"`
	AutoPullTime *string  `pulumi:"autoPullTime"`
	LastUpdated  *string  `pulumi:"lastUpdated"`
	Name         *string  `pulumi:"name"`
	Password     *string  `pulumi:"password"`
	Prefixes     []string `pulumi:"prefixes"`
	Type         *string  `pulumi:"type"`
	Url          *string  `pulumi:"url"`
	Username     *string  `pulumi:"username"`
}

type IntegrationRegistryState struct {
	Author       pulumi.StringPtrInput
	AutoPull     pulumi.BoolPtrInput
	AutoPullMax  pulumi.IntPtrInput
	AutoPullTime pulumi.StringPtrInput
	LastUpdated  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Password     pulumi.StringPtrInput
	Prefixes     pulumi.StringArrayInput
	Type         pulumi.StringPtrInput
	Url          pulumi.StringPtrInput
	Username     pulumi.StringPtrInput
}

func (IntegrationRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationRegistryState)(nil)).Elem()
}

type integrationRegistryArgs struct {
	Author       *string  `pulumi:"author"`
	AutoPull     *bool    `pulumi:"autoPull"`
	AutoPullMax  *int     `pulumi:"autoPullMax"`
	AutoPullTime *string  `pulumi:"autoPullTime"`
	LastUpdated  *string  `pulumi:"lastUpdated"`
	Name         *string  `pulumi:"name"`
	Password     *string  `pulumi:"password"`
	Prefixes     []string `pulumi:"prefixes"`
	Type         string   `pulumi:"type"`
	Url          *string  `pulumi:"url"`
	Username     *string  `pulumi:"username"`
}

// The set of arguments for constructing a IntegrationRegistry resource.
type IntegrationRegistryArgs struct {
	Author       pulumi.StringPtrInput
	AutoPull     pulumi.BoolPtrInput
	AutoPullMax  pulumi.IntPtrInput
	AutoPullTime pulumi.StringPtrInput
	LastUpdated  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Password     pulumi.StringPtrInput
	Prefixes     pulumi.StringArrayInput
	Type         pulumi.StringInput
	Url          pulumi.StringPtrInput
	Username     pulumi.StringPtrInput
}

func (IntegrationRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationRegistryArgs)(nil)).Elem()
}

type IntegrationRegistryInput interface {
	pulumi.Input

	ToIntegrationRegistryOutput() IntegrationRegistryOutput
	ToIntegrationRegistryOutputWithContext(ctx context.Context) IntegrationRegistryOutput
}

func (*IntegrationRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRegistry)(nil)).Elem()
}

func (i *IntegrationRegistry) ToIntegrationRegistryOutput() IntegrationRegistryOutput {
	return i.ToIntegrationRegistryOutputWithContext(context.Background())
}

func (i *IntegrationRegistry) ToIntegrationRegistryOutputWithContext(ctx context.Context) IntegrationRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRegistryOutput)
}

// IntegrationRegistryArrayInput is an input type that accepts IntegrationRegistryArray and IntegrationRegistryArrayOutput values.
// You can construct a concrete instance of `IntegrationRegistryArrayInput` via:
//
//          IntegrationRegistryArray{ IntegrationRegistryArgs{...} }
type IntegrationRegistryArrayInput interface {
	pulumi.Input

	ToIntegrationRegistryArrayOutput() IntegrationRegistryArrayOutput
	ToIntegrationRegistryArrayOutputWithContext(context.Context) IntegrationRegistryArrayOutput
}

type IntegrationRegistryArray []IntegrationRegistryInput

func (IntegrationRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationRegistry)(nil)).Elem()
}

func (i IntegrationRegistryArray) ToIntegrationRegistryArrayOutput() IntegrationRegistryArrayOutput {
	return i.ToIntegrationRegistryArrayOutputWithContext(context.Background())
}

func (i IntegrationRegistryArray) ToIntegrationRegistryArrayOutputWithContext(ctx context.Context) IntegrationRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRegistryArrayOutput)
}

// IntegrationRegistryMapInput is an input type that accepts IntegrationRegistryMap and IntegrationRegistryMapOutput values.
// You can construct a concrete instance of `IntegrationRegistryMapInput` via:
//
//          IntegrationRegistryMap{ "key": IntegrationRegistryArgs{...} }
type IntegrationRegistryMapInput interface {
	pulumi.Input

	ToIntegrationRegistryMapOutput() IntegrationRegistryMapOutput
	ToIntegrationRegistryMapOutputWithContext(context.Context) IntegrationRegistryMapOutput
}

type IntegrationRegistryMap map[string]IntegrationRegistryInput

func (IntegrationRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationRegistry)(nil)).Elem()
}

func (i IntegrationRegistryMap) ToIntegrationRegistryMapOutput() IntegrationRegistryMapOutput {
	return i.ToIntegrationRegistryMapOutputWithContext(context.Background())
}

func (i IntegrationRegistryMap) ToIntegrationRegistryMapOutputWithContext(ctx context.Context) IntegrationRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationRegistryMapOutput)
}

type IntegrationRegistryOutput struct{ *pulumi.OutputState }

func (IntegrationRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationRegistry)(nil)).Elem()
}

func (o IntegrationRegistryOutput) ToIntegrationRegistryOutput() IntegrationRegistryOutput {
	return o
}

func (o IntegrationRegistryOutput) ToIntegrationRegistryOutputWithContext(ctx context.Context) IntegrationRegistryOutput {
	return o
}

type IntegrationRegistryArrayOutput struct{ *pulumi.OutputState }

func (IntegrationRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationRegistry)(nil)).Elem()
}

func (o IntegrationRegistryArrayOutput) ToIntegrationRegistryArrayOutput() IntegrationRegistryArrayOutput {
	return o
}

func (o IntegrationRegistryArrayOutput) ToIntegrationRegistryArrayOutputWithContext(ctx context.Context) IntegrationRegistryArrayOutput {
	return o
}

func (o IntegrationRegistryArrayOutput) Index(i pulumi.IntInput) IntegrationRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationRegistry {
		return vs[0].([]*IntegrationRegistry)[vs[1].(int)]
	}).(IntegrationRegistryOutput)
}

type IntegrationRegistryMapOutput struct{ *pulumi.OutputState }

func (IntegrationRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationRegistry)(nil)).Elem()
}

func (o IntegrationRegistryMapOutput) ToIntegrationRegistryMapOutput() IntegrationRegistryMapOutput {
	return o
}

func (o IntegrationRegistryMapOutput) ToIntegrationRegistryMapOutputWithContext(ctx context.Context) IntegrationRegistryMapOutput {
	return o
}

func (o IntegrationRegistryMapOutput) MapIndex(k pulumi.StringInput) IntegrationRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationRegistry {
		return vs[0].(map[string]*IntegrationRegistry)[vs[1].(string)]
	}).(IntegrationRegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationRegistryInput)(nil)).Elem(), &IntegrationRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationRegistryArrayInput)(nil)).Elem(), IntegrationRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationRegistryMapInput)(nil)).Elem(), IntegrationRegistryMap{})
	pulumi.RegisterOutputType(IntegrationRegistryOutput{})
	pulumi.RegisterOutputType(IntegrationRegistryArrayOutput{})
	pulumi.RegisterOutputType(IntegrationRegistryMapOutput{})
}
