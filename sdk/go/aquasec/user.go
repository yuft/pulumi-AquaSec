// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `User` resource manages your users within Aqua.
//
// The users created must have at least one Role that is already present within Aqua.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aquasec/sdk/go/aquasec"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aquasec.NewUser(ctx, "iaC", &aquasec.UserArgs{
// 			UserId:   pulumi.String("IaC"),
// 			Password: pulumi.Any(_var.Password),
// 			Roles: pulumi.StringArray{
// 				pulumi.String("infrastructure"),
// 			},
// 			Email:     pulumi.String("infrastructure@example.com"),
// 			FirstTime: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type User struct {
	pulumi.CustomResourceState

	Email           pulumi.StringPtrOutput   `pulumi:"email"`
	FirstTime       pulumi.BoolPtrOutput     `pulumi:"firstTime"`
	IsSuper         pulumi.BoolOutput        `pulumi:"isSuper"`
	Name            pulumi.StringOutput      `pulumi:"name"`
	Password        pulumi.StringOutput      `pulumi:"password"`
	PasswordConfirm pulumi.StringPtrOutput   `pulumi:"passwordConfirm"`
	Plan            pulumi.StringOutput      `pulumi:"plan"`
	Role            pulumi.StringOutput      `pulumi:"role"`
	Roles           pulumi.StringArrayOutput `pulumi:"roles"`
	Type            pulumi.StringOutput      `pulumi:"type"`
	UiAccess        pulumi.BoolOutput        `pulumi:"uiAccess"`
	UserId          pulumi.StringOutput      `pulumi:"userId"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource User
	err := ctx.RegisterResource("aquasec:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("aquasec:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	Email           *string  `pulumi:"email"`
	FirstTime       *bool    `pulumi:"firstTime"`
	IsSuper         *bool    `pulumi:"isSuper"`
	Name            *string  `pulumi:"name"`
	Password        *string  `pulumi:"password"`
	PasswordConfirm *string  `pulumi:"passwordConfirm"`
	Plan            *string  `pulumi:"plan"`
	Role            *string  `pulumi:"role"`
	Roles           []string `pulumi:"roles"`
	Type            *string  `pulumi:"type"`
	UiAccess        *bool    `pulumi:"uiAccess"`
	UserId          *string  `pulumi:"userId"`
}

type UserState struct {
	Email           pulumi.StringPtrInput
	FirstTime       pulumi.BoolPtrInput
	IsSuper         pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	Password        pulumi.StringPtrInput
	PasswordConfirm pulumi.StringPtrInput
	Plan            pulumi.StringPtrInput
	Role            pulumi.StringPtrInput
	Roles           pulumi.StringArrayInput
	Type            pulumi.StringPtrInput
	UiAccess        pulumi.BoolPtrInput
	UserId          pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	Email           *string  `pulumi:"email"`
	FirstTime       *bool    `pulumi:"firstTime"`
	Name            *string  `pulumi:"name"`
	Password        string   `pulumi:"password"`
	PasswordConfirm *string  `pulumi:"passwordConfirm"`
	Roles           []string `pulumi:"roles"`
	UserId          string   `pulumi:"userId"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	Email           pulumi.StringPtrInput
	FirstTime       pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	Password        pulumi.StringInput
	PasswordConfirm pulumi.StringPtrInput
	Roles           pulumi.StringArrayInput
	UserId          pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//          UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//          UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
