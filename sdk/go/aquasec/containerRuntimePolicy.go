// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerRuntimePolicy struct {
	pulumi.CustomResourceState

	// List of executables that are allowed for the user.
	AllowedExecutables pulumi.StringArrayOutput `pulumi:"allowedExecutables"`
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayOutput `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrOutput `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrOutput `pulumi:"auditAllProcessesActivity"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrOutput `pulumi:"auditFullCommandArguments"`
	// Username of the account that created the service.
	Author pulumi.StringOutput `pulumi:"author"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrOutput `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrOutput `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrOutput `pulumi:"blockContainerExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrOutput `pulumi:"blockLowPortBinding"`
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages pulumi.BoolPtrOutput `pulumi:"blockNonCompliantImages"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrOutput `pulumi:"blockNonCompliantWorkloads"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrOutput `pulumi:"blockPrivilegedContainers"`
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrOutput `pulumi:"blockRootUser"`
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages pulumi.BoolPtrOutput `pulumi:"blockUnregisteredImages"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrOutput `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrOutput `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrOutput `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrOutput `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayOutput `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayOutput `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayOutput `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayOutput `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayOutput `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayOutput `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayOutput `pulumi:"blockedVolumes"`
	// The description of the container runtime policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention pulumi.BoolPtrOutput `pulumi:"enableDriftPrevention"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard pulumi.BoolPtrOutput `pulumi:"enableForkGuard"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrOutput `pulumi:"enableIpReputationSecurity"`
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection pulumi.BoolPtrOutput `pulumi:"enablePortScanDetection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrOutput `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrOutput `pulumi:"enforceAfterDays"`
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories pulumi.StringArrayOutput `pulumi:"exceptionalReadonlyFilesAndDirectories"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrOutput `pulumi:"forkGuardProcessLimit"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrOutput `pulumi:"limitNewPrivileges"`
	// Name of the container runtime policy
	Name pulumi.StringOutput `pulumi:"name"`
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories pulumi.StringArrayOutput `pulumi:"readonlyFilesAndDirectories"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringOutput `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayOutput `pulumi:"scopeVariables"`
}

// NewContainerRuntimePolicy registers a new resource with the given unique name, arguments, and options.
func NewContainerRuntimePolicy(ctx *pulumi.Context,
	name string, args *ContainerRuntimePolicyArgs, opts ...pulumi.ResourceOption) (*ContainerRuntimePolicy, error) {
	if args == nil {
		args = &ContainerRuntimePolicyArgs{}
	}

	var resource ContainerRuntimePolicy
	err := ctx.RegisterResource("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRuntimePolicy gets an existing ContainerRuntimePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRuntimePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRuntimePolicyState, opts ...pulumi.ResourceOption) (*ContainerRuntimePolicy, error) {
	var resource ContainerRuntimePolicy
	err := ctx.ReadResource("aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRuntimePolicy resources.
type containerRuntimePolicyState struct {
	// List of executables that are allowed for the user.
	AllowedExecutables []string `pulumi:"allowedExecutables"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity *bool `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity *bool `pulumi:"auditAllProcessesActivity"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// Username of the account that created the service.
	Author *string `pulumi:"author"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork *bool `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities *bool `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec *bool `pulumi:"blockContainerExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding *bool `pulumi:"blockLowPortBinding"`
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages *bool `pulumi:"blockNonCompliantImages"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers *bool `pulumi:"blockPrivilegedContainers"`
	// If true, prevent containers from running with root user.
	BlockRootUser *bool `pulumi:"blockRootUser"`
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages *bool `pulumi:"blockUnregisteredImages"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace *bool `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace *bool `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace *bool `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace *bool `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities []string `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables []string `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts []string `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts []string `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages []string `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes []string `pulumi:"blockedVolumes"`
	// The description of the container runtime policy
	Description *string `pulumi:"description"`
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention *bool `pulumi:"enableDriftPrevention"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard *bool `pulumi:"enableForkGuard"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity *bool `pulumi:"enableIpReputationSecurity"`
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection *bool `pulumi:"enablePortScanDetection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays *int `pulumi:"enforceAfterDays"`
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories []string `pulumi:"exceptionalReadonlyFilesAndDirectories"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit *int `pulumi:"forkGuardProcessLimit"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges *bool `pulumi:"limitNewPrivileges"`
	// Name of the container runtime policy
	Name *string `pulumi:"name"`
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories []string `pulumi:"readonlyFilesAndDirectories"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []ContainerRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
}

type ContainerRuntimePolicyState struct {
	// List of executables that are allowed for the user.
	AllowedExecutables pulumi.StringArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrInput
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// Username of the account that created the service.
	Author pulumi.StringPtrInput
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrInput
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrInput
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrInput
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrInput
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages pulumi.BoolPtrInput
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrInput
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrInput
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayInput
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayInput
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayInput
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayInput
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayInput
	// The description of the container runtime policy
	Description pulumi.StringPtrInput
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention pulumi.BoolPtrInput
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard pulumi.BoolPtrInput
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrInput
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrInput
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories pulumi.StringArrayInput
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrInput
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrInput
	// Name of the container runtime policy
	Name pulumi.StringPtrInput
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories pulumi.StringArrayInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayInput
}

func (ContainerRuntimePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRuntimePolicyState)(nil)).Elem()
}

type containerRuntimePolicyArgs struct {
	// List of executables that are allowed for the user.
	AllowedExecutables []string `pulumi:"allowedExecutables"`
	// Indicates the application scope of the service.
	ApplicationScopes []string `pulumi:"applicationScopes"`
	// If true, all network activity will be audited.
	AuditAllNetworkActivity *bool `pulumi:"auditAllNetworkActivity"`
	// If true, all process activity will be audited.
	AuditAllProcessesActivity *bool `pulumi:"auditAllProcessesActivity"`
	// If true, full command arguments will be audited.
	AuditFullCommandArguments *bool `pulumi:"auditFullCommandArguments"`
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork *bool `pulumi:"blockAccessHostNetwork"`
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities *bool `pulumi:"blockAddingCapabilities"`
	// If true, exec into a container is prevented.
	BlockContainerExec *bool `pulumi:"blockContainerExec"`
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding *bool `pulumi:"blockLowPortBinding"`
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages *bool `pulumi:"blockNonCompliantImages"`
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads *bool `pulumi:"blockNonCompliantWorkloads"`
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers *bool `pulumi:"blockPrivilegedContainers"`
	// If true, prevent containers from running with root user.
	BlockRootUser *bool `pulumi:"blockRootUser"`
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages *bool `pulumi:"blockUnregisteredImages"`
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace *bool `pulumi:"blockUseIpcNamespace"`
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace *bool `pulumi:"blockUsePidNamespace"`
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace *bool `pulumi:"blockUseUserNamespace"`
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace *bool `pulumi:"blockUseUtsNamespace"`
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities []string `pulumi:"blockedCapabilities"`
	// List of executables that are prevented from running in containers.
	BlockedExecutables []string `pulumi:"blockedExecutables"`
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles []string `pulumi:"blockedFiles"`
	// List of blocked inbound ports.
	BlockedInboundPorts []string `pulumi:"blockedInboundPorts"`
	// List of blocked outbound ports.
	BlockedOutboundPorts []string `pulumi:"blockedOutboundPorts"`
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages []string `pulumi:"blockedPackages"`
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes []string `pulumi:"blockedVolumes"`
	// The description of the container runtime policy
	Description *string `pulumi:"description"`
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention *bool `pulumi:"enableDriftPrevention"`
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard *bool `pulumi:"enableForkGuard"`
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity *bool `pulumi:"enableIpReputationSecurity"`
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection *bool `pulumi:"enablePortScanDetection"`
	// Indicates if the runtime policy is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	// Indicates that policy should effect container execution (not just for audit).
	Enforce *bool `pulumi:"enforce"`
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays *int `pulumi:"enforceAfterDays"`
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories []string `pulumi:"exceptionalReadonlyFilesAndDirectories"`
	// Process limit for the fork guard.
	ForkGuardProcessLimit *int `pulumi:"forkGuardProcessLimit"`
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges *bool `pulumi:"limitNewPrivileges"`
	// Name of the container runtime policy
	Name *string `pulumi:"name"`
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories []string `pulumi:"readonlyFilesAndDirectories"`
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression *string `pulumi:"scopeExpression"`
	// List of scope attributes.
	ScopeVariables []ContainerRuntimePolicyScopeVariable `pulumi:"scopeVariables"`
}

// The set of arguments for constructing a ContainerRuntimePolicy resource.
type ContainerRuntimePolicyArgs struct {
	// List of executables that are allowed for the user.
	AllowedExecutables pulumi.StringArrayInput
	// Indicates the application scope of the service.
	ApplicationScopes pulumi.StringArrayInput
	// If true, all network activity will be audited.
	AuditAllNetworkActivity pulumi.BoolPtrInput
	// If true, all process activity will be audited.
	AuditAllProcessesActivity pulumi.BoolPtrInput
	// If true, full command arguments will be audited.
	AuditFullCommandArguments pulumi.BoolPtrInput
	// If true, prevent containers from running with access to host network.
	BlockAccessHostNetwork pulumi.BoolPtrInput
	// If true, prevent containers from running with adding capabilities with `--cap-add` privilege.
	BlockAddingCapabilities pulumi.BoolPtrInput
	// If true, exec into a container is prevented.
	BlockContainerExec pulumi.BoolPtrInput
	// If true, prevent containers from running with the capability to bind in port lower than 1024.
	BlockLowPortBinding pulumi.BoolPtrInput
	// If true, running non-compliant image in the container is prevented.
	BlockNonCompliantImages pulumi.BoolPtrInput
	// If true, running containers in non-compliant pods is prevented.
	BlockNonCompliantWorkloads pulumi.BoolPtrInput
	// If true, prevent containers from running with privileged container capability.
	BlockPrivilegedContainers pulumi.BoolPtrInput
	// If true, prevent containers from running with root user.
	BlockRootUser pulumi.BoolPtrInput
	// If true, running images in the container that are not registered in Aqua is prevented.
	BlockUnregisteredImages pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the IPC namespace.
	BlockUseIpcNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the PID namespace.
	BlockUsePidNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the user namespace.
	BlockUseUserNamespace pulumi.BoolPtrInput
	// If true, prevent containers from running with the privilege to use the UTS namespace.
	BlockUseUtsNamespace pulumi.BoolPtrInput
	// If true, prevents containers from using specific Unix capabilities.
	BlockedCapabilities pulumi.StringArrayInput
	// List of executables that are prevented from running in containers.
	BlockedExecutables pulumi.StringArrayInput
	// List of files that are prevented from being read, modified and executed in the containers.
	BlockedFiles pulumi.StringArrayInput
	// List of blocked inbound ports.
	BlockedInboundPorts pulumi.StringArrayInput
	// List of blocked outbound ports.
	BlockedOutboundPorts pulumi.StringArrayInput
	// Prevent containers from reading, writing, or executing all files in the list of packages.
	BlockedPackages pulumi.StringArrayInput
	// List of volumes that are prevented from being mounted in the containers.
	BlockedVolumes pulumi.StringArrayInput
	// The description of the container runtime policy
	Description pulumi.StringPtrInput
	// If true, executables that are not in the original image is prevented from running.
	EnableDriftPrevention pulumi.BoolPtrInput
	// If true, fork bombs are prevented in the containers.
	EnableForkGuard pulumi.BoolPtrInput
	// If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
	EnableIpReputationSecurity pulumi.BoolPtrInput
	// If true, detects port scanning behavior in the container.
	EnablePortScanDetection pulumi.BoolPtrInput
	// Indicates if the runtime policy is enabled or not.
	Enabled pulumi.BoolPtrInput
	// Indicates that policy should effect container execution (not just for audit).
	Enforce pulumi.BoolPtrInput
	// Indicates the number of days after which the runtime policy will be changed to enforce mode.
	EnforceAfterDays pulumi.IntPtrInput
	// List of files and directories to be excluded from the read-only list.
	ExceptionalReadonlyFilesAndDirectories pulumi.StringArrayInput
	// Process limit for the fork guard.
	ForkGuardProcessLimit pulumi.IntPtrInput
	// If true, prevents the container from obtaining new privileges at runtime. (only enabled in enforce mode)
	LimitNewPrivileges pulumi.BoolPtrInput
	// Name of the container runtime policy
	Name pulumi.StringPtrInput
	// List of files and directories to be restricted as read-only
	ReadonlyFilesAndDirectories pulumi.StringArrayInput
	// Logical expression of how to compute the dependency of the scope variables.
	ScopeExpression pulumi.StringPtrInput
	// List of scope attributes.
	ScopeVariables ContainerRuntimePolicyScopeVariableArrayInput
}

func (ContainerRuntimePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRuntimePolicyArgs)(nil)).Elem()
}

type ContainerRuntimePolicyInput interface {
	pulumi.Input

	ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput
	ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput
}

func (*ContainerRuntimePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRuntimePolicy)(nil)).Elem()
}

func (i *ContainerRuntimePolicy) ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput {
	return i.ToContainerRuntimePolicyOutputWithContext(context.Background())
}

func (i *ContainerRuntimePolicy) ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyOutput)
}

// ContainerRuntimePolicyArrayInput is an input type that accepts ContainerRuntimePolicyArray and ContainerRuntimePolicyArrayOutput values.
// You can construct a concrete instance of `ContainerRuntimePolicyArrayInput` via:
//
//          ContainerRuntimePolicyArray{ ContainerRuntimePolicyArgs{...} }
type ContainerRuntimePolicyArrayInput interface {
	pulumi.Input

	ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput
	ToContainerRuntimePolicyArrayOutputWithContext(context.Context) ContainerRuntimePolicyArrayOutput
}

type ContainerRuntimePolicyArray []ContainerRuntimePolicyInput

func (ContainerRuntimePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRuntimePolicy)(nil)).Elem()
}

func (i ContainerRuntimePolicyArray) ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput {
	return i.ToContainerRuntimePolicyArrayOutputWithContext(context.Background())
}

func (i ContainerRuntimePolicyArray) ToContainerRuntimePolicyArrayOutputWithContext(ctx context.Context) ContainerRuntimePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyArrayOutput)
}

// ContainerRuntimePolicyMapInput is an input type that accepts ContainerRuntimePolicyMap and ContainerRuntimePolicyMapOutput values.
// You can construct a concrete instance of `ContainerRuntimePolicyMapInput` via:
//
//          ContainerRuntimePolicyMap{ "key": ContainerRuntimePolicyArgs{...} }
type ContainerRuntimePolicyMapInput interface {
	pulumi.Input

	ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput
	ToContainerRuntimePolicyMapOutputWithContext(context.Context) ContainerRuntimePolicyMapOutput
}

type ContainerRuntimePolicyMap map[string]ContainerRuntimePolicyInput

func (ContainerRuntimePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRuntimePolicy)(nil)).Elem()
}

func (i ContainerRuntimePolicyMap) ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput {
	return i.ToContainerRuntimePolicyMapOutputWithContext(context.Background())
}

func (i ContainerRuntimePolicyMap) ToContainerRuntimePolicyMapOutputWithContext(ctx context.Context) ContainerRuntimePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRuntimePolicyMapOutput)
}

type ContainerRuntimePolicyOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyOutput) ToContainerRuntimePolicyOutput() ContainerRuntimePolicyOutput {
	return o
}

func (o ContainerRuntimePolicyOutput) ToContainerRuntimePolicyOutputWithContext(ctx context.Context) ContainerRuntimePolicyOutput {
	return o
}

type ContainerRuntimePolicyArrayOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyArrayOutput) ToContainerRuntimePolicyArrayOutput() ContainerRuntimePolicyArrayOutput {
	return o
}

func (o ContainerRuntimePolicyArrayOutput) ToContainerRuntimePolicyArrayOutputWithContext(ctx context.Context) ContainerRuntimePolicyArrayOutput {
	return o
}

func (o ContainerRuntimePolicyArrayOutput) Index(i pulumi.IntInput) ContainerRuntimePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerRuntimePolicy {
		return vs[0].([]*ContainerRuntimePolicy)[vs[1].(int)]
	}).(ContainerRuntimePolicyOutput)
}

type ContainerRuntimePolicyMapOutput struct{ *pulumi.OutputState }

func (ContainerRuntimePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRuntimePolicy)(nil)).Elem()
}

func (o ContainerRuntimePolicyMapOutput) ToContainerRuntimePolicyMapOutput() ContainerRuntimePolicyMapOutput {
	return o
}

func (o ContainerRuntimePolicyMapOutput) ToContainerRuntimePolicyMapOutputWithContext(ctx context.Context) ContainerRuntimePolicyMapOutput {
	return o
}

func (o ContainerRuntimePolicyMapOutput) MapIndex(k pulumi.StringInput) ContainerRuntimePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerRuntimePolicy {
		return vs[0].(map[string]*ContainerRuntimePolicy)[vs[1].(string)]
	}).(ContainerRuntimePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyInput)(nil)).Elem(), &ContainerRuntimePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyArrayInput)(nil)).Elem(), ContainerRuntimePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRuntimePolicyMapInput)(nil)).Elem(), ContainerRuntimePolicyMap{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyOutput{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyArrayOutput{})
	pulumi.RegisterOutputType(ContainerRuntimePolicyMapOutput{})
}
