// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "aquasec:index/applicationScope:ApplicationScope":
		r = &ApplicationScope{}
	case "aquasec:index/aquasecHostRuntimePolicy:AquasecHostRuntimePolicy":
		r = &AquasecHostRuntimePolicy{}
	case "aquasec:index/containerRuntimePolicy:ContainerRuntimePolicy":
		r = &ContainerRuntimePolicy{}
	case "aquasec:index/enforcerGroups:EnforcerGroups":
		r = &EnforcerGroups{}
	case "aquasec:index/firewallPolicy:FirewallPolicy":
		r = &FirewallPolicy{}
	case "aquasec:index/functionAssurancePolicy:FunctionAssurancePolicy":
		r = &FunctionAssurancePolicy{}
	case "aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy":
		r = &FunctionRuntimePolicy{}
	case "aquasec:index/group:Group":
		r = &Group{}
	case "aquasec:index/hostAssurancePolicy:HostAssurancePolicy":
		r = &HostAssurancePolicy{}
	case "aquasec:index/image:Image":
		r = &Image{}
	case "aquasec:index/imageAssurancePolicy:ImageAssurancePolicy":
		r = &ImageAssurancePolicy{}
	case "aquasec:index/integrationRegistry:IntegrationRegistry":
		r = &IntegrationRegistry{}
	case "aquasec:index/notificationSlack:NotificationSlack":
		r = &NotificationSlack{}
	case "aquasec:index/permissionsSets:PermissionsSets":
		r = &PermissionsSets{}
	case "aquasec:index/role:Role":
		r = &Role{}
	case "aquasec:index/service:Service":
		r = &Service{}
	case "aquasec:index/user:User":
		r = &User{}
	case "aquasec:index/userSaas:UserSaas":
		r = &UserSaas{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:aquasec" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Printf("failed to determine package version. defaulting to v1: %v\n", err)
	}
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/applicationScope",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/aquasecHostRuntimePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/containerRuntimePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/enforcerGroups",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/firewallPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/functionAssurancePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/functionRuntimePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/hostAssurancePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/image",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/imageAssurancePolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/integrationRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/notificationSlack",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/permissionsSets",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/role",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/service",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aquasec",
		"index/userSaas",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"aquasec",
		&pkg{version},
	)
}
