// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aquasec

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the aquasec package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.
	AquaUrl pulumi.StringPtrOutput `pulumi:"aquaUrl"`
	// This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced
	// from the `AQUA_CA_CERT_PATH` environment variable.
	CaCertificatePath pulumi.StringPtrOutput `pulumi:"caCertificatePath"`
	// This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can
	// alternatively be sourced from the `AQUA_CONFIG` environment variable.
	ConfigPath pulumi.StringPtrOutput `pulumi:"configPath"`
	// This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`
	// environment variable.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`
	// environment variable.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if isZero(args.AquaUrl) {
		args.AquaUrl = pulumi.StringPtr(getEnvOrDefault("", nil, "AQUA_URL").(string))
	}
	if isZero(args.Password) {
		args.Password = pulumi.StringPtr(getEnvOrDefault("", nil, "AUQA_PASSWORD").(string))
	}
	if isZero(args.Username) {
		args.Username = pulumi.StringPtr(getEnvOrDefault("", nil, "AQUA_USERNAME").(string))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:aquasec", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.
	AquaUrl *string `pulumi:"aquaUrl"`
	// This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced
	// from the `AQUA_CA_CERT_PATH` environment variable.
	CaCertificatePath *string `pulumi:"caCertificatePath"`
	// This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can
	// alternatively be sourced from the `AQUA_CONFIG` environment variable.
	ConfigPath *string `pulumi:"configPath"`
	// This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`
	// environment variable.
	Password *string `pulumi:"password"`
	// This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`
	// environment variable.
	Username *string `pulumi:"username"`
	// If true, server tls certificates will be verified by the client before making a connection. Defaults to true. Can
	// alternatively be sourced from the `AQUA_TLS_VERIFY` environment variable.
	VerifyTls *bool `pulumi:"verifyTls"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.
	AquaUrl pulumi.StringPtrInput
	// This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced
	// from the `AQUA_CA_CERT_PATH` environment variable.
	CaCertificatePath pulumi.StringPtrInput
	// This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can
	// alternatively be sourced from the `AQUA_CONFIG` environment variable.
	ConfigPath pulumi.StringPtrInput
	// This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`
	// environment variable.
	Password pulumi.StringPtrInput
	// This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`
	// environment variable.
	Username pulumi.StringPtrInput
	// If true, server tls certificates will be verified by the client before making a connection. Defaults to true. Can
	// alternatively be sourced from the `AQUA_TLS_VERIFY` environment variable.
	VerifyTls pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
