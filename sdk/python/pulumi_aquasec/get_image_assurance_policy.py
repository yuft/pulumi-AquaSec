# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetImageAssurancePolicyResult',
    'AwaitableGetImageAssurancePolicyResult',
    'get_image_assurance_policy',
    'get_image_assurance_policy_output',
]

@pulumi.output_type
class GetImageAssurancePolicyResult:
    """
    A collection of values returned by getImageAssurancePolicy.
    """
    def __init__(__self__, allowed_images=None, application_scopes=None, assurance_type=None, audit_on_failure=None, author=None, auto_scan_configured=None, auto_scan_enabled=None, auto_scan_times=None, blacklist_permissions=None, blacklist_permissions_enabled=None, blacklisted_licenses=None, blacklisted_licenses_enabled=None, block_failed=None, control_exclude_no_fix=None, custom_checks=None, custom_checks_enabled=None, custom_severity_enabled=None, cves_black_list_enabled=None, cves_black_lists=None, cves_white_list_enabled=None, cves_white_lists=None, cvss_severity=None, cvss_severity_enabled=None, cvss_severity_exclude_no_fix=None, description=None, disallow_malware=None, docker_cis_enabled=None, domain=None, domain_name=None, dta_enabled=None, dta_severity=None, enabled=None, enforce=None, enforce_after_days=None, enforce_excessive_permissions=None, exceptional_monitored_malware_paths=None, fail_cicd=None, forbidden_labels=None, forbidden_labels_enabled=None, force_microenforcer=None, function_integrity_enabled=None, id=None, ignore_recently_published_vln=None, ignore_recently_published_vln_period=None, ignore_risk_resources_enabled=None, ignored_risk_resources=None, images=None, kube_cis_enabled=None, labels=None, malware_action=None, maximum_score=None, maximum_score_enabled=None, maximum_score_exclude_no_fix=None, monitored_malware_paths=None, name=None, only_none_root_users=None, packages_black_list_enabled=None, packages_black_lists=None, packages_white_list_enabled=None, packages_white_lists=None, partial_results_image_fail=None, read_only=None, registries=None, registry=None, required_labels=None, required_labels_enabled=None, scan_nfs_mounts=None, scan_sensitive_data=None, scap_enabled=None, scap_files=None, scopes=None, trusted_base_images=None, trusted_base_images_enabled=None, whitelisted_licenses=None, whitelisted_licenses_enabled=None):
        if allowed_images and not isinstance(allowed_images, list):
            raise TypeError("Expected argument 'allowed_images' to be a list")
        pulumi.set(__self__, "allowed_images", allowed_images)
        if application_scopes and not isinstance(application_scopes, list):
            raise TypeError("Expected argument 'application_scopes' to be a list")
        pulumi.set(__self__, "application_scopes", application_scopes)
        if assurance_type and not isinstance(assurance_type, str):
            raise TypeError("Expected argument 'assurance_type' to be a str")
        pulumi.set(__self__, "assurance_type", assurance_type)
        if audit_on_failure and not isinstance(audit_on_failure, bool):
            raise TypeError("Expected argument 'audit_on_failure' to be a bool")
        pulumi.set(__self__, "audit_on_failure", audit_on_failure)
        if author and not isinstance(author, str):
            raise TypeError("Expected argument 'author' to be a str")
        pulumi.set(__self__, "author", author)
        if auto_scan_configured and not isinstance(auto_scan_configured, bool):
            raise TypeError("Expected argument 'auto_scan_configured' to be a bool")
        pulumi.set(__self__, "auto_scan_configured", auto_scan_configured)
        if auto_scan_enabled and not isinstance(auto_scan_enabled, bool):
            raise TypeError("Expected argument 'auto_scan_enabled' to be a bool")
        pulumi.set(__self__, "auto_scan_enabled", auto_scan_enabled)
        if auto_scan_times and not isinstance(auto_scan_times, list):
            raise TypeError("Expected argument 'auto_scan_times' to be a list")
        pulumi.set(__self__, "auto_scan_times", auto_scan_times)
        if blacklist_permissions and not isinstance(blacklist_permissions, list):
            raise TypeError("Expected argument 'blacklist_permissions' to be a list")
        pulumi.set(__self__, "blacklist_permissions", blacklist_permissions)
        if blacklist_permissions_enabled and not isinstance(blacklist_permissions_enabled, bool):
            raise TypeError("Expected argument 'blacklist_permissions_enabled' to be a bool")
        pulumi.set(__self__, "blacklist_permissions_enabled", blacklist_permissions_enabled)
        if blacklisted_licenses and not isinstance(blacklisted_licenses, list):
            raise TypeError("Expected argument 'blacklisted_licenses' to be a list")
        pulumi.set(__self__, "blacklisted_licenses", blacklisted_licenses)
        if blacklisted_licenses_enabled and not isinstance(blacklisted_licenses_enabled, bool):
            raise TypeError("Expected argument 'blacklisted_licenses_enabled' to be a bool")
        pulumi.set(__self__, "blacklisted_licenses_enabled", blacklisted_licenses_enabled)
        if block_failed and not isinstance(block_failed, bool):
            raise TypeError("Expected argument 'block_failed' to be a bool")
        pulumi.set(__self__, "block_failed", block_failed)
        if control_exclude_no_fix and not isinstance(control_exclude_no_fix, bool):
            raise TypeError("Expected argument 'control_exclude_no_fix' to be a bool")
        pulumi.set(__self__, "control_exclude_no_fix", control_exclude_no_fix)
        if custom_checks and not isinstance(custom_checks, list):
            raise TypeError("Expected argument 'custom_checks' to be a list")
        pulumi.set(__self__, "custom_checks", custom_checks)
        if custom_checks_enabled and not isinstance(custom_checks_enabled, bool):
            raise TypeError("Expected argument 'custom_checks_enabled' to be a bool")
        pulumi.set(__self__, "custom_checks_enabled", custom_checks_enabled)
        if custom_severity_enabled and not isinstance(custom_severity_enabled, bool):
            raise TypeError("Expected argument 'custom_severity_enabled' to be a bool")
        pulumi.set(__self__, "custom_severity_enabled", custom_severity_enabled)
        if cves_black_list_enabled and not isinstance(cves_black_list_enabled, bool):
            raise TypeError("Expected argument 'cves_black_list_enabled' to be a bool")
        pulumi.set(__self__, "cves_black_list_enabled", cves_black_list_enabled)
        if cves_black_lists and not isinstance(cves_black_lists, list):
            raise TypeError("Expected argument 'cves_black_lists' to be a list")
        pulumi.set(__self__, "cves_black_lists", cves_black_lists)
        if cves_white_list_enabled and not isinstance(cves_white_list_enabled, bool):
            raise TypeError("Expected argument 'cves_white_list_enabled' to be a bool")
        pulumi.set(__self__, "cves_white_list_enabled", cves_white_list_enabled)
        if cves_white_lists and not isinstance(cves_white_lists, list):
            raise TypeError("Expected argument 'cves_white_lists' to be a list")
        pulumi.set(__self__, "cves_white_lists", cves_white_lists)
        if cvss_severity and not isinstance(cvss_severity, str):
            raise TypeError("Expected argument 'cvss_severity' to be a str")
        pulumi.set(__self__, "cvss_severity", cvss_severity)
        if cvss_severity_enabled and not isinstance(cvss_severity_enabled, bool):
            raise TypeError("Expected argument 'cvss_severity_enabled' to be a bool")
        pulumi.set(__self__, "cvss_severity_enabled", cvss_severity_enabled)
        if cvss_severity_exclude_no_fix and not isinstance(cvss_severity_exclude_no_fix, bool):
            raise TypeError("Expected argument 'cvss_severity_exclude_no_fix' to be a bool")
        pulumi.set(__self__, "cvss_severity_exclude_no_fix", cvss_severity_exclude_no_fix)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disallow_malware and not isinstance(disallow_malware, bool):
            raise TypeError("Expected argument 'disallow_malware' to be a bool")
        pulumi.set(__self__, "disallow_malware", disallow_malware)
        if docker_cis_enabled and not isinstance(docker_cis_enabled, bool):
            raise TypeError("Expected argument 'docker_cis_enabled' to be a bool")
        pulumi.set(__self__, "docker_cis_enabled", docker_cis_enabled)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if domain_name and not isinstance(domain_name, str):
            raise TypeError("Expected argument 'domain_name' to be a str")
        pulumi.set(__self__, "domain_name", domain_name)
        if dta_enabled and not isinstance(dta_enabled, bool):
            raise TypeError("Expected argument 'dta_enabled' to be a bool")
        pulumi.set(__self__, "dta_enabled", dta_enabled)
        if dta_severity and not isinstance(dta_severity, str):
            raise TypeError("Expected argument 'dta_severity' to be a str")
        pulumi.set(__self__, "dta_severity", dta_severity)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if enforce and not isinstance(enforce, bool):
            raise TypeError("Expected argument 'enforce' to be a bool")
        pulumi.set(__self__, "enforce", enforce)
        if enforce_after_days and not isinstance(enforce_after_days, int):
            raise TypeError("Expected argument 'enforce_after_days' to be a int")
        pulumi.set(__self__, "enforce_after_days", enforce_after_days)
        if enforce_excessive_permissions and not isinstance(enforce_excessive_permissions, bool):
            raise TypeError("Expected argument 'enforce_excessive_permissions' to be a bool")
        pulumi.set(__self__, "enforce_excessive_permissions", enforce_excessive_permissions)
        if exceptional_monitored_malware_paths and not isinstance(exceptional_monitored_malware_paths, list):
            raise TypeError("Expected argument 'exceptional_monitored_malware_paths' to be a list")
        pulumi.set(__self__, "exceptional_monitored_malware_paths", exceptional_monitored_malware_paths)
        if fail_cicd and not isinstance(fail_cicd, bool):
            raise TypeError("Expected argument 'fail_cicd' to be a bool")
        pulumi.set(__self__, "fail_cicd", fail_cicd)
        if forbidden_labels and not isinstance(forbidden_labels, list):
            raise TypeError("Expected argument 'forbidden_labels' to be a list")
        pulumi.set(__self__, "forbidden_labels", forbidden_labels)
        if forbidden_labels_enabled and not isinstance(forbidden_labels_enabled, bool):
            raise TypeError("Expected argument 'forbidden_labels_enabled' to be a bool")
        pulumi.set(__self__, "forbidden_labels_enabled", forbidden_labels_enabled)
        if force_microenforcer and not isinstance(force_microenforcer, bool):
            raise TypeError("Expected argument 'force_microenforcer' to be a bool")
        pulumi.set(__self__, "force_microenforcer", force_microenforcer)
        if function_integrity_enabled and not isinstance(function_integrity_enabled, bool):
            raise TypeError("Expected argument 'function_integrity_enabled' to be a bool")
        pulumi.set(__self__, "function_integrity_enabled", function_integrity_enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ignore_recently_published_vln and not isinstance(ignore_recently_published_vln, bool):
            raise TypeError("Expected argument 'ignore_recently_published_vln' to be a bool")
        pulumi.set(__self__, "ignore_recently_published_vln", ignore_recently_published_vln)
        if ignore_recently_published_vln_period and not isinstance(ignore_recently_published_vln_period, int):
            raise TypeError("Expected argument 'ignore_recently_published_vln_period' to be a int")
        pulumi.set(__self__, "ignore_recently_published_vln_period", ignore_recently_published_vln_period)
        if ignore_risk_resources_enabled and not isinstance(ignore_risk_resources_enabled, bool):
            raise TypeError("Expected argument 'ignore_risk_resources_enabled' to be a bool")
        pulumi.set(__self__, "ignore_risk_resources_enabled", ignore_risk_resources_enabled)
        if ignored_risk_resources and not isinstance(ignored_risk_resources, list):
            raise TypeError("Expected argument 'ignored_risk_resources' to be a list")
        pulumi.set(__self__, "ignored_risk_resources", ignored_risk_resources)
        if images and not isinstance(images, list):
            raise TypeError("Expected argument 'images' to be a list")
        pulumi.set(__self__, "images", images)
        if kube_cis_enabled and not isinstance(kube_cis_enabled, bool):
            raise TypeError("Expected argument 'kube_cis_enabled' to be a bool")
        pulumi.set(__self__, "kube_cis_enabled", kube_cis_enabled)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if malware_action and not isinstance(malware_action, str):
            raise TypeError("Expected argument 'malware_action' to be a str")
        pulumi.set(__self__, "malware_action", malware_action)
        if maximum_score and not isinstance(maximum_score, float):
            raise TypeError("Expected argument 'maximum_score' to be a float")
        pulumi.set(__self__, "maximum_score", maximum_score)
        if maximum_score_enabled and not isinstance(maximum_score_enabled, bool):
            raise TypeError("Expected argument 'maximum_score_enabled' to be a bool")
        pulumi.set(__self__, "maximum_score_enabled", maximum_score_enabled)
        if maximum_score_exclude_no_fix and not isinstance(maximum_score_exclude_no_fix, bool):
            raise TypeError("Expected argument 'maximum_score_exclude_no_fix' to be a bool")
        pulumi.set(__self__, "maximum_score_exclude_no_fix", maximum_score_exclude_no_fix)
        if monitored_malware_paths and not isinstance(monitored_malware_paths, list):
            raise TypeError("Expected argument 'monitored_malware_paths' to be a list")
        pulumi.set(__self__, "monitored_malware_paths", monitored_malware_paths)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if only_none_root_users and not isinstance(only_none_root_users, bool):
            raise TypeError("Expected argument 'only_none_root_users' to be a bool")
        pulumi.set(__self__, "only_none_root_users", only_none_root_users)
        if packages_black_list_enabled and not isinstance(packages_black_list_enabled, bool):
            raise TypeError("Expected argument 'packages_black_list_enabled' to be a bool")
        pulumi.set(__self__, "packages_black_list_enabled", packages_black_list_enabled)
        if packages_black_lists and not isinstance(packages_black_lists, list):
            raise TypeError("Expected argument 'packages_black_lists' to be a list")
        pulumi.set(__self__, "packages_black_lists", packages_black_lists)
        if packages_white_list_enabled and not isinstance(packages_white_list_enabled, bool):
            raise TypeError("Expected argument 'packages_white_list_enabled' to be a bool")
        pulumi.set(__self__, "packages_white_list_enabled", packages_white_list_enabled)
        if packages_white_lists and not isinstance(packages_white_lists, list):
            raise TypeError("Expected argument 'packages_white_lists' to be a list")
        pulumi.set(__self__, "packages_white_lists", packages_white_lists)
        if partial_results_image_fail and not isinstance(partial_results_image_fail, bool):
            raise TypeError("Expected argument 'partial_results_image_fail' to be a bool")
        pulumi.set(__self__, "partial_results_image_fail", partial_results_image_fail)
        if read_only and not isinstance(read_only, bool):
            raise TypeError("Expected argument 'read_only' to be a bool")
        pulumi.set(__self__, "read_only", read_only)
        if registries and not isinstance(registries, list):
            raise TypeError("Expected argument 'registries' to be a list")
        pulumi.set(__self__, "registries", registries)
        if registry and not isinstance(registry, str):
            raise TypeError("Expected argument 'registry' to be a str")
        pulumi.set(__self__, "registry", registry)
        if required_labels and not isinstance(required_labels, list):
            raise TypeError("Expected argument 'required_labels' to be a list")
        pulumi.set(__self__, "required_labels", required_labels)
        if required_labels_enabled and not isinstance(required_labels_enabled, bool):
            raise TypeError("Expected argument 'required_labels_enabled' to be a bool")
        pulumi.set(__self__, "required_labels_enabled", required_labels_enabled)
        if scan_nfs_mounts and not isinstance(scan_nfs_mounts, bool):
            raise TypeError("Expected argument 'scan_nfs_mounts' to be a bool")
        pulumi.set(__self__, "scan_nfs_mounts", scan_nfs_mounts)
        if scan_sensitive_data and not isinstance(scan_sensitive_data, bool):
            raise TypeError("Expected argument 'scan_sensitive_data' to be a bool")
        pulumi.set(__self__, "scan_sensitive_data", scan_sensitive_data)
        if scap_enabled and not isinstance(scap_enabled, bool):
            raise TypeError("Expected argument 'scap_enabled' to be a bool")
        pulumi.set(__self__, "scap_enabled", scap_enabled)
        if scap_files and not isinstance(scap_files, list):
            raise TypeError("Expected argument 'scap_files' to be a list")
        pulumi.set(__self__, "scap_files", scap_files)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if trusted_base_images and not isinstance(trusted_base_images, list):
            raise TypeError("Expected argument 'trusted_base_images' to be a list")
        pulumi.set(__self__, "trusted_base_images", trusted_base_images)
        if trusted_base_images_enabled and not isinstance(trusted_base_images_enabled, bool):
            raise TypeError("Expected argument 'trusted_base_images_enabled' to be a bool")
        pulumi.set(__self__, "trusted_base_images_enabled", trusted_base_images_enabled)
        if whitelisted_licenses and not isinstance(whitelisted_licenses, list):
            raise TypeError("Expected argument 'whitelisted_licenses' to be a list")
        pulumi.set(__self__, "whitelisted_licenses", whitelisted_licenses)
        if whitelisted_licenses_enabled and not isinstance(whitelisted_licenses_enabled, bool):
            raise TypeError("Expected argument 'whitelisted_licenses_enabled' to be a bool")
        pulumi.set(__self__, "whitelisted_licenses_enabled", whitelisted_licenses_enabled)

    @property
    @pulumi.getter(name="allowedImages")
    def allowed_images(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_images")

    @property
    @pulumi.getter(name="applicationScopes")
    def application_scopes(self) -> Sequence[str]:
        return pulumi.get(self, "application_scopes")

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> str:
        return pulumi.get(self, "assurance_type")

    @property
    @pulumi.getter(name="auditOnFailure")
    def audit_on_failure(self) -> bool:
        return pulumi.get(self, "audit_on_failure")

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter(name="autoScanConfigured")
    def auto_scan_configured(self) -> bool:
        return pulumi.get(self, "auto_scan_configured")

    @property
    @pulumi.getter(name="autoScanEnabled")
    def auto_scan_enabled(self) -> bool:
        return pulumi.get(self, "auto_scan_enabled")

    @property
    @pulumi.getter(name="autoScanTimes")
    def auto_scan_times(self) -> Sequence['outputs.GetImageAssurancePolicyAutoScanTimeResult']:
        return pulumi.get(self, "auto_scan_times")

    @property
    @pulumi.getter(name="blacklistPermissions")
    def blacklist_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "blacklist_permissions")

    @property
    @pulumi.getter(name="blacklistPermissionsEnabled")
    def blacklist_permissions_enabled(self) -> bool:
        return pulumi.get(self, "blacklist_permissions_enabled")

    @property
    @pulumi.getter(name="blacklistedLicenses")
    def blacklisted_licenses(self) -> Sequence[str]:
        return pulumi.get(self, "blacklisted_licenses")

    @property
    @pulumi.getter(name="blacklistedLicensesEnabled")
    def blacklisted_licenses_enabled(self) -> bool:
        return pulumi.get(self, "blacklisted_licenses_enabled")

    @property
    @pulumi.getter(name="blockFailed")
    def block_failed(self) -> bool:
        return pulumi.get(self, "block_failed")

    @property
    @pulumi.getter(name="controlExcludeNoFix")
    def control_exclude_no_fix(self) -> bool:
        return pulumi.get(self, "control_exclude_no_fix")

    @property
    @pulumi.getter(name="customChecks")
    def custom_checks(self) -> Sequence['outputs.GetImageAssurancePolicyCustomCheckResult']:
        return pulumi.get(self, "custom_checks")

    @property
    @pulumi.getter(name="customChecksEnabled")
    def custom_checks_enabled(self) -> bool:
        return pulumi.get(self, "custom_checks_enabled")

    @property
    @pulumi.getter(name="customSeverityEnabled")
    def custom_severity_enabled(self) -> bool:
        return pulumi.get(self, "custom_severity_enabled")

    @property
    @pulumi.getter(name="cvesBlackListEnabled")
    def cves_black_list_enabled(self) -> bool:
        return pulumi.get(self, "cves_black_list_enabled")

    @property
    @pulumi.getter(name="cvesBlackLists")
    def cves_black_lists(self) -> Sequence[str]:
        return pulumi.get(self, "cves_black_lists")

    @property
    @pulumi.getter(name="cvesWhiteListEnabled")
    def cves_white_list_enabled(self) -> bool:
        return pulumi.get(self, "cves_white_list_enabled")

    @property
    @pulumi.getter(name="cvesWhiteLists")
    def cves_white_lists(self) -> Sequence[str]:
        return pulumi.get(self, "cves_white_lists")

    @property
    @pulumi.getter(name="cvssSeverity")
    def cvss_severity(self) -> str:
        return pulumi.get(self, "cvss_severity")

    @property
    @pulumi.getter(name="cvssSeverityEnabled")
    def cvss_severity_enabled(self) -> bool:
        return pulumi.get(self, "cvss_severity_enabled")

    @property
    @pulumi.getter(name="cvssSeverityExcludeNoFix")
    def cvss_severity_exclude_no_fix(self) -> bool:
        return pulumi.get(self, "cvss_severity_exclude_no_fix")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disallowMalware")
    def disallow_malware(self) -> bool:
        return pulumi.get(self, "disallow_malware")

    @property
    @pulumi.getter(name="dockerCisEnabled")
    def docker_cis_enabled(self) -> bool:
        return pulumi.get(self, "docker_cis_enabled")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="dtaEnabled")
    def dta_enabled(self) -> bool:
        return pulumi.get(self, "dta_enabled")

    @property
    @pulumi.getter(name="dtaSeverity")
    def dta_severity(self) -> str:
        return pulumi.get(self, "dta_severity")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def enforce(self) -> bool:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="enforceAfterDays")
    def enforce_after_days(self) -> int:
        return pulumi.get(self, "enforce_after_days")

    @property
    @pulumi.getter(name="enforceExcessivePermissions")
    def enforce_excessive_permissions(self) -> bool:
        return pulumi.get(self, "enforce_excessive_permissions")

    @property
    @pulumi.getter(name="exceptionalMonitoredMalwarePaths")
    def exceptional_monitored_malware_paths(self) -> Sequence[str]:
        return pulumi.get(self, "exceptional_monitored_malware_paths")

    @property
    @pulumi.getter(name="failCicd")
    def fail_cicd(self) -> bool:
        return pulumi.get(self, "fail_cicd")

    @property
    @pulumi.getter(name="forbiddenLabels")
    def forbidden_labels(self) -> Sequence['outputs.GetImageAssurancePolicyForbiddenLabelResult']:
        return pulumi.get(self, "forbidden_labels")

    @property
    @pulumi.getter(name="forbiddenLabelsEnabled")
    def forbidden_labels_enabled(self) -> bool:
        return pulumi.get(self, "forbidden_labels_enabled")

    @property
    @pulumi.getter(name="forceMicroenforcer")
    def force_microenforcer(self) -> bool:
        return pulumi.get(self, "force_microenforcer")

    @property
    @pulumi.getter(name="functionIntegrityEnabled")
    def function_integrity_enabled(self) -> bool:
        return pulumi.get(self, "function_integrity_enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVln")
    def ignore_recently_published_vln(self) -> bool:
        return pulumi.get(self, "ignore_recently_published_vln")

    @property
    @pulumi.getter(name="ignoreRecentlyPublishedVlnPeriod")
    def ignore_recently_published_vln_period(self) -> int:
        return pulumi.get(self, "ignore_recently_published_vln_period")

    @property
    @pulumi.getter(name="ignoreRiskResourcesEnabled")
    def ignore_risk_resources_enabled(self) -> bool:
        return pulumi.get(self, "ignore_risk_resources_enabled")

    @property
    @pulumi.getter(name="ignoredRiskResources")
    def ignored_risk_resources(self) -> Sequence[str]:
        return pulumi.get(self, "ignored_risk_resources")

    @property
    @pulumi.getter
    def images(self) -> Sequence[str]:
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="kubeCisEnabled")
    def kube_cis_enabled(self) -> bool:
        return pulumi.get(self, "kube_cis_enabled")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="malwareAction")
    def malware_action(self) -> str:
        return pulumi.get(self, "malware_action")

    @property
    @pulumi.getter(name="maximumScore")
    def maximum_score(self) -> float:
        return pulumi.get(self, "maximum_score")

    @property
    @pulumi.getter(name="maximumScoreEnabled")
    def maximum_score_enabled(self) -> bool:
        return pulumi.get(self, "maximum_score_enabled")

    @property
    @pulumi.getter(name="maximumScoreExcludeNoFix")
    def maximum_score_exclude_no_fix(self) -> Optional[bool]:
        return pulumi.get(self, "maximum_score_exclude_no_fix")

    @property
    @pulumi.getter(name="monitoredMalwarePaths")
    def monitored_malware_paths(self) -> Sequence[str]:
        return pulumi.get(self, "monitored_malware_paths")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="onlyNoneRootUsers")
    def only_none_root_users(self) -> bool:
        return pulumi.get(self, "only_none_root_users")

    @property
    @pulumi.getter(name="packagesBlackListEnabled")
    def packages_black_list_enabled(self) -> bool:
        return pulumi.get(self, "packages_black_list_enabled")

    @property
    @pulumi.getter(name="packagesBlackLists")
    def packages_black_lists(self) -> Sequence['outputs.GetImageAssurancePolicyPackagesBlackListResult']:
        return pulumi.get(self, "packages_black_lists")

    @property
    @pulumi.getter(name="packagesWhiteListEnabled")
    def packages_white_list_enabled(self) -> bool:
        return pulumi.get(self, "packages_white_list_enabled")

    @property
    @pulumi.getter(name="packagesWhiteLists")
    def packages_white_lists(self) -> Sequence['outputs.GetImageAssurancePolicyPackagesWhiteListResult']:
        return pulumi.get(self, "packages_white_lists")

    @property
    @pulumi.getter(name="partialResultsImageFail")
    def partial_results_image_fail(self) -> bool:
        return pulumi.get(self, "partial_results_image_fail")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def registries(self) -> Sequence[str]:
        return pulumi.get(self, "registries")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter(name="requiredLabels")
    def required_labels(self) -> Sequence['outputs.GetImageAssurancePolicyRequiredLabelResult']:
        return pulumi.get(self, "required_labels")

    @property
    @pulumi.getter(name="requiredLabelsEnabled")
    def required_labels_enabled(self) -> bool:
        return pulumi.get(self, "required_labels_enabled")

    @property
    @pulumi.getter(name="scanNfsMounts")
    def scan_nfs_mounts(self) -> bool:
        return pulumi.get(self, "scan_nfs_mounts")

    @property
    @pulumi.getter(name="scanSensitiveData")
    def scan_sensitive_data(self) -> bool:
        return pulumi.get(self, "scan_sensitive_data")

    @property
    @pulumi.getter(name="scapEnabled")
    def scap_enabled(self) -> bool:
        return pulumi.get(self, "scap_enabled")

    @property
    @pulumi.getter(name="scapFiles")
    def scap_files(self) -> Sequence[str]:
        return pulumi.get(self, "scap_files")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetImageAssurancePolicyScopeResult']:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="trustedBaseImages")
    def trusted_base_images(self) -> Sequence['outputs.GetImageAssurancePolicyTrustedBaseImageResult']:
        return pulumi.get(self, "trusted_base_images")

    @property
    @pulumi.getter(name="trustedBaseImagesEnabled")
    def trusted_base_images_enabled(self) -> bool:
        return pulumi.get(self, "trusted_base_images_enabled")

    @property
    @pulumi.getter(name="whitelistedLicenses")
    def whitelisted_licenses(self) -> Sequence[str]:
        return pulumi.get(self, "whitelisted_licenses")

    @property
    @pulumi.getter(name="whitelistedLicensesEnabled")
    def whitelisted_licenses_enabled(self) -> bool:
        return pulumi.get(self, "whitelisted_licenses_enabled")


class AwaitableGetImageAssurancePolicyResult(GetImageAssurancePolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageAssurancePolicyResult(
            allowed_images=self.allowed_images,
            application_scopes=self.application_scopes,
            assurance_type=self.assurance_type,
            audit_on_failure=self.audit_on_failure,
            author=self.author,
            auto_scan_configured=self.auto_scan_configured,
            auto_scan_enabled=self.auto_scan_enabled,
            auto_scan_times=self.auto_scan_times,
            blacklist_permissions=self.blacklist_permissions,
            blacklist_permissions_enabled=self.blacklist_permissions_enabled,
            blacklisted_licenses=self.blacklisted_licenses,
            blacklisted_licenses_enabled=self.blacklisted_licenses_enabled,
            block_failed=self.block_failed,
            control_exclude_no_fix=self.control_exclude_no_fix,
            custom_checks=self.custom_checks,
            custom_checks_enabled=self.custom_checks_enabled,
            custom_severity_enabled=self.custom_severity_enabled,
            cves_black_list_enabled=self.cves_black_list_enabled,
            cves_black_lists=self.cves_black_lists,
            cves_white_list_enabled=self.cves_white_list_enabled,
            cves_white_lists=self.cves_white_lists,
            cvss_severity=self.cvss_severity,
            cvss_severity_enabled=self.cvss_severity_enabled,
            cvss_severity_exclude_no_fix=self.cvss_severity_exclude_no_fix,
            description=self.description,
            disallow_malware=self.disallow_malware,
            docker_cis_enabled=self.docker_cis_enabled,
            domain=self.domain,
            domain_name=self.domain_name,
            dta_enabled=self.dta_enabled,
            dta_severity=self.dta_severity,
            enabled=self.enabled,
            enforce=self.enforce,
            enforce_after_days=self.enforce_after_days,
            enforce_excessive_permissions=self.enforce_excessive_permissions,
            exceptional_monitored_malware_paths=self.exceptional_monitored_malware_paths,
            fail_cicd=self.fail_cicd,
            forbidden_labels=self.forbidden_labels,
            forbidden_labels_enabled=self.forbidden_labels_enabled,
            force_microenforcer=self.force_microenforcer,
            function_integrity_enabled=self.function_integrity_enabled,
            id=self.id,
            ignore_recently_published_vln=self.ignore_recently_published_vln,
            ignore_recently_published_vln_period=self.ignore_recently_published_vln_period,
            ignore_risk_resources_enabled=self.ignore_risk_resources_enabled,
            ignored_risk_resources=self.ignored_risk_resources,
            images=self.images,
            kube_cis_enabled=self.kube_cis_enabled,
            labels=self.labels,
            malware_action=self.malware_action,
            maximum_score=self.maximum_score,
            maximum_score_enabled=self.maximum_score_enabled,
            maximum_score_exclude_no_fix=self.maximum_score_exclude_no_fix,
            monitored_malware_paths=self.monitored_malware_paths,
            name=self.name,
            only_none_root_users=self.only_none_root_users,
            packages_black_list_enabled=self.packages_black_list_enabled,
            packages_black_lists=self.packages_black_lists,
            packages_white_list_enabled=self.packages_white_list_enabled,
            packages_white_lists=self.packages_white_lists,
            partial_results_image_fail=self.partial_results_image_fail,
            read_only=self.read_only,
            registries=self.registries,
            registry=self.registry,
            required_labels=self.required_labels,
            required_labels_enabled=self.required_labels_enabled,
            scan_nfs_mounts=self.scan_nfs_mounts,
            scan_sensitive_data=self.scan_sensitive_data,
            scap_enabled=self.scap_enabled,
            scap_files=self.scap_files,
            scopes=self.scopes,
            trusted_base_images=self.trusted_base_images,
            trusted_base_images_enabled=self.trusted_base_images_enabled,
            whitelisted_licenses=self.whitelisted_licenses,
            whitelisted_licenses_enabled=self.whitelisted_licenses_enabled)


def get_image_assurance_policy(maximum_score_exclude_no_fix: Optional[bool] = None,
                               name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageAssurancePolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['maximumScoreExcludeNoFix'] = maximum_score_exclude_no_fix
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aquasec:index/getImageAssurancePolicy:getImageAssurancePolicy', __args__, opts=opts, typ=GetImageAssurancePolicyResult).value

    return AwaitableGetImageAssurancePolicyResult(
        allowed_images=__ret__.allowed_images,
        application_scopes=__ret__.application_scopes,
        assurance_type=__ret__.assurance_type,
        audit_on_failure=__ret__.audit_on_failure,
        author=__ret__.author,
        auto_scan_configured=__ret__.auto_scan_configured,
        auto_scan_enabled=__ret__.auto_scan_enabled,
        auto_scan_times=__ret__.auto_scan_times,
        blacklist_permissions=__ret__.blacklist_permissions,
        blacklist_permissions_enabled=__ret__.blacklist_permissions_enabled,
        blacklisted_licenses=__ret__.blacklisted_licenses,
        blacklisted_licenses_enabled=__ret__.blacklisted_licenses_enabled,
        block_failed=__ret__.block_failed,
        control_exclude_no_fix=__ret__.control_exclude_no_fix,
        custom_checks=__ret__.custom_checks,
        custom_checks_enabled=__ret__.custom_checks_enabled,
        custom_severity_enabled=__ret__.custom_severity_enabled,
        cves_black_list_enabled=__ret__.cves_black_list_enabled,
        cves_black_lists=__ret__.cves_black_lists,
        cves_white_list_enabled=__ret__.cves_white_list_enabled,
        cves_white_lists=__ret__.cves_white_lists,
        cvss_severity=__ret__.cvss_severity,
        cvss_severity_enabled=__ret__.cvss_severity_enabled,
        cvss_severity_exclude_no_fix=__ret__.cvss_severity_exclude_no_fix,
        description=__ret__.description,
        disallow_malware=__ret__.disallow_malware,
        docker_cis_enabled=__ret__.docker_cis_enabled,
        domain=__ret__.domain,
        domain_name=__ret__.domain_name,
        dta_enabled=__ret__.dta_enabled,
        dta_severity=__ret__.dta_severity,
        enabled=__ret__.enabled,
        enforce=__ret__.enforce,
        enforce_after_days=__ret__.enforce_after_days,
        enforce_excessive_permissions=__ret__.enforce_excessive_permissions,
        exceptional_monitored_malware_paths=__ret__.exceptional_monitored_malware_paths,
        fail_cicd=__ret__.fail_cicd,
        forbidden_labels=__ret__.forbidden_labels,
        forbidden_labels_enabled=__ret__.forbidden_labels_enabled,
        force_microenforcer=__ret__.force_microenforcer,
        function_integrity_enabled=__ret__.function_integrity_enabled,
        id=__ret__.id,
        ignore_recently_published_vln=__ret__.ignore_recently_published_vln,
        ignore_recently_published_vln_period=__ret__.ignore_recently_published_vln_period,
        ignore_risk_resources_enabled=__ret__.ignore_risk_resources_enabled,
        ignored_risk_resources=__ret__.ignored_risk_resources,
        images=__ret__.images,
        kube_cis_enabled=__ret__.kube_cis_enabled,
        labels=__ret__.labels,
        malware_action=__ret__.malware_action,
        maximum_score=__ret__.maximum_score,
        maximum_score_enabled=__ret__.maximum_score_enabled,
        maximum_score_exclude_no_fix=__ret__.maximum_score_exclude_no_fix,
        monitored_malware_paths=__ret__.monitored_malware_paths,
        name=__ret__.name,
        only_none_root_users=__ret__.only_none_root_users,
        packages_black_list_enabled=__ret__.packages_black_list_enabled,
        packages_black_lists=__ret__.packages_black_lists,
        packages_white_list_enabled=__ret__.packages_white_list_enabled,
        packages_white_lists=__ret__.packages_white_lists,
        partial_results_image_fail=__ret__.partial_results_image_fail,
        read_only=__ret__.read_only,
        registries=__ret__.registries,
        registry=__ret__.registry,
        required_labels=__ret__.required_labels,
        required_labels_enabled=__ret__.required_labels_enabled,
        scan_nfs_mounts=__ret__.scan_nfs_mounts,
        scan_sensitive_data=__ret__.scan_sensitive_data,
        scap_enabled=__ret__.scap_enabled,
        scap_files=__ret__.scap_files,
        scopes=__ret__.scopes,
        trusted_base_images=__ret__.trusted_base_images,
        trusted_base_images_enabled=__ret__.trusted_base_images_enabled,
        whitelisted_licenses=__ret__.whitelisted_licenses,
        whitelisted_licenses_enabled=__ret__.whitelisted_licenses_enabled)


@_utilities.lift_output_func(get_image_assurance_policy)
def get_image_assurance_policy_output(maximum_score_exclude_no_fix: Optional[pulumi.Input[Optional[bool]]] = None,
                                      name: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImageAssurancePolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
