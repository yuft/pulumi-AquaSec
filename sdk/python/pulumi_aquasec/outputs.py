# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ApplicationScopeCategory',
    'ApplicationScopeCategoryArtifact',
    'ApplicationScopeCategoryArtifactCf',
    'ApplicationScopeCategoryArtifactCfVariable',
    'ApplicationScopeCategoryArtifactFunction',
    'ApplicationScopeCategoryArtifactFunctionVariable',
    'ApplicationScopeCategoryArtifactImage',
    'ApplicationScopeCategoryArtifactImageVariable',
    'ApplicationScopeCategoryEntityScope',
    'ApplicationScopeCategoryEntityScopeVariable',
    'ApplicationScopeCategoryInfrastructure',
    'ApplicationScopeCategoryInfrastructureKubernete',
    'ApplicationScopeCategoryInfrastructureKuberneteVariable',
    'ApplicationScopeCategoryInfrastructureO',
    'ApplicationScopeCategoryInfrastructureOVariable',
    'ApplicationScopeCategoryWorkload',
    'ApplicationScopeCategoryWorkloadCf',
    'ApplicationScopeCategoryWorkloadCfVariable',
    'ApplicationScopeCategoryWorkloadKubernete',
    'ApplicationScopeCategoryWorkloadKuberneteVariable',
    'ApplicationScopeCategoryWorkloadO',
    'ApplicationScopeCategoryWorkloadOVariable',
    'AquasecHostRuntimePolicyFileIntegrityMonitoring',
    'AquasecHostRuntimePolicyScopeVariable',
    'AquasecHostRuntimePolicyWindowsRegistryMonitoring',
    'AquasecHostRuntimePolicyWindowsRegistryProtection',
    'ContainerRuntimePolicyScopeVariable',
    'EnforcerGroupsCommand',
    'EnforcerGroupsOrchestrator',
    'FirewallPolicyInboundNetwork',
    'FirewallPolicyOutboundNetwork',
    'FunctionAssurancePolicyAutoScanTime',
    'FunctionAssurancePolicyCustomCheck',
    'FunctionAssurancePolicyForbiddenLabel',
    'FunctionAssurancePolicyPackagesBlackList',
    'FunctionAssurancePolicyPackagesWhiteList',
    'FunctionAssurancePolicyRequiredLabel',
    'FunctionAssurancePolicyScope',
    'FunctionAssurancePolicyScopeVariable',
    'FunctionAssurancePolicyTrustedBaseImage',
    'FunctionRuntimePolicyScopeVariable',
    'HostAssurancePolicyAutoScanTime',
    'HostAssurancePolicyCustomCheck',
    'HostAssurancePolicyForbiddenLabel',
    'HostAssurancePolicyPackagesBlackList',
    'HostAssurancePolicyPackagesWhiteList',
    'HostAssurancePolicyRequiredLabel',
    'HostAssurancePolicyScope',
    'HostAssurancePolicyScopeVariable',
    'HostAssurancePolicyTrustedBaseImage',
    'ImageAssuranceChecksPerformed',
    'ImageAssurancePolicyAutoScanTime',
    'ImageAssurancePolicyCustomCheck',
    'ImageAssurancePolicyForbiddenLabel',
    'ImageAssurancePolicyPackagesBlackList',
    'ImageAssurancePolicyPackagesWhiteList',
    'ImageAssurancePolicyRequiredLabel',
    'ImageAssurancePolicyScope',
    'ImageAssurancePolicyScopeVariable',
    'ImageAssurancePolicyTrustedBaseImage',
    'ImageHistory',
    'ImageVulnerability',
    'ServiceScopeVariable',
    'UserSaasGroup',
    'UserSaasLogin',
    'GetApplicationScopeCategoryResult',
    'GetApplicationScopeCategoryArtifactResult',
    'GetApplicationScopeCategoryArtifactCfResult',
    'GetApplicationScopeCategoryArtifactCfVariableResult',
    'GetApplicationScopeCategoryArtifactFunctionResult',
    'GetApplicationScopeCategoryArtifactFunctionVariableResult',
    'GetApplicationScopeCategoryArtifactImageResult',
    'GetApplicationScopeCategoryArtifactImageVariableResult',
    'GetApplicationScopeCategoryEntityScopeResult',
    'GetApplicationScopeCategoryEntityScopeVariableResult',
    'GetApplicationScopeCategoryInfrastructureResult',
    'GetApplicationScopeCategoryInfrastructureKuberneteResult',
    'GetApplicationScopeCategoryInfrastructureKuberneteVariableResult',
    'GetApplicationScopeCategoryInfrastructureOResult',
    'GetApplicationScopeCategoryInfrastructureOVariableResult',
    'GetApplicationScopeCategoryWorkloadResult',
    'GetApplicationScopeCategoryWorkloadCfResult',
    'GetApplicationScopeCategoryWorkloadCfVariableResult',
    'GetApplicationScopeCategoryWorkloadKuberneteResult',
    'GetApplicationScopeCategoryWorkloadKuberneteVariableResult',
    'GetApplicationScopeCategoryWorkloadOResult',
    'GetApplicationScopeCategoryWorkloadOVariableResult',
    'GetContainerRuntimePolicyScopeVariableResult',
    'GetEnforcerGroupsCommandResult',
    'GetEnforcerGroupsOrchestratorResult',
    'GetFirewallPolicyInboundNetworkResult',
    'GetFirewallPolicyOutboundNetworkResult',
    'GetFunctionAssurancePolicyAutoScanTimeResult',
    'GetFunctionAssurancePolicyCustomCheckResult',
    'GetFunctionAssurancePolicyForbiddenLabelResult',
    'GetFunctionAssurancePolicyPackagesBlackListResult',
    'GetFunctionAssurancePolicyPackagesWhiteListResult',
    'GetFunctionAssurancePolicyRequiredLabelResult',
    'GetFunctionAssurancePolicyScopeResult',
    'GetFunctionAssurancePolicyScopeVariableResult',
    'GetFunctionAssurancePolicyTrustedBaseImageResult',
    'GetFunctionRuntimePolicyScopeVariableResult',
    'GetGatewaysGatewayResult',
    'GetGroupsGroupResult',
    'GetHostAssurancePolicyAutoScanTimeResult',
    'GetHostAssurancePolicyCustomCheckResult',
    'GetHostAssurancePolicyForbiddenLabelResult',
    'GetHostAssurancePolicyPackagesBlackListResult',
    'GetHostAssurancePolicyPackagesWhiteListResult',
    'GetHostAssurancePolicyRequiredLabelResult',
    'GetHostAssurancePolicyScopeResult',
    'GetHostAssurancePolicyScopeVariableResult',
    'GetHostAssurancePolicyTrustedBaseImageResult',
    'GetHostRuntimePolicyFileIntegrityMonitoringResult',
    'GetHostRuntimePolicyScopeVariableResult',
    'GetHostRuntimePolicyWindowsRegistryMonitoringResult',
    'GetHostRuntimePolicyWindowsRegistryProtectionResult',
    'GetImageAssuranceChecksPerformedResult',
    'GetImageAssurancePolicyAutoScanTimeResult',
    'GetImageAssurancePolicyCustomCheckResult',
    'GetImageAssurancePolicyForbiddenLabelResult',
    'GetImageAssurancePolicyPackagesBlackListResult',
    'GetImageAssurancePolicyPackagesWhiteListResult',
    'GetImageAssurancePolicyRequiredLabelResult',
    'GetImageAssurancePolicyScopeResult',
    'GetImageAssurancePolicyScopeVariableResult',
    'GetImageAssurancePolicyTrustedBaseImageResult',
    'GetImageHistoryResult',
    'GetImageVulnerabilityResult',
    'GetPermissionsSetsPermissionsSetResult',
    'GetRolesRoleResult',
    'GetServiceScopeVariableResult',
    'GetUsersSaasUserResult',
    'GetUsersSaasUserGroupResult',
    'GetUsersSaasUserLoginResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class ApplicationScopeCategory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityScopes":
            suggest = "entity_scopes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationScopeCategory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationScopeCategory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationScopeCategory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifacts: Optional[Sequence['outputs.ApplicationScopeCategoryArtifact']] = None,
                 entity_scopes: Optional[Sequence['outputs.ApplicationScopeCategoryEntityScope']] = None,
                 infrastructures: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructure']] = None,
                 workloads: Optional[Sequence['outputs.ApplicationScopeCategoryWorkload']] = None):
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifact']]:
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryEntityScope']]:
        return pulumi.get(self, "entity_scopes")

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructure']]:
        return pulumi.get(self, "infrastructures")

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkload']]:
        return pulumi.get(self, "workloads")


@pulumi.output_type
class ApplicationScopeCategoryArtifact(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCf']] = None,
                 functions: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunction']] = None,
                 images: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImage']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCf']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunction']]:
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImage']]:
        return pulumi.get(self, "images")


@pulumi.output_type
class ApplicationScopeCategoryArtifactCf(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCfVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactCfVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryArtifactCfVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryArtifactFunction(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunctionVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactFunctionVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryArtifactFunctionVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryArtifactImage(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImageVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryArtifactImageVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryArtifactImageVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryEntityScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryEntityScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryEntityScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryEntityScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructure(dict):
    def __init__(__self__, *,
                 kubernetes: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKubernete']] = None,
                 os: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureO']] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKubernete']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureO']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureKubernete(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKuberneteVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureKuberneteVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureKuberneteVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureO(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureOVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryInfrastructureOVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryInfrastructureOVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryWorkload(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCf']] = None,
                 kubernetes: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKubernete']] = None,
                 os: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadO']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCf']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKubernete']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadO']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadCf(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCfVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadCfVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadCfVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadKubernete(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKuberneteVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadKuberneteVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadKuberneteVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadO(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadOVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ApplicationScopeCategoryWorkloadOVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ApplicationScopeCategoryWorkloadOVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AquasecHostRuntimePolicyFileIntegrityMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedPaths":
            suggest = "excluded_paths"
        elif key == "excludedProcesses":
            suggest = "excluded_processes"
        elif key == "excludedUsers":
            suggest = "excluded_users"
        elif key == "monitorAttributes":
            suggest = "monitor_attributes"
        elif key == "monitorCreate":
            suggest = "monitor_create"
        elif key == "monitorDelete":
            suggest = "monitor_delete"
        elif key == "monitorModify":
            suggest = "monitor_modify"
        elif key == "monitorRead":
            suggest = "monitor_read"
        elif key == "monitoredPaths":
            suggest = "monitored_paths"
        elif key == "monitoredProcesses":
            suggest = "monitored_processes"
        elif key == "monitoredUsers":
            suggest = "monitored_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AquasecHostRuntimePolicyFileIntegrityMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AquasecHostRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AquasecHostRuntimePolicyFileIntegrityMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excluded_paths: Optional[Sequence[str]] = None,
                 excluded_processes: Optional[Sequence[str]] = None,
                 excluded_users: Optional[Sequence[str]] = None,
                 monitor_attributes: Optional[bool] = None,
                 monitor_create: Optional[bool] = None,
                 monitor_delete: Optional[bool] = None,
                 monitor_modify: Optional[bool] = None,
                 monitor_read: Optional[bool] = None,
                 monitored_paths: Optional[Sequence[str]] = None,
                 monitored_processes: Optional[Sequence[str]] = None,
                 monitored_users: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] excluded_paths: List of paths to be excluded from being monitored.
        :param Sequence[str] excluded_processes: List of processes to be excluded from being monitored.
        :param Sequence[str] excluded_users: List of users to be excluded from being monitored.
        :param bool monitor_attributes: If true, add attributes operations will be monitored.
        :param bool monitor_create: If true, create operations will be monitored.
        :param bool monitor_delete: If true, deletion operations will be monitored.
        :param bool monitor_modify: If true, modification operations will be monitored.
        :param bool monitor_read: If true, read operations will be monitored.
        :param Sequence[str] monitored_paths: List of paths to be monitored.
        :param Sequence[str] monitored_processes: List of processes to be monitored.
        :param Sequence[str] monitored_users: List of users to be monitored.
        """
        if excluded_paths is not None:
            pulumi.set(__self__, "excluded_paths", excluded_paths)
        if excluded_processes is not None:
            pulumi.set(__self__, "excluded_processes", excluded_processes)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if monitor_attributes is not None:
            pulumi.set(__self__, "monitor_attributes", monitor_attributes)
        if monitor_create is not None:
            pulumi.set(__self__, "monitor_create", monitor_create)
        if monitor_delete is not None:
            pulumi.set(__self__, "monitor_delete", monitor_delete)
        if monitor_modify is not None:
            pulumi.set(__self__, "monitor_modify", monitor_modify)
        if monitor_read is not None:
            pulumi.set(__self__, "monitor_read", monitor_read)
        if monitored_paths is not None:
            pulumi.set(__self__, "monitored_paths", monitored_paths)
        if monitored_processes is not None:
            pulumi.set(__self__, "monitored_processes", monitored_processes)
        if monitored_users is not None:
            pulumi.set(__self__, "monitored_users", monitored_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="monitorAttributes")
    def monitor_attributes(self) -> Optional[bool]:
        """
        If true, add attributes operations will be monitored.
        """
        return pulumi.get(self, "monitor_attributes")

    @property
    @pulumi.getter(name="monitorCreate")
    def monitor_create(self) -> Optional[bool]:
        """
        If true, create operations will be monitored.
        """
        return pulumi.get(self, "monitor_create")

    @property
    @pulumi.getter(name="monitorDelete")
    def monitor_delete(self) -> Optional[bool]:
        """
        If true, deletion operations will be monitored.
        """
        return pulumi.get(self, "monitor_delete")

    @property
    @pulumi.getter(name="monitorModify")
    def monitor_modify(self) -> Optional[bool]:
        """
        If true, modification operations will be monitored.
        """
        return pulumi.get(self, "monitor_modify")

    @property
    @pulumi.getter(name="monitorRead")
    def monitor_read(self) -> Optional[bool]:
        """
        If true, read operations will be monitored.
        """
        return pulumi.get(self, "monitor_read")

    @property
    @pulumi.getter(name="monitoredPaths")
    def monitored_paths(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_paths")

    @property
    @pulumi.getter(name="monitoredProcesses")
    def monitored_processes(self) -> Optional[Sequence[str]]:
        """
        List of processes to be monitored.
        """
        return pulumi.get(self, "monitored_processes")

    @property
    @pulumi.getter(name="monitoredUsers")
    def monitored_users(self) -> Optional[Sequence[str]]:
        """
        List of users to be monitored.
        """
        return pulumi.get(self, "monitored_users")


@pulumi.output_type
class AquasecHostRuntimePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AquasecHostRuntimePolicyWindowsRegistryMonitoring(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedPaths":
            suggest = "excluded_paths"
        elif key == "excludedProcesses":
            suggest = "excluded_processes"
        elif key == "excludedUsers":
            suggest = "excluded_users"
        elif key == "monitorAttributes":
            suggest = "monitor_attributes"
        elif key == "monitorCreate":
            suggest = "monitor_create"
        elif key == "monitorDelete":
            suggest = "monitor_delete"
        elif key == "monitorModify":
            suggest = "monitor_modify"
        elif key == "monitorRead":
            suggest = "monitor_read"
        elif key == "monitoredPaths":
            suggest = "monitored_paths"
        elif key == "monitoredProcesses":
            suggest = "monitored_processes"
        elif key == "monitoredUsers":
            suggest = "monitored_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AquasecHostRuntimePolicyWindowsRegistryMonitoring. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AquasecHostRuntimePolicyWindowsRegistryMonitoring.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AquasecHostRuntimePolicyWindowsRegistryMonitoring.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excluded_paths: Optional[Sequence[str]] = None,
                 excluded_processes: Optional[Sequence[str]] = None,
                 excluded_users: Optional[Sequence[str]] = None,
                 monitor_attributes: Optional[bool] = None,
                 monitor_create: Optional[bool] = None,
                 monitor_delete: Optional[bool] = None,
                 monitor_modify: Optional[bool] = None,
                 monitor_read: Optional[bool] = None,
                 monitored_paths: Optional[Sequence[str]] = None,
                 monitored_processes: Optional[Sequence[str]] = None,
                 monitored_users: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] excluded_paths: List of paths to be excluded from being monitored.
        :param Sequence[str] excluded_processes: List of registry processes to be excluded from being monitored.
        :param Sequence[str] excluded_users: List of registry users to be excluded from being monitored.
        :param bool monitor_attributes: If true, add attributes operations will be monitored.
        :param bool monitor_create: If true, create operations will be monitored.
        :param bool monitor_delete: If true, deletion operations will be monitored.
        :param bool monitor_modify: If true, modification operations will be monitored.
        :param bool monitor_read: If true, read operations will be monitored.
        :param Sequence[str] monitored_paths: List of paths to be monitored.
        :param Sequence[str] monitored_processes: List of registry processes to be monitored.
        :param Sequence[str] monitored_users: List of registry users to be monitored.
        """
        if excluded_paths is not None:
            pulumi.set(__self__, "excluded_paths", excluded_paths)
        if excluded_processes is not None:
            pulumi.set(__self__, "excluded_processes", excluded_processes)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if monitor_attributes is not None:
            pulumi.set(__self__, "monitor_attributes", monitor_attributes)
        if monitor_create is not None:
            pulumi.set(__self__, "monitor_create", monitor_create)
        if monitor_delete is not None:
            pulumi.set(__self__, "monitor_delete", monitor_delete)
        if monitor_modify is not None:
            pulumi.set(__self__, "monitor_modify", monitor_modify)
        if monitor_read is not None:
            pulumi.set(__self__, "monitor_read", monitor_read)
        if monitored_paths is not None:
            pulumi.set(__self__, "monitored_paths", monitored_paths)
        if monitored_processes is not None:
            pulumi.set(__self__, "monitored_processes", monitored_processes)
        if monitored_users is not None:
            pulumi.set(__self__, "monitored_users", monitored_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[Sequence[str]]:
        """
        List of paths to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[Sequence[str]]:
        """
        List of registry users to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="monitorAttributes")
    def monitor_attributes(self) -> Optional[bool]:
        """
        If true, add attributes operations will be monitored.
        """
        return pulumi.get(self, "monitor_attributes")

    @property
    @pulumi.getter(name="monitorCreate")
    def monitor_create(self) -> Optional[bool]:
        """
        If true, create operations will be monitored.
        """
        return pulumi.get(self, "monitor_create")

    @property
    @pulumi.getter(name="monitorDelete")
    def monitor_delete(self) -> Optional[bool]:
        """
        If true, deletion operations will be monitored.
        """
        return pulumi.get(self, "monitor_delete")

    @property
    @pulumi.getter(name="monitorModify")
    def monitor_modify(self) -> Optional[bool]:
        """
        If true, modification operations will be monitored.
        """
        return pulumi.get(self, "monitor_modify")

    @property
    @pulumi.getter(name="monitorRead")
    def monitor_read(self) -> Optional[bool]:
        """
        If true, read operations will be monitored.
        """
        return pulumi.get(self, "monitor_read")

    @property
    @pulumi.getter(name="monitoredPaths")
    def monitored_paths(self) -> Optional[Sequence[str]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_paths")

    @property
    @pulumi.getter(name="monitoredProcesses")
    def monitored_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be monitored.
        """
        return pulumi.get(self, "monitored_processes")

    @property
    @pulumi.getter(name="monitoredUsers")
    def monitored_users(self) -> Optional[Sequence[str]]:
        """
        List of registry users to be monitored.
        """
        return pulumi.get(self, "monitored_users")


@pulumi.output_type
class AquasecHostRuntimePolicyWindowsRegistryProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedPaths":
            suggest = "excluded_paths"
        elif key == "excludedProcesses":
            suggest = "excluded_processes"
        elif key == "excludedUsers":
            suggest = "excluded_users"
        elif key == "protectedPaths":
            suggest = "protected_paths"
        elif key == "protectedProcesses":
            suggest = "protected_processes"
        elif key == "protectedUsers":
            suggest = "protected_users"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AquasecHostRuntimePolicyWindowsRegistryProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AquasecHostRuntimePolicyWindowsRegistryProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AquasecHostRuntimePolicyWindowsRegistryProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excluded_paths: Optional[Sequence[str]] = None,
                 excluded_processes: Optional[Sequence[str]] = None,
                 excluded_users: Optional[Sequence[str]] = None,
                 protected_paths: Optional[Sequence[str]] = None,
                 protected_processes: Optional[Sequence[str]] = None,
                 protected_users: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] excluded_paths: List of registry paths to be excluded from being protected.
        :param Sequence[str] excluded_processes: List of registry processes to be excluded from being protected.
        :param Sequence[str] excluded_users: List of registry paths to be users from being protected.
        :param Sequence[str] protected_paths: List of registry paths to be protected.
        :param Sequence[str] protected_processes: List of registry processes to be protected.
        :param Sequence[str] protected_users: List of registry users to be protected.
        """
        if excluded_paths is not None:
            pulumi.set(__self__, "excluded_paths", excluded_paths)
        if excluded_processes is not None:
            pulumi.set(__self__, "excluded_processes", excluded_processes)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if protected_paths is not None:
            pulumi.set(__self__, "protected_paths", protected_paths)
        if protected_processes is not None:
            pulumi.set(__self__, "protected_processes", protected_processes)
        if protected_users is not None:
            pulumi.set(__self__, "protected_users", protected_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be users from being protected.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="protectedPaths")
    def protected_paths(self) -> Optional[Sequence[str]]:
        """
        List of registry paths to be protected.
        """
        return pulumi.get(self, "protected_paths")

    @property
    @pulumi.getter(name="protectedProcesses")
    def protected_processes(self) -> Optional[Sequence[str]]:
        """
        List of registry processes to be protected.
        """
        return pulumi.get(self, "protected_processes")

    @property
    @pulumi.getter(name="protectedUsers")
    def protected_users(self) -> Optional[Sequence[str]]:
        """
        List of registry users to be protected.
        """
        return pulumi.get(self, "protected_users")


@pulumi.output_type
class ContainerRuntimePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EnforcerGroupsCommand(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 kubernetes: Optional[str] = None,
                 swarm: Optional[str] = None,
                 windows: Optional[str] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if swarm is not None:
            pulumi.set(__self__, "swarm", swarm)
        if windows is not None:
            pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[str]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def swarm(self) -> Optional[str]:
        return pulumi.get(self, "swarm")

    @property
    @pulumi.getter
    def windows(self) -> Optional[str]:
        return pulumi.get(self, "windows")


@pulumi.output_type
class EnforcerGroupsOrchestrator(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccount":
            suggest = "service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnforcerGroupsOrchestrator. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnforcerGroupsOrchestrator.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnforcerGroupsOrchestrator.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 master: Optional[bool] = None,
                 namespace: Optional[str] = None,
                 service_account: Optional[str] = None,
                 type: Optional[str] = None):
        if master is not None:
            pulumi.set(__self__, "master", master)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def master(self) -> Optional[bool]:
        return pulumi.get(self, "master")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[str]:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class FirewallPolicyInboundNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyInboundNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyInboundNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyInboundNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource_type: str,
                 resource: Optional[str] = None):
        """
        :param bool allow: Indicates whether the specified resources are allowed to pass in data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource_type: Type of the resource
        :param str resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to pass in data or requests.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class FirewallPolicyOutboundNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portRange":
            suggest = "port_range"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallPolicyOutboundNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallPolicyOutboundNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallPolicyOutboundNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource_type: str,
                 resource: Optional[str] = None):
        """
        :param bool allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource_type: Type of the resource.
        :param str resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class FunctionAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class FunctionAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class FunctionAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class FunctionAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class FunctionAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.FunctionAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.FunctionAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class FunctionAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class FunctionAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class FunctionRuntimePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HostAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class HostAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class HostAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HostAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class HostAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HostAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HostAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HostAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class HostAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HostAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.HostAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.HostAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class HostAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class HostAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class ImageAssuranceChecksPerformed(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assuranceType":
            suggest = "assurance_type"
        elif key == "dtaSkipped":
            suggest = "dta_skipped"
        elif key == "dtaSkippedReason":
            suggest = "dta_skipped_reason"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssuranceChecksPerformed. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssuranceChecksPerformed.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssuranceChecksPerformed.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assurance_type: Optional[str] = None,
                 blocking: Optional[bool] = None,
                 control: Optional[str] = None,
                 dta_skipped: Optional[bool] = None,
                 dta_skipped_reason: Optional[str] = None,
                 failed: Optional[bool] = None,
                 policy_name: Optional[str] = None):
        """
        :param bool dta_skipped: If DTA was skipped.
        :param str dta_skipped_reason: The reason why DTA was skipped.
        """
        if assurance_type is not None:
            pulumi.set(__self__, "assurance_type", assurance_type)
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if dta_skipped is not None:
            pulumi.set(__self__, "dta_skipped", dta_skipped)
        if dta_skipped_reason is not None:
            pulumi.set(__self__, "dta_skipped_reason", dta_skipped_reason)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> Optional[str]:
        return pulumi.get(self, "assurance_type")

    @property
    @pulumi.getter
    def blocking(self) -> Optional[bool]:
        return pulumi.get(self, "blocking")

    @property
    @pulumi.getter
    def control(self) -> Optional[str]:
        return pulumi.get(self, "control")

    @property
    @pulumi.getter(name="dtaSkipped")
    def dta_skipped(self) -> Optional[bool]:
        """
        If DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped")

    @property
    @pulumi.getter(name="dtaSkippedReason")
    def dta_skipped_reason(self) -> Optional[str]:
        """
        The reason why DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped_reason")

    @property
    @pulumi.getter
    def failed(self) -> Optional[bool]:
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class ImageAssurancePolicyAutoScanTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iterationType":
            suggest = "iteration_type"
        elif key == "weekDays":
            suggest = "week_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyAutoScanTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyAutoScanTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyAutoScanTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iteration: Optional[int] = None,
                 iteration_type: Optional[str] = None,
                 time: Optional[str] = None,
                 week_days: Optional[Sequence[str]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[int]:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[str]:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class ImageAssurancePolicyCustomCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastModified":
            suggest = "last_modified"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "scriptId":
            suggest = "script_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyCustomCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyCustomCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyCustomCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 author: Optional[str] = None,
                 description: Optional[str] = None,
                 engine: Optional[str] = None,
                 last_modified: Optional[int] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 script_id: Optional[str] = None,
                 severity: Optional[str] = None,
                 snippet: Optional[str] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[str]:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[int]:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[str]:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> Optional[str]:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class ImageAssurancePolicyForbiddenLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageAssurancePolicyPackagesBlackList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyPackagesBlackList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyPackagesBlackList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class ImageAssurancePolicyPackagesWhiteList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionRange":
            suggest = "version_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageAssurancePolicyPackagesWhiteList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageAssurancePolicyPackagesWhiteList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arch: Optional[str] = None,
                 display: Optional[str] = None,
                 epoch: Optional[str] = None,
                 format: Optional[str] = None,
                 license: Optional[str] = None,
                 name: Optional[str] = None,
                 release: Optional[str] = None,
                 version: Optional[str] = None,
                 version_range: Optional[str] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[str]:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> Optional[str]:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> Optional[str]:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> Optional[str]:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> Optional[str]:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[str]:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class ImageAssurancePolicyRequiredLabel(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageAssurancePolicyScope(dict):
    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 variables: Optional[Sequence['outputs.ImageAssurancePolicyScopeVariable']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.ImageAssurancePolicyScopeVariable']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class ImageAssurancePolicyScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageAssurancePolicyTrustedBaseImage(dict):
    def __init__(__self__, *,
                 imagename: Optional[str] = None,
                 registry: Optional[str] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[str]:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        return pulumi.get(self, "registry")


@pulumi.output_type
class ImageHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdBy":
            suggest = "created_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comment: Optional[str] = None,
                 created: Optional[str] = None,
                 created_by: Optional[str] = None,
                 id: Optional[str] = None,
                 size: Optional[int] = None):
        """
        :param str comment: The image creation comment.
        :param str created: The date and time when the image was registered.
        :param str id: The ID of this resource.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        The image creation comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        """
        The date and time when the image was registered.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")


@pulumi.output_type
class ImageVulnerability(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ackAuthor":
            suggest = "ack_author"
        elif key == "ackComment":
            suggest = "ack_comment"
        elif key == "ackExpirationConfiguredAt":
            suggest = "ack_expiration_configured_at"
        elif key == "ackExpirationConfiguredBy":
            suggest = "ack_expiration_configured_by"
        elif key == "ackExpirationDays":
            suggest = "ack_expiration_days"
        elif key == "ackScope":
            suggest = "ack_scope"
        elif key == "acknowledgeDate":
            suggest = "acknowledge_date"
        elif key == "ancestorPkg":
            suggest = "ancestor_pkg"
        elif key == "aquaScore":
            suggest = "aqua_score"
        elif key == "aquaScoreClassification":
            suggest = "aqua_score_classification"
        elif key == "aquaScoringSystem":
            suggest = "aqua_scoring_system"
        elif key == "aquaSeverity":
            suggest = "aqua_severity"
        elif key == "aquaSeverityClassification":
            suggest = "aqua_severity_classification"
        elif key == "aquaVectors":
            suggest = "aqua_vectors"
        elif key == "auditEventsCount":
            suggest = "audit_events_count"
        elif key == "blockEventsCount":
            suggest = "block_events_count"
        elif key == "exploitReference":
            suggest = "exploit_reference"
        elif key == "exploitType":
            suggest = "exploit_type"
        elif key == "firstFoundDate":
            suggest = "first_found_date"
        elif key == "fixVersion":
            suggest = "fix_version"
        elif key == "imageName":
            suggest = "image_name"
        elif key == "lastFoundDate":
            suggest = "last_found_date"
        elif key == "modificationDate":
            suggest = "modification_date"
        elif key == "nvdCvss2Score":
            suggest = "nvd_cvss2_score"
        elif key == "nvdCvss2Vectors":
            suggest = "nvd_cvss2_vectors"
        elif key == "nvdCvss3Score":
            suggest = "nvd_cvss3_score"
        elif key == "nvdCvss3Severity":
            suggest = "nvd_cvss3_severity"
        elif key == "nvdCvss3Vectors":
            suggest = "nvd_cvss3_vectors"
        elif key == "nvdSeverity":
            suggest = "nvd_severity"
        elif key == "nvdUrl":
            suggest = "nvd_url"
        elif key == "osVersion":
            suggest = "os_version"
        elif key == "publishDate":
            suggest = "publish_date"
        elif key == "resourceArchitecture":
            suggest = "resource_architecture"
        elif key == "resourceCpe":
            suggest = "resource_cpe"
        elif key == "resourceFormat":
            suggest = "resource_format"
        elif key == "resourceHash":
            suggest = "resource_hash"
        elif key == "resourceLicenses":
            suggest = "resource_licenses"
        elif key == "resourceName":
            suggest = "resource_name"
        elif key == "resourcePath":
            suggest = "resource_path"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "resourceVersion":
            suggest = "resource_version"
        elif key == "severityClassification":
            suggest = "severity_classification"
        elif key == "temporalVector":
            suggest = "temporal_vector"
        elif key == "vPatchAppliedBy":
            suggest = "v_patch_applied_by"
        elif key == "vPatchAppliedOn":
            suggest = "v_patch_applied_on"
        elif key == "vPatchEnforcedBy":
            suggest = "v_patch_enforced_by"
        elif key == "vPatchEnforcedOn":
            suggest = "v_patch_enforced_on"
        elif key == "vPatchPolicyEnforce":
            suggest = "v_patch_policy_enforce"
        elif key == "vPatchPolicyName":
            suggest = "v_patch_policy_name"
        elif key == "vPatchRevertedBy":
            suggest = "v_patch_reverted_by"
        elif key == "vPatchRevertedOn":
            suggest = "v_patch_reverted_on"
        elif key == "vPatchStatus":
            suggest = "v_patch_status"
        elif key == "vendorCvss2Score":
            suggest = "vendor_cvss2_score"
        elif key == "vendorCvss2Vectors":
            suggest = "vendor_cvss2_vectors"
        elif key == "vendorSeverity":
            suggest = "vendor_severity"
        elif key == "vendorStatement":
            suggest = "vendor_statement"
        elif key == "vendorUrl":
            suggest = "vendor_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageVulnerability. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageVulnerability.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageVulnerability.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ack_author: Optional[str] = None,
                 ack_comment: Optional[str] = None,
                 ack_expiration_configured_at: Optional[str] = None,
                 ack_expiration_configured_by: Optional[str] = None,
                 ack_expiration_days: Optional[int] = None,
                 ack_scope: Optional[str] = None,
                 acknowledge_date: Optional[str] = None,
                 ancestor_pkg: Optional[str] = None,
                 aqua_score: Optional[float] = None,
                 aqua_score_classification: Optional[str] = None,
                 aqua_scoring_system: Optional[str] = None,
                 aqua_severity: Optional[str] = None,
                 aqua_severity_classification: Optional[str] = None,
                 aqua_vectors: Optional[str] = None,
                 audit_events_count: Optional[int] = None,
                 block_events_count: Optional[int] = None,
                 classification: Optional[str] = None,
                 description: Optional[str] = None,
                 digest: Optional[str] = None,
                 exploit_reference: Optional[str] = None,
                 exploit_type: Optional[str] = None,
                 first_found_date: Optional[str] = None,
                 fix_version: Optional[str] = None,
                 image_name: Optional[str] = None,
                 last_found_date: Optional[str] = None,
                 modification_date: Optional[str] = None,
                 name: Optional[str] = None,
                 nvd_cvss2_score: Optional[float] = None,
                 nvd_cvss2_vectors: Optional[str] = None,
                 nvd_cvss3_score: Optional[float] = None,
                 nvd_cvss3_severity: Optional[str] = None,
                 nvd_cvss3_vectors: Optional[str] = None,
                 nvd_severity: Optional[str] = None,
                 nvd_url: Optional[str] = None,
                 os: Optional[str] = None,
                 os_version: Optional[str] = None,
                 permission: Optional[str] = None,
                 publish_date: Optional[str] = None,
                 registry: Optional[str] = None,
                 repository: Optional[str] = None,
                 resource_architecture: Optional[str] = None,
                 resource_cpe: Optional[str] = None,
                 resource_format: Optional[str] = None,
                 resource_hash: Optional[str] = None,
                 resource_licenses: Optional[Sequence[str]] = None,
                 resource_name: Optional[str] = None,
                 resource_path: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 resource_version: Optional[str] = None,
                 severity_classification: Optional[str] = None,
                 solution: Optional[str] = None,
                 temporal_vector: Optional[str] = None,
                 v_patch_applied_by: Optional[str] = None,
                 v_patch_applied_on: Optional[str] = None,
                 v_patch_enforced_by: Optional[str] = None,
                 v_patch_enforced_on: Optional[str] = None,
                 v_patch_policy_enforce: Optional[bool] = None,
                 v_patch_policy_name: Optional[str] = None,
                 v_patch_reverted_by: Optional[str] = None,
                 v_patch_reverted_on: Optional[str] = None,
                 v_patch_status: Optional[str] = None,
                 vendor_cvss2_score: Optional[float] = None,
                 vendor_cvss2_vectors: Optional[str] = None,
                 vendor_severity: Optional[str] = None,
                 vendor_statement: Optional[str] = None,
                 vendor_url: Optional[str] = None):
        """
        :param str digest: The content digest of the image.
        :param str name: The name of the image.
        :param str os: The operating system detected in the image
        :param str os_version: The version of the OS detected in the image.
        :param str permission: Permission of the image.
        :param str registry: The name of the registry where the image is stored.
        :param str repository: The name of the image's repository.
        """
        if ack_author is not None:
            pulumi.set(__self__, "ack_author", ack_author)
        if ack_comment is not None:
            pulumi.set(__self__, "ack_comment", ack_comment)
        if ack_expiration_configured_at is not None:
            pulumi.set(__self__, "ack_expiration_configured_at", ack_expiration_configured_at)
        if ack_expiration_configured_by is not None:
            pulumi.set(__self__, "ack_expiration_configured_by", ack_expiration_configured_by)
        if ack_expiration_days is not None:
            pulumi.set(__self__, "ack_expiration_days", ack_expiration_days)
        if ack_scope is not None:
            pulumi.set(__self__, "ack_scope", ack_scope)
        if acknowledge_date is not None:
            pulumi.set(__self__, "acknowledge_date", acknowledge_date)
        if ancestor_pkg is not None:
            pulumi.set(__self__, "ancestor_pkg", ancestor_pkg)
        if aqua_score is not None:
            pulumi.set(__self__, "aqua_score", aqua_score)
        if aqua_score_classification is not None:
            pulumi.set(__self__, "aqua_score_classification", aqua_score_classification)
        if aqua_scoring_system is not None:
            pulumi.set(__self__, "aqua_scoring_system", aqua_scoring_system)
        if aqua_severity is not None:
            pulumi.set(__self__, "aqua_severity", aqua_severity)
        if aqua_severity_classification is not None:
            pulumi.set(__self__, "aqua_severity_classification", aqua_severity_classification)
        if aqua_vectors is not None:
            pulumi.set(__self__, "aqua_vectors", aqua_vectors)
        if audit_events_count is not None:
            pulumi.set(__self__, "audit_events_count", audit_events_count)
        if block_events_count is not None:
            pulumi.set(__self__, "block_events_count", block_events_count)
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if exploit_reference is not None:
            pulumi.set(__self__, "exploit_reference", exploit_reference)
        if exploit_type is not None:
            pulumi.set(__self__, "exploit_type", exploit_type)
        if first_found_date is not None:
            pulumi.set(__self__, "first_found_date", first_found_date)
        if fix_version is not None:
            pulumi.set(__self__, "fix_version", fix_version)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if last_found_date is not None:
            pulumi.set(__self__, "last_found_date", last_found_date)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nvd_cvss2_score is not None:
            pulumi.set(__self__, "nvd_cvss2_score", nvd_cvss2_score)
        if nvd_cvss2_vectors is not None:
            pulumi.set(__self__, "nvd_cvss2_vectors", nvd_cvss2_vectors)
        if nvd_cvss3_score is not None:
            pulumi.set(__self__, "nvd_cvss3_score", nvd_cvss3_score)
        if nvd_cvss3_severity is not None:
            pulumi.set(__self__, "nvd_cvss3_severity", nvd_cvss3_severity)
        if nvd_cvss3_vectors is not None:
            pulumi.set(__self__, "nvd_cvss3_vectors", nvd_cvss3_vectors)
        if nvd_severity is not None:
            pulumi.set(__self__, "nvd_severity", nvd_severity)
        if nvd_url is not None:
            pulumi.set(__self__, "nvd_url", nvd_url)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if publish_date is not None:
            pulumi.set(__self__, "publish_date", publish_date)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if resource_architecture is not None:
            pulumi.set(__self__, "resource_architecture", resource_architecture)
        if resource_cpe is not None:
            pulumi.set(__self__, "resource_cpe", resource_cpe)
        if resource_format is not None:
            pulumi.set(__self__, "resource_format", resource_format)
        if resource_hash is not None:
            pulumi.set(__self__, "resource_hash", resource_hash)
        if resource_licenses is not None:
            pulumi.set(__self__, "resource_licenses", resource_licenses)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if severity_classification is not None:
            pulumi.set(__self__, "severity_classification", severity_classification)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)
        if temporal_vector is not None:
            pulumi.set(__self__, "temporal_vector", temporal_vector)
        if v_patch_applied_by is not None:
            pulumi.set(__self__, "v_patch_applied_by", v_patch_applied_by)
        if v_patch_applied_on is not None:
            pulumi.set(__self__, "v_patch_applied_on", v_patch_applied_on)
        if v_patch_enforced_by is not None:
            pulumi.set(__self__, "v_patch_enforced_by", v_patch_enforced_by)
        if v_patch_enforced_on is not None:
            pulumi.set(__self__, "v_patch_enforced_on", v_patch_enforced_on)
        if v_patch_policy_enforce is not None:
            pulumi.set(__self__, "v_patch_policy_enforce", v_patch_policy_enforce)
        if v_patch_policy_name is not None:
            pulumi.set(__self__, "v_patch_policy_name", v_patch_policy_name)
        if v_patch_reverted_by is not None:
            pulumi.set(__self__, "v_patch_reverted_by", v_patch_reverted_by)
        if v_patch_reverted_on is not None:
            pulumi.set(__self__, "v_patch_reverted_on", v_patch_reverted_on)
        if v_patch_status is not None:
            pulumi.set(__self__, "v_patch_status", v_patch_status)
        if vendor_cvss2_score is not None:
            pulumi.set(__self__, "vendor_cvss2_score", vendor_cvss2_score)
        if vendor_cvss2_vectors is not None:
            pulumi.set(__self__, "vendor_cvss2_vectors", vendor_cvss2_vectors)
        if vendor_severity is not None:
            pulumi.set(__self__, "vendor_severity", vendor_severity)
        if vendor_statement is not None:
            pulumi.set(__self__, "vendor_statement", vendor_statement)
        if vendor_url is not None:
            pulumi.set(__self__, "vendor_url", vendor_url)

    @property
    @pulumi.getter(name="ackAuthor")
    def ack_author(self) -> Optional[str]:
        return pulumi.get(self, "ack_author")

    @property
    @pulumi.getter(name="ackComment")
    def ack_comment(self) -> Optional[str]:
        return pulumi.get(self, "ack_comment")

    @property
    @pulumi.getter(name="ackExpirationConfiguredAt")
    def ack_expiration_configured_at(self) -> Optional[str]:
        return pulumi.get(self, "ack_expiration_configured_at")

    @property
    @pulumi.getter(name="ackExpirationConfiguredBy")
    def ack_expiration_configured_by(self) -> Optional[str]:
        return pulumi.get(self, "ack_expiration_configured_by")

    @property
    @pulumi.getter(name="ackExpirationDays")
    def ack_expiration_days(self) -> Optional[int]:
        return pulumi.get(self, "ack_expiration_days")

    @property
    @pulumi.getter(name="ackScope")
    def ack_scope(self) -> Optional[str]:
        return pulumi.get(self, "ack_scope")

    @property
    @pulumi.getter(name="acknowledgeDate")
    def acknowledge_date(self) -> Optional[str]:
        return pulumi.get(self, "acknowledge_date")

    @property
    @pulumi.getter(name="ancestorPkg")
    def ancestor_pkg(self) -> Optional[str]:
        return pulumi.get(self, "ancestor_pkg")

    @property
    @pulumi.getter(name="aquaScore")
    def aqua_score(self) -> Optional[float]:
        return pulumi.get(self, "aqua_score")

    @property
    @pulumi.getter(name="aquaScoreClassification")
    def aqua_score_classification(self) -> Optional[str]:
        return pulumi.get(self, "aqua_score_classification")

    @property
    @pulumi.getter(name="aquaScoringSystem")
    def aqua_scoring_system(self) -> Optional[str]:
        return pulumi.get(self, "aqua_scoring_system")

    @property
    @pulumi.getter(name="aquaSeverity")
    def aqua_severity(self) -> Optional[str]:
        return pulumi.get(self, "aqua_severity")

    @property
    @pulumi.getter(name="aquaSeverityClassification")
    def aqua_severity_classification(self) -> Optional[str]:
        return pulumi.get(self, "aqua_severity_classification")

    @property
    @pulumi.getter(name="aquaVectors")
    def aqua_vectors(self) -> Optional[str]:
        return pulumi.get(self, "aqua_vectors")

    @property
    @pulumi.getter(name="auditEventsCount")
    def audit_events_count(self) -> Optional[int]:
        return pulumi.get(self, "audit_events_count")

    @property
    @pulumi.getter(name="blockEventsCount")
    def block_events_count(self) -> Optional[int]:
        return pulumi.get(self, "block_events_count")

    @property
    @pulumi.getter
    def classification(self) -> Optional[str]:
        return pulumi.get(self, "classification")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def digest(self) -> Optional[str]:
        """
        The content digest of the image.
        """
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter(name="exploitReference")
    def exploit_reference(self) -> Optional[str]:
        return pulumi.get(self, "exploit_reference")

    @property
    @pulumi.getter(name="exploitType")
    def exploit_type(self) -> Optional[str]:
        return pulumi.get(self, "exploit_type")

    @property
    @pulumi.getter(name="firstFoundDate")
    def first_found_date(self) -> Optional[str]:
        return pulumi.get(self, "first_found_date")

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> Optional[str]:
        return pulumi.get(self, "fix_version")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="lastFoundDate")
    def last_found_date(self) -> Optional[str]:
        return pulumi.get(self, "last_found_date")

    @property
    @pulumi.getter(name="modificationDate")
    def modification_date(self) -> Optional[str]:
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nvdCvss2Score")
    def nvd_cvss2_score(self) -> Optional[float]:
        return pulumi.get(self, "nvd_cvss2_score")

    @property
    @pulumi.getter(name="nvdCvss2Vectors")
    def nvd_cvss2_vectors(self) -> Optional[str]:
        return pulumi.get(self, "nvd_cvss2_vectors")

    @property
    @pulumi.getter(name="nvdCvss3Score")
    def nvd_cvss3_score(self) -> Optional[float]:
        return pulumi.get(self, "nvd_cvss3_score")

    @property
    @pulumi.getter(name="nvdCvss3Severity")
    def nvd_cvss3_severity(self) -> Optional[str]:
        return pulumi.get(self, "nvd_cvss3_severity")

    @property
    @pulumi.getter(name="nvdCvss3Vectors")
    def nvd_cvss3_vectors(self) -> Optional[str]:
        return pulumi.get(self, "nvd_cvss3_vectors")

    @property
    @pulumi.getter(name="nvdSeverity")
    def nvd_severity(self) -> Optional[str]:
        return pulumi.get(self, "nvd_severity")

    @property
    @pulumi.getter(name="nvdUrl")
    def nvd_url(self) -> Optional[str]:
        return pulumi.get(self, "nvd_url")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        The operating system detected in the image
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[str]:
        """
        The version of the OS detected in the image.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def permission(self) -> Optional[str]:
        """
        Permission of the image.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="publishDate")
    def publish_date(self) -> Optional[str]:
        return pulumi.get(self, "publish_date")

    @property
    @pulumi.getter
    def registry(self) -> Optional[str]:
        """
        The name of the registry where the image is stored.
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        The name of the image's repository.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="resourceArchitecture")
    def resource_architecture(self) -> Optional[str]:
        return pulumi.get(self, "resource_architecture")

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> Optional[str]:
        return pulumi.get(self, "resource_cpe")

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> Optional[str]:
        return pulumi.get(self, "resource_format")

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> Optional[str]:
        return pulumi.get(self, "resource_hash")

    @property
    @pulumi.getter(name="resourceLicenses")
    def resource_licenses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resource_licenses")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[str]:
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[str]:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter(name="severityClassification")
    def severity_classification(self) -> Optional[str]:
        return pulumi.get(self, "severity_classification")

    @property
    @pulumi.getter
    def solution(self) -> Optional[str]:
        return pulumi.get(self, "solution")

    @property
    @pulumi.getter(name="temporalVector")
    def temporal_vector(self) -> Optional[str]:
        return pulumi.get(self, "temporal_vector")

    @property
    @pulumi.getter(name="vPatchAppliedBy")
    def v_patch_applied_by(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_applied_by")

    @property
    @pulumi.getter(name="vPatchAppliedOn")
    def v_patch_applied_on(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_applied_on")

    @property
    @pulumi.getter(name="vPatchEnforcedBy")
    def v_patch_enforced_by(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_enforced_by")

    @property
    @pulumi.getter(name="vPatchEnforcedOn")
    def v_patch_enforced_on(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_enforced_on")

    @property
    @pulumi.getter(name="vPatchPolicyEnforce")
    def v_patch_policy_enforce(self) -> Optional[bool]:
        return pulumi.get(self, "v_patch_policy_enforce")

    @property
    @pulumi.getter(name="vPatchPolicyName")
    def v_patch_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_policy_name")

    @property
    @pulumi.getter(name="vPatchRevertedBy")
    def v_patch_reverted_by(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_reverted_by")

    @property
    @pulumi.getter(name="vPatchRevertedOn")
    def v_patch_reverted_on(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_reverted_on")

    @property
    @pulumi.getter(name="vPatchStatus")
    def v_patch_status(self) -> Optional[str]:
        return pulumi.get(self, "v_patch_status")

    @property
    @pulumi.getter(name="vendorCvss2Score")
    def vendor_cvss2_score(self) -> Optional[float]:
        return pulumi.get(self, "vendor_cvss2_score")

    @property
    @pulumi.getter(name="vendorCvss2Vectors")
    def vendor_cvss2_vectors(self) -> Optional[str]:
        return pulumi.get(self, "vendor_cvss2_vectors")

    @property
    @pulumi.getter(name="vendorSeverity")
    def vendor_severity(self) -> Optional[str]:
        return pulumi.get(self, "vendor_severity")

    @property
    @pulumi.getter(name="vendorStatement")
    def vendor_statement(self) -> Optional[str]:
        return pulumi.get(self, "vendor_statement")

    @property
    @pulumi.getter(name="vendorUrl")
    def vendor_url(self) -> Optional[str]:
        return pulumi.get(self, "vendor_url")


@pulumi.output_type
class ServiceScopeVariable(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        """
        :param str attribute: Class of supported scope.
        :param str value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserSaasGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupAdmin":
            suggest = "group_admin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSaasGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSaasGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSaasGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_admin: Optional[bool] = None,
                 name: Optional[str] = None):
        if group_admin is not None:
            pulumi.set(__self__, "group_admin", group_admin)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="groupAdmin")
    def group_admin(self) -> Optional[bool]:
        return pulumi.get(self, "group_admin")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UserSaasLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSaasLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSaasLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSaasLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 user_id: Optional[int] = None):
        """
        :param int id: The ID of this resource.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def created(self) -> Optional[str]:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[int]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetApplicationScopeCategoryResult(dict):
    def __init__(__self__, *,
                 artifacts: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactResult']] = None,
                 entity_scopes: Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeResult']] = None,
                 infrastructures: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureResult']] = None,
                 workloads: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadResult']] = None):
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactResult']]:
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeResult']]:
        return pulumi.get(self, "entity_scopes")

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureResult']]:
        return pulumi.get(self, "infrastructures")

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadResult']]:
        return pulumi.get(self, "workloads")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactResult(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfResult']] = None,
                 functions: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionResult']] = None,
                 images: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageResult']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfResult']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionResult']]:
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageResult']]:
        return pulumi.get(self, "images")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactCfResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactCfVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactCfVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactFunctionResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactFunctionVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactFunctionVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactImageResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryArtifactImageVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryArtifactImageVariableResult(dict):
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryEntityScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryEntityScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryEntityScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureResult(dict):
    def __init__(__self__, *,
                 kubernetes: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteResult']] = None,
                 os: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOResult']] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteResult']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOResult']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureKuberneteResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureKuberneteVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureKuberneteVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureOResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryInfrastructureOVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryInfrastructureOVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadResult(dict):
    def __init__(__self__, *,
                 cfs: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfResult']] = None,
                 kubernetes: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteResult']] = None,
                 os: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOResult']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfResult']]:
        return pulumi.get(self, "cfs")

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteResult']]:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOResult']]:
        return pulumi.get(self, "os")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadCfResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadCfVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadCfVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadKuberneteResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadKuberneteVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadKuberneteVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadOResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetApplicationScopeCategoryWorkloadOVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApplicationScopeCategoryWorkloadOVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetContainerRuntimePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetEnforcerGroupsCommandResult(dict):
    def __init__(__self__, *,
                 default: str,
                 kubernetes: str,
                 swarm: str,
                 windows: str):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "kubernetes", kubernetes)
        pulumi.set(__self__, "swarm", swarm)
        pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def kubernetes(self) -> str:
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter
    def swarm(self) -> str:
        return pulumi.get(self, "swarm")

    @property
    @pulumi.getter
    def windows(self) -> str:
        return pulumi.get(self, "windows")


@pulumi.output_type
class GetEnforcerGroupsOrchestratorResult(dict):
    def __init__(__self__, *,
                 master: bool,
                 namespace: str,
                 service_account: str,
                 type: str):
        pulumi.set(__self__, "master", master)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def master(self) -> bool:
        return pulumi.get(self, "master")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> str:
        return pulumi.get(self, "service_account")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFirewallPolicyInboundNetworkResult(dict):
    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource: str,
                 resource_type: str):
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetFirewallPolicyOutboundNetworkResult(dict):
    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource: str,
                 resource_type: str):
        """
        :param bool allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource: Information of the resource.
        :param str resource_type: Type of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetFunctionAssurancePolicyAutoScanTimeResult(dict):
    def __init__(__self__, *,
                 iteration: int,
                 iteration_type: str,
                 time: str,
                 week_days: Sequence[str]):
        pulumi.set(__self__, "iteration", iteration)
        pulumi.set(__self__, "iteration_type", iteration_type)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> int:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> str:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Sequence[str]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class GetFunctionAssurancePolicyCustomCheckResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 engine: str,
                 last_modified: int,
                 name: str,
                 path: str,
                 read_only: bool,
                 script_id: str,
                 severity: str,
                 snippet: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> int:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> str:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class GetFunctionAssurancePolicyForbiddenLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionAssurancePolicyPackagesBlackListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetFunctionAssurancePolicyPackagesWhiteListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetFunctionAssurancePolicyRequiredLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionAssurancePolicyScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetFunctionAssurancePolicyScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetFunctionAssurancePolicyScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetFunctionAssurancePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFunctionAssurancePolicyTrustedBaseImageResult(dict):
    def __init__(__self__, *,
                 imagename: str,
                 registry: str):
        pulumi.set(__self__, "imagename", imagename)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> str:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetFunctionRuntimePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 description: str,
                 grpc_address: str,
                 hostname: str,
                 id: str,
                 logicalname: str,
                 public_address: str,
                 status: str,
                 version: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grpc_address", grpc_address)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "logicalname", logicalname)
        pulumi.set(__self__, "public_address", public_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grpcAddress")
    def grpc_address(self) -> str:
        return pulumi.get(self, "grpc_address")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logicalname(self) -> str:
        return pulumi.get(self, "logicalname")

    @property
    @pulumi.getter(name="publicAddress")
    def public_address(self) -> str:
        return pulumi.get(self, "public_address")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created: str,
                 group_id: str,
                 name: str):
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetHostAssurancePolicyAutoScanTimeResult(dict):
    def __init__(__self__, *,
                 iteration: int,
                 iteration_type: str,
                 time: str,
                 week_days: Sequence[str]):
        pulumi.set(__self__, "iteration", iteration)
        pulumi.set(__self__, "iteration_type", iteration_type)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> int:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> str:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Sequence[str]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class GetHostAssurancePolicyCustomCheckResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 engine: str,
                 last_modified: int,
                 name: str,
                 path: str,
                 read_only: bool,
                 script_id: str,
                 severity: str,
                 snippet: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> int:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> str:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class GetHostAssurancePolicyForbiddenLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostAssurancePolicyPackagesBlackListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetHostAssurancePolicyPackagesWhiteListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetHostAssurancePolicyRequiredLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostAssurancePolicyScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetHostAssurancePolicyScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetHostAssurancePolicyScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetHostAssurancePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostAssurancePolicyTrustedBaseImageResult(dict):
    def __init__(__self__, *,
                 imagename: str,
                 registry: str):
        pulumi.set(__self__, "imagename", imagename)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> str:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetHostRuntimePolicyFileIntegrityMonitoringResult(dict):
    def __init__(__self__, *,
                 excluded_paths: Sequence[str],
                 excluded_processes: Sequence[str],
                 excluded_users: Sequence[str],
                 monitor_attributes: bool,
                 monitor_create: bool,
                 monitor_delete: bool,
                 monitor_modify: bool,
                 monitor_read: bool,
                 monitored_paths: Sequence[str],
                 monitored_processes: Sequence[str],
                 monitored_users: Sequence[str]):
        pulumi.set(__self__, "excluded_paths", excluded_paths)
        pulumi.set(__self__, "excluded_processes", excluded_processes)
        pulumi.set(__self__, "excluded_users", excluded_users)
        pulumi.set(__self__, "monitor_attributes", monitor_attributes)
        pulumi.set(__self__, "monitor_create", monitor_create)
        pulumi.set(__self__, "monitor_delete", monitor_delete)
        pulumi.set(__self__, "monitor_modify", monitor_modify)
        pulumi.set(__self__, "monitor_read", monitor_read)
        pulumi.set(__self__, "monitored_paths", monitored_paths)
        pulumi.set(__self__, "monitored_processes", monitored_processes)
        pulumi.set(__self__, "monitored_users", monitored_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="monitorAttributes")
    def monitor_attributes(self) -> bool:
        return pulumi.get(self, "monitor_attributes")

    @property
    @pulumi.getter(name="monitorCreate")
    def monitor_create(self) -> bool:
        return pulumi.get(self, "monitor_create")

    @property
    @pulumi.getter(name="monitorDelete")
    def monitor_delete(self) -> bool:
        return pulumi.get(self, "monitor_delete")

    @property
    @pulumi.getter(name="monitorModify")
    def monitor_modify(self) -> bool:
        return pulumi.get(self, "monitor_modify")

    @property
    @pulumi.getter(name="monitorRead")
    def monitor_read(self) -> bool:
        return pulumi.get(self, "monitor_read")

    @property
    @pulumi.getter(name="monitoredPaths")
    def monitored_paths(self) -> Sequence[str]:
        return pulumi.get(self, "monitored_paths")

    @property
    @pulumi.getter(name="monitoredProcesses")
    def monitored_processes(self) -> Sequence[str]:
        return pulumi.get(self, "monitored_processes")

    @property
    @pulumi.getter(name="monitoredUsers")
    def monitored_users(self) -> Sequence[str]:
        return pulumi.get(self, "monitored_users")


@pulumi.output_type
class GetHostRuntimePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetHostRuntimePolicyWindowsRegistryMonitoringResult(dict):
    def __init__(__self__, *,
                 excluded_paths: Sequence[str],
                 excluded_processes: Sequence[str],
                 excluded_users: Sequence[str],
                 monitor_attributes: bool,
                 monitor_create: bool,
                 monitor_delete: bool,
                 monitor_modify: bool,
                 monitor_read: bool,
                 monitored_paths: Sequence[str],
                 monitored_processes: Sequence[str],
                 monitored_users: Sequence[str]):
        pulumi.set(__self__, "excluded_paths", excluded_paths)
        pulumi.set(__self__, "excluded_processes", excluded_processes)
        pulumi.set(__self__, "excluded_users", excluded_users)
        pulumi.set(__self__, "monitor_attributes", monitor_attributes)
        pulumi.set(__self__, "monitor_create", monitor_create)
        pulumi.set(__self__, "monitor_delete", monitor_delete)
        pulumi.set(__self__, "monitor_modify", monitor_modify)
        pulumi.set(__self__, "monitor_read", monitor_read)
        pulumi.set(__self__, "monitored_paths", monitored_paths)
        pulumi.set(__self__, "monitored_processes", monitored_processes)
        pulumi.set(__self__, "monitored_users", monitored_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="monitorAttributes")
    def monitor_attributes(self) -> bool:
        return pulumi.get(self, "monitor_attributes")

    @property
    @pulumi.getter(name="monitorCreate")
    def monitor_create(self) -> bool:
        return pulumi.get(self, "monitor_create")

    @property
    @pulumi.getter(name="monitorDelete")
    def monitor_delete(self) -> bool:
        return pulumi.get(self, "monitor_delete")

    @property
    @pulumi.getter(name="monitorModify")
    def monitor_modify(self) -> bool:
        return pulumi.get(self, "monitor_modify")

    @property
    @pulumi.getter(name="monitorRead")
    def monitor_read(self) -> bool:
        return pulumi.get(self, "monitor_read")

    @property
    @pulumi.getter(name="monitoredPaths")
    def monitored_paths(self) -> Sequence[str]:
        return pulumi.get(self, "monitored_paths")

    @property
    @pulumi.getter(name="monitoredProcesses")
    def monitored_processes(self) -> Sequence[str]:
        return pulumi.get(self, "monitored_processes")

    @property
    @pulumi.getter(name="monitoredUsers")
    def monitored_users(self) -> Sequence[str]:
        return pulumi.get(self, "monitored_users")


@pulumi.output_type
class GetHostRuntimePolicyWindowsRegistryProtectionResult(dict):
    def __init__(__self__, *,
                 excluded_paths: Sequence[str],
                 excluded_processes: Sequence[str],
                 excluded_users: Sequence[str],
                 protected_paths: Sequence[str],
                 protected_processes: Sequence[str],
                 protected_users: Sequence[str]):
        pulumi.set(__self__, "excluded_paths", excluded_paths)
        pulumi.set(__self__, "excluded_processes", excluded_processes)
        pulumi.set(__self__, "excluded_users", excluded_users)
        pulumi.set(__self__, "protected_paths", protected_paths)
        pulumi.set(__self__, "protected_processes", protected_processes)
        pulumi.set(__self__, "protected_users", protected_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_paths")

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_processes")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Sequence[str]:
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="protectedPaths")
    def protected_paths(self) -> Sequence[str]:
        return pulumi.get(self, "protected_paths")

    @property
    @pulumi.getter(name="protectedProcesses")
    def protected_processes(self) -> Sequence[str]:
        return pulumi.get(self, "protected_processes")

    @property
    @pulumi.getter(name="protectedUsers")
    def protected_users(self) -> Sequence[str]:
        return pulumi.get(self, "protected_users")


@pulumi.output_type
class GetImageAssuranceChecksPerformedResult(dict):
    def __init__(__self__, *,
                 assurance_type: str,
                 blocking: bool,
                 control: str,
                 dta_skipped: bool,
                 dta_skipped_reason: str,
                 failed: bool,
                 policy_name: str):
        """
        :param bool dta_skipped: If DTA was skipped.
        :param str dta_skipped_reason: The reason why DTA was skipped.
        """
        pulumi.set(__self__, "assurance_type", assurance_type)
        pulumi.set(__self__, "blocking", blocking)
        pulumi.set(__self__, "control", control)
        pulumi.set(__self__, "dta_skipped", dta_skipped)
        pulumi.set(__self__, "dta_skipped_reason", dta_skipped_reason)
        pulumi.set(__self__, "failed", failed)
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> str:
        return pulumi.get(self, "assurance_type")

    @property
    @pulumi.getter
    def blocking(self) -> bool:
        return pulumi.get(self, "blocking")

    @property
    @pulumi.getter
    def control(self) -> str:
        return pulumi.get(self, "control")

    @property
    @pulumi.getter(name="dtaSkipped")
    def dta_skipped(self) -> bool:
        """
        If DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped")

    @property
    @pulumi.getter(name="dtaSkippedReason")
    def dta_skipped_reason(self) -> str:
        """
        The reason why DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped_reason")

    @property
    @pulumi.getter
    def failed(self) -> bool:
        return pulumi.get(self, "failed")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetImageAssurancePolicyAutoScanTimeResult(dict):
    def __init__(__self__, *,
                 iteration: int,
                 iteration_type: str,
                 time: str,
                 week_days: Sequence[str]):
        pulumi.set(__self__, "iteration", iteration)
        pulumi.set(__self__, "iteration_type", iteration_type)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> int:
        return pulumi.get(self, "iteration")

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> str:
        return pulumi.get(self, "iteration_type")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Sequence[str]:
        return pulumi.get(self, "week_days")


@pulumi.output_type
class GetImageAssurancePolicyCustomCheckResult(dict):
    def __init__(__self__, *,
                 author: str,
                 description: str,
                 engine: str,
                 last_modified: int,
                 name: str,
                 path: str,
                 read_only: bool,
                 script_id: str,
                 severity: str,
                 snippet: str):
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> int:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> str:
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def snippet(self) -> str:
        return pulumi.get(self, "snippet")


@pulumi.output_type
class GetImageAssurancePolicyForbiddenLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageAssurancePolicyPackagesBlackListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetImageAssurancePolicyPackagesWhiteListResult(dict):
    def __init__(__self__, *,
                 arch: str,
                 display: str,
                 epoch: str,
                 format: str,
                 license: str,
                 name: str,
                 release: str,
                 version: str,
                 version_range: str):
        pulumi.set(__self__, "arch", arch)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "epoch", epoch)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "license", license)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> str:
        return pulumi.get(self, "arch")

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def epoch(self) -> str:
        return pulumi.get(self, "epoch")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def license(self) -> str:
        return pulumi.get(self, "license")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def release(self) -> str:
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> str:
        return pulumi.get(self, "version_range")


@pulumi.output_type
class GetImageAssurancePolicyRequiredLabelResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageAssurancePolicyScopeResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['outputs.GetImageAssurancePolicyScopeVariableResult']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['outputs.GetImageAssurancePolicyScopeVariableResult']]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetImageAssurancePolicyScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 name: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageAssurancePolicyTrustedBaseImageResult(dict):
    def __init__(__self__, *,
                 imagename: str,
                 registry: str):
        pulumi.set(__self__, "imagename", imagename)
        pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> str:
        return pulumi.get(self, "imagename")

    @property
    @pulumi.getter
    def registry(self) -> str:
        return pulumi.get(self, "registry")


@pulumi.output_type
class GetImageHistoryResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 created: str,
                 created_by: str,
                 id: str,
                 size: int):
        """
        :param str comment: The image creation comment.
        :param str created: The date and time when the image was registered.
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        The image creation comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def created(self) -> str:
        """
        The date and time when the image was registered.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetImageVulnerabilityResult(dict):
    def __init__(__self__, *,
                 ack_author: str,
                 ack_comment: str,
                 ack_expiration_configured_at: str,
                 ack_expiration_configured_by: str,
                 ack_expiration_days: int,
                 ack_scope: str,
                 acknowledge_date: str,
                 ancestor_pkg: str,
                 aqua_score: float,
                 aqua_score_classification: str,
                 aqua_scoring_system: str,
                 aqua_severity: str,
                 aqua_severity_classification: str,
                 aqua_vectors: str,
                 audit_events_count: int,
                 block_events_count: int,
                 classification: str,
                 description: str,
                 digest: str,
                 exploit_reference: str,
                 exploit_type: str,
                 first_found_date: str,
                 fix_version: str,
                 image_name: str,
                 last_found_date: str,
                 modification_date: str,
                 name: str,
                 nvd_cvss2_score: float,
                 nvd_cvss2_vectors: str,
                 nvd_cvss3_score: float,
                 nvd_cvss3_severity: str,
                 nvd_cvss3_vectors: str,
                 nvd_severity: str,
                 nvd_url: str,
                 os: str,
                 os_version: str,
                 permission: str,
                 publish_date: str,
                 registry: str,
                 repository: str,
                 resource_architecture: str,
                 resource_cpe: str,
                 resource_format: str,
                 resource_hash: str,
                 resource_licenses: Sequence[str],
                 resource_name: str,
                 resource_path: str,
                 resource_type: str,
                 resource_version: str,
                 severity_classification: str,
                 solution: str,
                 temporal_vector: str,
                 v_patch_applied_by: str,
                 v_patch_applied_on: str,
                 v_patch_enforced_by: str,
                 v_patch_enforced_on: str,
                 v_patch_policy_enforce: bool,
                 v_patch_policy_name: str,
                 v_patch_reverted_by: str,
                 v_patch_reverted_on: str,
                 v_patch_status: str,
                 vendor_cvss2_score: float,
                 vendor_cvss2_vectors: str,
                 vendor_severity: str,
                 vendor_statement: str,
                 vendor_url: str):
        """
        :param str digest: The content digest of the image.
        :param str name: The name of the image.
        :param str os: The operating system detected in the image
        :param str os_version: The version of the OS detected in the image.
        :param str permission: Permission of the image.
        :param str registry: The name of the registry where the image is stored.
        :param str repository: The name of the image's repository.
        """
        pulumi.set(__self__, "ack_author", ack_author)
        pulumi.set(__self__, "ack_comment", ack_comment)
        pulumi.set(__self__, "ack_expiration_configured_at", ack_expiration_configured_at)
        pulumi.set(__self__, "ack_expiration_configured_by", ack_expiration_configured_by)
        pulumi.set(__self__, "ack_expiration_days", ack_expiration_days)
        pulumi.set(__self__, "ack_scope", ack_scope)
        pulumi.set(__self__, "acknowledge_date", acknowledge_date)
        pulumi.set(__self__, "ancestor_pkg", ancestor_pkg)
        pulumi.set(__self__, "aqua_score", aqua_score)
        pulumi.set(__self__, "aqua_score_classification", aqua_score_classification)
        pulumi.set(__self__, "aqua_scoring_system", aqua_scoring_system)
        pulumi.set(__self__, "aqua_severity", aqua_severity)
        pulumi.set(__self__, "aqua_severity_classification", aqua_severity_classification)
        pulumi.set(__self__, "aqua_vectors", aqua_vectors)
        pulumi.set(__self__, "audit_events_count", audit_events_count)
        pulumi.set(__self__, "block_events_count", block_events_count)
        pulumi.set(__self__, "classification", classification)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "exploit_reference", exploit_reference)
        pulumi.set(__self__, "exploit_type", exploit_type)
        pulumi.set(__self__, "first_found_date", first_found_date)
        pulumi.set(__self__, "fix_version", fix_version)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "last_found_date", last_found_date)
        pulumi.set(__self__, "modification_date", modification_date)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nvd_cvss2_score", nvd_cvss2_score)
        pulumi.set(__self__, "nvd_cvss2_vectors", nvd_cvss2_vectors)
        pulumi.set(__self__, "nvd_cvss3_score", nvd_cvss3_score)
        pulumi.set(__self__, "nvd_cvss3_severity", nvd_cvss3_severity)
        pulumi.set(__self__, "nvd_cvss3_vectors", nvd_cvss3_vectors)
        pulumi.set(__self__, "nvd_severity", nvd_severity)
        pulumi.set(__self__, "nvd_url", nvd_url)
        pulumi.set(__self__, "os", os)
        pulumi.set(__self__, "os_version", os_version)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "publish_date", publish_date)
        pulumi.set(__self__, "registry", registry)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "resource_architecture", resource_architecture)
        pulumi.set(__self__, "resource_cpe", resource_cpe)
        pulumi.set(__self__, "resource_format", resource_format)
        pulumi.set(__self__, "resource_hash", resource_hash)
        pulumi.set(__self__, "resource_licenses", resource_licenses)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_path", resource_path)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "severity_classification", severity_classification)
        pulumi.set(__self__, "solution", solution)
        pulumi.set(__self__, "temporal_vector", temporal_vector)
        pulumi.set(__self__, "v_patch_applied_by", v_patch_applied_by)
        pulumi.set(__self__, "v_patch_applied_on", v_patch_applied_on)
        pulumi.set(__self__, "v_patch_enforced_by", v_patch_enforced_by)
        pulumi.set(__self__, "v_patch_enforced_on", v_patch_enforced_on)
        pulumi.set(__self__, "v_patch_policy_enforce", v_patch_policy_enforce)
        pulumi.set(__self__, "v_patch_policy_name", v_patch_policy_name)
        pulumi.set(__self__, "v_patch_reverted_by", v_patch_reverted_by)
        pulumi.set(__self__, "v_patch_reverted_on", v_patch_reverted_on)
        pulumi.set(__self__, "v_patch_status", v_patch_status)
        pulumi.set(__self__, "vendor_cvss2_score", vendor_cvss2_score)
        pulumi.set(__self__, "vendor_cvss2_vectors", vendor_cvss2_vectors)
        pulumi.set(__self__, "vendor_severity", vendor_severity)
        pulumi.set(__self__, "vendor_statement", vendor_statement)
        pulumi.set(__self__, "vendor_url", vendor_url)

    @property
    @pulumi.getter(name="ackAuthor")
    def ack_author(self) -> str:
        return pulumi.get(self, "ack_author")

    @property
    @pulumi.getter(name="ackComment")
    def ack_comment(self) -> str:
        return pulumi.get(self, "ack_comment")

    @property
    @pulumi.getter(name="ackExpirationConfiguredAt")
    def ack_expiration_configured_at(self) -> str:
        return pulumi.get(self, "ack_expiration_configured_at")

    @property
    @pulumi.getter(name="ackExpirationConfiguredBy")
    def ack_expiration_configured_by(self) -> str:
        return pulumi.get(self, "ack_expiration_configured_by")

    @property
    @pulumi.getter(name="ackExpirationDays")
    def ack_expiration_days(self) -> int:
        return pulumi.get(self, "ack_expiration_days")

    @property
    @pulumi.getter(name="ackScope")
    def ack_scope(self) -> str:
        return pulumi.get(self, "ack_scope")

    @property
    @pulumi.getter(name="acknowledgeDate")
    def acknowledge_date(self) -> str:
        return pulumi.get(self, "acknowledge_date")

    @property
    @pulumi.getter(name="ancestorPkg")
    def ancestor_pkg(self) -> str:
        return pulumi.get(self, "ancestor_pkg")

    @property
    @pulumi.getter(name="aquaScore")
    def aqua_score(self) -> float:
        return pulumi.get(self, "aqua_score")

    @property
    @pulumi.getter(name="aquaScoreClassification")
    def aqua_score_classification(self) -> str:
        return pulumi.get(self, "aqua_score_classification")

    @property
    @pulumi.getter(name="aquaScoringSystem")
    def aqua_scoring_system(self) -> str:
        return pulumi.get(self, "aqua_scoring_system")

    @property
    @pulumi.getter(name="aquaSeverity")
    def aqua_severity(self) -> str:
        return pulumi.get(self, "aqua_severity")

    @property
    @pulumi.getter(name="aquaSeverityClassification")
    def aqua_severity_classification(self) -> str:
        return pulumi.get(self, "aqua_severity_classification")

    @property
    @pulumi.getter(name="aquaVectors")
    def aqua_vectors(self) -> str:
        return pulumi.get(self, "aqua_vectors")

    @property
    @pulumi.getter(name="auditEventsCount")
    def audit_events_count(self) -> int:
        return pulumi.get(self, "audit_events_count")

    @property
    @pulumi.getter(name="blockEventsCount")
    def block_events_count(self) -> int:
        return pulumi.get(self, "block_events_count")

    @property
    @pulumi.getter
    def classification(self) -> str:
        return pulumi.get(self, "classification")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def digest(self) -> str:
        """
        The content digest of the image.
        """
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter(name="exploitReference")
    def exploit_reference(self) -> str:
        return pulumi.get(self, "exploit_reference")

    @property
    @pulumi.getter(name="exploitType")
    def exploit_type(self) -> str:
        return pulumi.get(self, "exploit_type")

    @property
    @pulumi.getter(name="firstFoundDate")
    def first_found_date(self) -> str:
        return pulumi.get(self, "first_found_date")

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> str:
        return pulumi.get(self, "fix_version")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="lastFoundDate")
    def last_found_date(self) -> str:
        return pulumi.get(self, "last_found_date")

    @property
    @pulumi.getter(name="modificationDate")
    def modification_date(self) -> str:
        return pulumi.get(self, "modification_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nvdCvss2Score")
    def nvd_cvss2_score(self) -> float:
        return pulumi.get(self, "nvd_cvss2_score")

    @property
    @pulumi.getter(name="nvdCvss2Vectors")
    def nvd_cvss2_vectors(self) -> str:
        return pulumi.get(self, "nvd_cvss2_vectors")

    @property
    @pulumi.getter(name="nvdCvss3Score")
    def nvd_cvss3_score(self) -> float:
        return pulumi.get(self, "nvd_cvss3_score")

    @property
    @pulumi.getter(name="nvdCvss3Severity")
    def nvd_cvss3_severity(self) -> str:
        return pulumi.get(self, "nvd_cvss3_severity")

    @property
    @pulumi.getter(name="nvdCvss3Vectors")
    def nvd_cvss3_vectors(self) -> str:
        return pulumi.get(self, "nvd_cvss3_vectors")

    @property
    @pulumi.getter(name="nvdSeverity")
    def nvd_severity(self) -> str:
        return pulumi.get(self, "nvd_severity")

    @property
    @pulumi.getter(name="nvdUrl")
    def nvd_url(self) -> str:
        return pulumi.get(self, "nvd_url")

    @property
    @pulumi.getter
    def os(self) -> str:
        """
        The operating system detected in the image
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> str:
        """
        The version of the OS detected in the image.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter
    def permission(self) -> str:
        """
        Permission of the image.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="publishDate")
    def publish_date(self) -> str:
        return pulumi.get(self, "publish_date")

    @property
    @pulumi.getter
    def registry(self) -> str:
        """
        The name of the registry where the image is stored.
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter
    def repository(self) -> str:
        """
        The name of the image's repository.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter(name="resourceArchitecture")
    def resource_architecture(self) -> str:
        return pulumi.get(self, "resource_architecture")

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> str:
        return pulumi.get(self, "resource_cpe")

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> str:
        return pulumi.get(self, "resource_format")

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> str:
        return pulumi.get(self, "resource_hash")

    @property
    @pulumi.getter(name="resourceLicenses")
    def resource_licenses(self) -> Sequence[str]:
        return pulumi.get(self, "resource_licenses")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> str:
        return pulumi.get(self, "resource_path")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> str:
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter(name="severityClassification")
    def severity_classification(self) -> str:
        return pulumi.get(self, "severity_classification")

    @property
    @pulumi.getter
    def solution(self) -> str:
        return pulumi.get(self, "solution")

    @property
    @pulumi.getter(name="temporalVector")
    def temporal_vector(self) -> str:
        return pulumi.get(self, "temporal_vector")

    @property
    @pulumi.getter(name="vPatchAppliedBy")
    def v_patch_applied_by(self) -> str:
        return pulumi.get(self, "v_patch_applied_by")

    @property
    @pulumi.getter(name="vPatchAppliedOn")
    def v_patch_applied_on(self) -> str:
        return pulumi.get(self, "v_patch_applied_on")

    @property
    @pulumi.getter(name="vPatchEnforcedBy")
    def v_patch_enforced_by(self) -> str:
        return pulumi.get(self, "v_patch_enforced_by")

    @property
    @pulumi.getter(name="vPatchEnforcedOn")
    def v_patch_enforced_on(self) -> str:
        return pulumi.get(self, "v_patch_enforced_on")

    @property
    @pulumi.getter(name="vPatchPolicyEnforce")
    def v_patch_policy_enforce(self) -> bool:
        return pulumi.get(self, "v_patch_policy_enforce")

    @property
    @pulumi.getter(name="vPatchPolicyName")
    def v_patch_policy_name(self) -> str:
        return pulumi.get(self, "v_patch_policy_name")

    @property
    @pulumi.getter(name="vPatchRevertedBy")
    def v_patch_reverted_by(self) -> str:
        return pulumi.get(self, "v_patch_reverted_by")

    @property
    @pulumi.getter(name="vPatchRevertedOn")
    def v_patch_reverted_on(self) -> str:
        return pulumi.get(self, "v_patch_reverted_on")

    @property
    @pulumi.getter(name="vPatchStatus")
    def v_patch_status(self) -> str:
        return pulumi.get(self, "v_patch_status")

    @property
    @pulumi.getter(name="vendorCvss2Score")
    def vendor_cvss2_score(self) -> float:
        return pulumi.get(self, "vendor_cvss2_score")

    @property
    @pulumi.getter(name="vendorCvss2Vectors")
    def vendor_cvss2_vectors(self) -> str:
        return pulumi.get(self, "vendor_cvss2_vectors")

    @property
    @pulumi.getter(name="vendorSeverity")
    def vendor_severity(self) -> str:
        return pulumi.get(self, "vendor_severity")

    @property
    @pulumi.getter(name="vendorStatement")
    def vendor_statement(self) -> str:
        return pulumi.get(self, "vendor_statement")

    @property
    @pulumi.getter(name="vendorUrl")
    def vendor_url(self) -> str:
        return pulumi.get(self, "vendor_url")


@pulumi.output_type
class GetPermissionsSetsPermissionsSetResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 author: str,
                 description: str,
                 is_super: bool,
                 name: str,
                 ui_access: bool,
                 updated_at: str):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_super", is_super)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ui_access", ui_access)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def author(self) -> str:
        return pulumi.get(self, "author")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSuper")
    def is_super(self) -> bool:
        return pulumi.get(self, "is_super")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="uiAccess")
    def ui_access(self) -> bool:
        return pulumi.get(self, "ui_access")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetRolesRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 permission: str,
                 scopes: Sequence[str],
                 updated_at: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetServiceScopeVariableResult(dict):
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersSaasUserResult(dict):
    def __init__(__self__, *,
                 account_admin: bool,
                 confirmed: bool,
                 created: str,
                 csp_roles: Sequence[str],
                 dashboard: bool,
                 email: str,
                 groups: Sequence['outputs.GetUsersSaasUserGroupResult'],
                 logins: Sequence['outputs.GetUsersSaasUserLoginResult'],
                 multiaccount: bool,
                 password_reset: bool,
                 provider: str,
                 send_announcements: bool,
                 send_new_plugins: bool,
                 send_new_risks: bool,
                 send_scan_results: bool,
                 user_id: str):
        pulumi.set(__self__, "account_admin", account_admin)
        pulumi.set(__self__, "confirmed", confirmed)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "csp_roles", csp_roles)
        pulumi.set(__self__, "dashboard", dashboard)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "logins", logins)
        pulumi.set(__self__, "multiaccount", multiaccount)
        pulumi.set(__self__, "password_reset", password_reset)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "send_announcements", send_announcements)
        pulumi.set(__self__, "send_new_plugins", send_new_plugins)
        pulumi.set(__self__, "send_new_risks", send_new_risks)
        pulumi.set(__self__, "send_scan_results", send_scan_results)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accountAdmin")
    def account_admin(self) -> bool:
        return pulumi.get(self, "account_admin")

    @property
    @pulumi.getter
    def confirmed(self) -> bool:
        return pulumi.get(self, "confirmed")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="cspRoles")
    def csp_roles(self) -> Sequence[str]:
        return pulumi.get(self, "csp_roles")

    @property
    @pulumi.getter
    def dashboard(self) -> bool:
        return pulumi.get(self, "dashboard")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetUsersSaasUserGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def logins(self) -> Sequence['outputs.GetUsersSaasUserLoginResult']:
        return pulumi.get(self, "logins")

    @property
    @pulumi.getter
    def multiaccount(self) -> bool:
        return pulumi.get(self, "multiaccount")

    @property
    @pulumi.getter(name="passwordReset")
    def password_reset(self) -> bool:
        return pulumi.get(self, "password_reset")

    @property
    @pulumi.getter
    def provider(self) -> str:
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="sendAnnouncements")
    def send_announcements(self) -> bool:
        return pulumi.get(self, "send_announcements")

    @property
    @pulumi.getter(name="sendNewPlugins")
    def send_new_plugins(self) -> bool:
        return pulumi.get(self, "send_new_plugins")

    @property
    @pulumi.getter(name="sendNewRisks")
    def send_new_risks(self) -> bool:
        return pulumi.get(self, "send_new_risks")

    @property
    @pulumi.getter(name="sendScanResults")
    def send_scan_results(self) -> bool:
        return pulumi.get(self, "send_scan_results")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetUsersSaasUserGroupResult(dict):
    def __init__(__self__, *,
                 created: str,
                 id: int,
                 name: str):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUsersSaasUserLoginResult(dict):
    def __init__(__self__, *,
                 created: str,
                 id: int,
                 ip_address: str,
                 user_id: int):
        """
        :param int id: The ID of this resource.
        """
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> int:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 email: str,
                 first_time: bool,
                 is_super: bool,
                 name: str,
                 plan: str,
                 role: str,
                 roles: Sequence[str],
                 type: str,
                 ui_access: bool,
                 user_id: str):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_time", first_time)
        pulumi.set(__self__, "is_super", is_super)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "roles", roles)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "ui_access", ui_access)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstTime")
    def first_time(self) -> bool:
        return pulumi.get(self, "first_time")

    @property
    @pulumi.getter(name="isSuper")
    def is_super(self) -> bool:
        return pulumi.get(self, "is_super")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> str:
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uiAccess")
    def ui_access(self) -> bool:
        return pulumi.get(self, "ui_access")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")


