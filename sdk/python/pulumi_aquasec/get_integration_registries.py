# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIntegrationRegistriesResult',
    'AwaitableGetIntegrationRegistriesResult',
    'get_integration_registries',
    'get_integration_registries_output',
]

@pulumi.output_type
class GetIntegrationRegistriesResult:
    """
    A collection of values returned by getIntegrationRegistries.
    """
    def __init__(__self__, auto_pull=None, auto_pull_max=None, auto_pull_time=None, id=None, name=None, password=None, prefixes=None, type=None, url=None, username=None):
        if auto_pull and not isinstance(auto_pull, bool):
            raise TypeError("Expected argument 'auto_pull' to be a bool")
        pulumi.set(__self__, "auto_pull", auto_pull)
        if auto_pull_max and not isinstance(auto_pull_max, int):
            raise TypeError("Expected argument 'auto_pull_max' to be a int")
        pulumi.set(__self__, "auto_pull_max", auto_pull_max)
        if auto_pull_time and not isinstance(auto_pull_time, str):
            raise TypeError("Expected argument 'auto_pull_time' to be a str")
        pulumi.set(__self__, "auto_pull_time", auto_pull_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if prefixes and not isinstance(prefixes, list):
            raise TypeError("Expected argument 'prefixes' to be a list")
        pulumi.set(__self__, "prefixes", prefixes)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="autoPull")
    def auto_pull(self) -> bool:
        return pulumi.get(self, "auto_pull")

    @property
    @pulumi.getter(name="autoPullMax")
    def auto_pull_max(self) -> int:
        return pulumi.get(self, "auto_pull_max")

    @property
    @pulumi.getter(name="autoPullTime")
    def auto_pull_time(self) -> str:
        return pulumi.get(self, "auto_pull_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def prefixes(self) -> Sequence[str]:
        return pulumi.get(self, "prefixes")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


class AwaitableGetIntegrationRegistriesResult(GetIntegrationRegistriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntegrationRegistriesResult(
            auto_pull=self.auto_pull,
            auto_pull_max=self.auto_pull_max,
            auto_pull_time=self.auto_pull_time,
            id=self.id,
            name=self.name,
            password=self.password,
            prefixes=self.prefixes,
            type=self.type,
            url=self.url,
            username=self.username)


def get_integration_registries(name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIntegrationRegistriesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aquasec:index/getIntegrationRegistries:getIntegrationRegistries', __args__, opts=opts, typ=GetIntegrationRegistriesResult).value

    return AwaitableGetIntegrationRegistriesResult(
        auto_pull=__ret__.auto_pull,
        auto_pull_max=__ret__.auto_pull_max,
        auto_pull_time=__ret__.auto_pull_time,
        id=__ret__.id,
        name=__ret__.name,
        password=__ret__.password,
        prefixes=__ret__.prefixes,
        type=__ret__.type,
        url=__ret__.url,
        username=__ret__.username)


@_utilities.lift_output_func(get_integration_registries)
def get_integration_registries_output(name: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIntegrationRegistriesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
