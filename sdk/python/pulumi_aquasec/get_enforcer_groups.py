# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetEnforcerGroupsResult',
    'AwaitableGetEnforcerGroupsResult',
    'get_enforcer_groups',
    'get_enforcer_groups_output',
]

@pulumi.output_type
class GetEnforcerGroupsResult:
    """
    A collection of values returned by getEnforcerGroups.
    """
    def __init__(__self__, admission_control=None, allow_kube_enforcer_audit=None, allowed_applications=None, allowed_labels=None, allowed_registries=None, antivirus_protection=None, aqua_version=None, audit_all=None, auto_copy_secrets=None, auto_discover_configure_registries=None, auto_discovery_enabled=None, auto_scan_discovered_images_running_containers=None, behavioral_engine=None, block_admission_control=None, commands=None, connected_count=None, container_activity_protection=None, container_antivirus_protection=None, description=None, disconnected_count=None, enforce=None, enforcer_image_name=None, gateway_address=None, gateway_name=None, gateways=None, group_id=None, high_vulns=None, host_assurance=None, host_behavioral_engine=None, host_network_protection=None, host_os=None, host_protection=None, host_user_protection=None, hosts_count=None, id=None, image_assurance=None, install_command=None, kube_bench_image_name=None, last_update=None, logical_name=None, low_vulns=None, med_vulns=None, micro_enforcer_certs_secrets_name=None, micro_enforcer_image_name=None, micro_enforcer_injection=None, micro_enforcer_secrets_name=None, neg_vulns=None, network_activity_protection=None, network_protection=None, orchestrators=None, pas_deployment_link=None, permission=None, risk_explorer_auto_discovery=None, runtime_policy_name=None, runtime_type=None, sync_host_images=None, syscall_enabled=None, token=None, type=None, user_access_control=None):
        if admission_control and not isinstance(admission_control, bool):
            raise TypeError("Expected argument 'admission_control' to be a bool")
        pulumi.set(__self__, "admission_control", admission_control)
        if allow_kube_enforcer_audit and not isinstance(allow_kube_enforcer_audit, bool):
            raise TypeError("Expected argument 'allow_kube_enforcer_audit' to be a bool")
        pulumi.set(__self__, "allow_kube_enforcer_audit", allow_kube_enforcer_audit)
        if allowed_applications and not isinstance(allowed_applications, list):
            raise TypeError("Expected argument 'allowed_applications' to be a list")
        pulumi.set(__self__, "allowed_applications", allowed_applications)
        if allowed_labels and not isinstance(allowed_labels, list):
            raise TypeError("Expected argument 'allowed_labels' to be a list")
        pulumi.set(__self__, "allowed_labels", allowed_labels)
        if allowed_registries and not isinstance(allowed_registries, list):
            raise TypeError("Expected argument 'allowed_registries' to be a list")
        pulumi.set(__self__, "allowed_registries", allowed_registries)
        if antivirus_protection and not isinstance(antivirus_protection, bool):
            raise TypeError("Expected argument 'antivirus_protection' to be a bool")
        pulumi.set(__self__, "antivirus_protection", antivirus_protection)
        if aqua_version and not isinstance(aqua_version, str):
            raise TypeError("Expected argument 'aqua_version' to be a str")
        pulumi.set(__self__, "aqua_version", aqua_version)
        if audit_all and not isinstance(audit_all, bool):
            raise TypeError("Expected argument 'audit_all' to be a bool")
        pulumi.set(__self__, "audit_all", audit_all)
        if auto_copy_secrets and not isinstance(auto_copy_secrets, bool):
            raise TypeError("Expected argument 'auto_copy_secrets' to be a bool")
        pulumi.set(__self__, "auto_copy_secrets", auto_copy_secrets)
        if auto_discover_configure_registries and not isinstance(auto_discover_configure_registries, bool):
            raise TypeError("Expected argument 'auto_discover_configure_registries' to be a bool")
        pulumi.set(__self__, "auto_discover_configure_registries", auto_discover_configure_registries)
        if auto_discovery_enabled and not isinstance(auto_discovery_enabled, bool):
            raise TypeError("Expected argument 'auto_discovery_enabled' to be a bool")
        pulumi.set(__self__, "auto_discovery_enabled", auto_discovery_enabled)
        if auto_scan_discovered_images_running_containers and not isinstance(auto_scan_discovered_images_running_containers, bool):
            raise TypeError("Expected argument 'auto_scan_discovered_images_running_containers' to be a bool")
        pulumi.set(__self__, "auto_scan_discovered_images_running_containers", auto_scan_discovered_images_running_containers)
        if behavioral_engine and not isinstance(behavioral_engine, bool):
            raise TypeError("Expected argument 'behavioral_engine' to be a bool")
        pulumi.set(__self__, "behavioral_engine", behavioral_engine)
        if block_admission_control and not isinstance(block_admission_control, bool):
            raise TypeError("Expected argument 'block_admission_control' to be a bool")
        pulumi.set(__self__, "block_admission_control", block_admission_control)
        if commands and not isinstance(commands, list):
            raise TypeError("Expected argument 'commands' to be a list")
        pulumi.set(__self__, "commands", commands)
        if connected_count and not isinstance(connected_count, int):
            raise TypeError("Expected argument 'connected_count' to be a int")
        pulumi.set(__self__, "connected_count", connected_count)
        if container_activity_protection and not isinstance(container_activity_protection, bool):
            raise TypeError("Expected argument 'container_activity_protection' to be a bool")
        pulumi.set(__self__, "container_activity_protection", container_activity_protection)
        if container_antivirus_protection and not isinstance(container_antivirus_protection, bool):
            raise TypeError("Expected argument 'container_antivirus_protection' to be a bool")
        pulumi.set(__self__, "container_antivirus_protection", container_antivirus_protection)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disconnected_count and not isinstance(disconnected_count, int):
            raise TypeError("Expected argument 'disconnected_count' to be a int")
        pulumi.set(__self__, "disconnected_count", disconnected_count)
        if enforce and not isinstance(enforce, bool):
            raise TypeError("Expected argument 'enforce' to be a bool")
        pulumi.set(__self__, "enforce", enforce)
        if enforcer_image_name and not isinstance(enforcer_image_name, str):
            raise TypeError("Expected argument 'enforcer_image_name' to be a str")
        pulumi.set(__self__, "enforcer_image_name", enforcer_image_name)
        if gateway_address and not isinstance(gateway_address, str):
            raise TypeError("Expected argument 'gateway_address' to be a str")
        pulumi.set(__self__, "gateway_address", gateway_address)
        if gateway_name and not isinstance(gateway_name, str):
            raise TypeError("Expected argument 'gateway_name' to be a str")
        pulumi.set(__self__, "gateway_name", gateway_name)
        if gateways and not isinstance(gateways, list):
            raise TypeError("Expected argument 'gateways' to be a list")
        pulumi.set(__self__, "gateways", gateways)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if high_vulns and not isinstance(high_vulns, int):
            raise TypeError("Expected argument 'high_vulns' to be a int")
        pulumi.set(__self__, "high_vulns", high_vulns)
        if host_assurance and not isinstance(host_assurance, bool):
            raise TypeError("Expected argument 'host_assurance' to be a bool")
        pulumi.set(__self__, "host_assurance", host_assurance)
        if host_behavioral_engine and not isinstance(host_behavioral_engine, bool):
            raise TypeError("Expected argument 'host_behavioral_engine' to be a bool")
        pulumi.set(__self__, "host_behavioral_engine", host_behavioral_engine)
        if host_network_protection and not isinstance(host_network_protection, bool):
            raise TypeError("Expected argument 'host_network_protection' to be a bool")
        pulumi.set(__self__, "host_network_protection", host_network_protection)
        if host_os and not isinstance(host_os, str):
            raise TypeError("Expected argument 'host_os' to be a str")
        pulumi.set(__self__, "host_os", host_os)
        if host_protection and not isinstance(host_protection, bool):
            raise TypeError("Expected argument 'host_protection' to be a bool")
        pulumi.set(__self__, "host_protection", host_protection)
        if host_user_protection and not isinstance(host_user_protection, bool):
            raise TypeError("Expected argument 'host_user_protection' to be a bool")
        pulumi.set(__self__, "host_user_protection", host_user_protection)
        if hosts_count and not isinstance(hosts_count, int):
            raise TypeError("Expected argument 'hosts_count' to be a int")
        pulumi.set(__self__, "hosts_count", hosts_count)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_assurance and not isinstance(image_assurance, bool):
            raise TypeError("Expected argument 'image_assurance' to be a bool")
        pulumi.set(__self__, "image_assurance", image_assurance)
        if install_command and not isinstance(install_command, str):
            raise TypeError("Expected argument 'install_command' to be a str")
        pulumi.set(__self__, "install_command", install_command)
        if kube_bench_image_name and not isinstance(kube_bench_image_name, str):
            raise TypeError("Expected argument 'kube_bench_image_name' to be a str")
        pulumi.set(__self__, "kube_bench_image_name", kube_bench_image_name)
        if last_update and not isinstance(last_update, int):
            raise TypeError("Expected argument 'last_update' to be a int")
        pulumi.set(__self__, "last_update", last_update)
        if logical_name and not isinstance(logical_name, str):
            raise TypeError("Expected argument 'logical_name' to be a str")
        pulumi.set(__self__, "logical_name", logical_name)
        if low_vulns and not isinstance(low_vulns, int):
            raise TypeError("Expected argument 'low_vulns' to be a int")
        pulumi.set(__self__, "low_vulns", low_vulns)
        if med_vulns and not isinstance(med_vulns, int):
            raise TypeError("Expected argument 'med_vulns' to be a int")
        pulumi.set(__self__, "med_vulns", med_vulns)
        if micro_enforcer_certs_secrets_name and not isinstance(micro_enforcer_certs_secrets_name, str):
            raise TypeError("Expected argument 'micro_enforcer_certs_secrets_name' to be a str")
        pulumi.set(__self__, "micro_enforcer_certs_secrets_name", micro_enforcer_certs_secrets_name)
        if micro_enforcer_image_name and not isinstance(micro_enforcer_image_name, str):
            raise TypeError("Expected argument 'micro_enforcer_image_name' to be a str")
        pulumi.set(__self__, "micro_enforcer_image_name", micro_enforcer_image_name)
        if micro_enforcer_injection and not isinstance(micro_enforcer_injection, bool):
            raise TypeError("Expected argument 'micro_enforcer_injection' to be a bool")
        pulumi.set(__self__, "micro_enforcer_injection", micro_enforcer_injection)
        if micro_enforcer_secrets_name and not isinstance(micro_enforcer_secrets_name, str):
            raise TypeError("Expected argument 'micro_enforcer_secrets_name' to be a str")
        pulumi.set(__self__, "micro_enforcer_secrets_name", micro_enforcer_secrets_name)
        if neg_vulns and not isinstance(neg_vulns, int):
            raise TypeError("Expected argument 'neg_vulns' to be a int")
        pulumi.set(__self__, "neg_vulns", neg_vulns)
        if network_activity_protection and not isinstance(network_activity_protection, bool):
            raise TypeError("Expected argument 'network_activity_protection' to be a bool")
        pulumi.set(__self__, "network_activity_protection", network_activity_protection)
        if network_protection and not isinstance(network_protection, bool):
            raise TypeError("Expected argument 'network_protection' to be a bool")
        pulumi.set(__self__, "network_protection", network_protection)
        if orchestrators and not isinstance(orchestrators, list):
            raise TypeError("Expected argument 'orchestrators' to be a list")
        pulumi.set(__self__, "orchestrators", orchestrators)
        if pas_deployment_link and not isinstance(pas_deployment_link, str):
            raise TypeError("Expected argument 'pas_deployment_link' to be a str")
        pulumi.set(__self__, "pas_deployment_link", pas_deployment_link)
        if permission and not isinstance(permission, str):
            raise TypeError("Expected argument 'permission' to be a str")
        pulumi.set(__self__, "permission", permission)
        if risk_explorer_auto_discovery and not isinstance(risk_explorer_auto_discovery, bool):
            raise TypeError("Expected argument 'risk_explorer_auto_discovery' to be a bool")
        pulumi.set(__self__, "risk_explorer_auto_discovery", risk_explorer_auto_discovery)
        if runtime_policy_name and not isinstance(runtime_policy_name, str):
            raise TypeError("Expected argument 'runtime_policy_name' to be a str")
        pulumi.set(__self__, "runtime_policy_name", runtime_policy_name)
        if runtime_type and not isinstance(runtime_type, str):
            raise TypeError("Expected argument 'runtime_type' to be a str")
        pulumi.set(__self__, "runtime_type", runtime_type)
        if sync_host_images and not isinstance(sync_host_images, bool):
            raise TypeError("Expected argument 'sync_host_images' to be a bool")
        pulumi.set(__self__, "sync_host_images", sync_host_images)
        if syscall_enabled and not isinstance(syscall_enabled, bool):
            raise TypeError("Expected argument 'syscall_enabled' to be a bool")
        pulumi.set(__self__, "syscall_enabled", syscall_enabled)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if user_access_control and not isinstance(user_access_control, bool):
            raise TypeError("Expected argument 'user_access_control' to be a bool")
        pulumi.set(__self__, "user_access_control", user_access_control)

    @property
    @pulumi.getter(name="admissionControl")
    def admission_control(self) -> bool:
        return pulumi.get(self, "admission_control")

    @property
    @pulumi.getter(name="allowKubeEnforcerAudit")
    def allow_kube_enforcer_audit(self) -> bool:
        return pulumi.get(self, "allow_kube_enforcer_audit")

    @property
    @pulumi.getter(name="allowedApplications")
    def allowed_applications(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_applications")

    @property
    @pulumi.getter(name="allowedLabels")
    def allowed_labels(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_labels")

    @property
    @pulumi.getter(name="allowedRegistries")
    def allowed_registries(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_registries")

    @property
    @pulumi.getter(name="antivirusProtection")
    def antivirus_protection(self) -> bool:
        return pulumi.get(self, "antivirus_protection")

    @property
    @pulumi.getter(name="aquaVersion")
    def aqua_version(self) -> str:
        return pulumi.get(self, "aqua_version")

    @property
    @pulumi.getter(name="auditAll")
    def audit_all(self) -> bool:
        return pulumi.get(self, "audit_all")

    @property
    @pulumi.getter(name="autoCopySecrets")
    def auto_copy_secrets(self) -> bool:
        return pulumi.get(self, "auto_copy_secrets")

    @property
    @pulumi.getter(name="autoDiscoverConfigureRegistries")
    def auto_discover_configure_registries(self) -> bool:
        return pulumi.get(self, "auto_discover_configure_registries")

    @property
    @pulumi.getter(name="autoDiscoveryEnabled")
    def auto_discovery_enabled(self) -> bool:
        return pulumi.get(self, "auto_discovery_enabled")

    @property
    @pulumi.getter(name="autoScanDiscoveredImagesRunningContainers")
    def auto_scan_discovered_images_running_containers(self) -> bool:
        return pulumi.get(self, "auto_scan_discovered_images_running_containers")

    @property
    @pulumi.getter(name="behavioralEngine")
    def behavioral_engine(self) -> bool:
        return pulumi.get(self, "behavioral_engine")

    @property
    @pulumi.getter(name="blockAdmissionControl")
    def block_admission_control(self) -> bool:
        return pulumi.get(self, "block_admission_control")

    @property
    @pulumi.getter
    def commands(self) -> Sequence['outputs.GetEnforcerGroupsCommandResult']:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="connectedCount")
    def connected_count(self) -> int:
        return pulumi.get(self, "connected_count")

    @property
    @pulumi.getter(name="containerActivityProtection")
    def container_activity_protection(self) -> bool:
        return pulumi.get(self, "container_activity_protection")

    @property
    @pulumi.getter(name="containerAntivirusProtection")
    def container_antivirus_protection(self) -> bool:
        return pulumi.get(self, "container_antivirus_protection")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disconnectedCount")
    def disconnected_count(self) -> int:
        return pulumi.get(self, "disconnected_count")

    @property
    @pulumi.getter
    def enforce(self) -> bool:
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="enforcerImageName")
    def enforcer_image_name(self) -> str:
        return pulumi.get(self, "enforcer_image_name")

    @property
    @pulumi.getter(name="gatewayAddress")
    def gateway_address(self) -> str:
        return pulumi.get(self, "gateway_address")

    @property
    @pulumi.getter(name="gatewayName")
    def gateway_name(self) -> str:
        return pulumi.get(self, "gateway_name")

    @property
    @pulumi.getter
    def gateways(self) -> Sequence[str]:
        return pulumi.get(self, "gateways")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="highVulns")
    def high_vulns(self) -> int:
        return pulumi.get(self, "high_vulns")

    @property
    @pulumi.getter(name="hostAssurance")
    def host_assurance(self) -> bool:
        return pulumi.get(self, "host_assurance")

    @property
    @pulumi.getter(name="hostBehavioralEngine")
    def host_behavioral_engine(self) -> bool:
        return pulumi.get(self, "host_behavioral_engine")

    @property
    @pulumi.getter(name="hostNetworkProtection")
    def host_network_protection(self) -> bool:
        return pulumi.get(self, "host_network_protection")

    @property
    @pulumi.getter(name="hostOs")
    def host_os(self) -> str:
        return pulumi.get(self, "host_os")

    @property
    @pulumi.getter(name="hostProtection")
    def host_protection(self) -> bool:
        return pulumi.get(self, "host_protection")

    @property
    @pulumi.getter(name="hostUserProtection")
    def host_user_protection(self) -> bool:
        return pulumi.get(self, "host_user_protection")

    @property
    @pulumi.getter(name="hostsCount")
    def hosts_count(self) -> int:
        return pulumi.get(self, "hosts_count")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageAssurance")
    def image_assurance(self) -> bool:
        return pulumi.get(self, "image_assurance")

    @property
    @pulumi.getter(name="installCommand")
    def install_command(self) -> str:
        return pulumi.get(self, "install_command")

    @property
    @pulumi.getter(name="kubeBenchImageName")
    def kube_bench_image_name(self) -> str:
        return pulumi.get(self, "kube_bench_image_name")

    @property
    @pulumi.getter(name="lastUpdate")
    def last_update(self) -> int:
        return pulumi.get(self, "last_update")

    @property
    @pulumi.getter(name="logicalName")
    def logical_name(self) -> str:
        return pulumi.get(self, "logical_name")

    @property
    @pulumi.getter(name="lowVulns")
    def low_vulns(self) -> int:
        return pulumi.get(self, "low_vulns")

    @property
    @pulumi.getter(name="medVulns")
    def med_vulns(self) -> int:
        return pulumi.get(self, "med_vulns")

    @property
    @pulumi.getter(name="microEnforcerCertsSecretsName")
    def micro_enforcer_certs_secrets_name(self) -> str:
        return pulumi.get(self, "micro_enforcer_certs_secrets_name")

    @property
    @pulumi.getter(name="microEnforcerImageName")
    def micro_enforcer_image_name(self) -> str:
        return pulumi.get(self, "micro_enforcer_image_name")

    @property
    @pulumi.getter(name="microEnforcerInjection")
    def micro_enforcer_injection(self) -> bool:
        return pulumi.get(self, "micro_enforcer_injection")

    @property
    @pulumi.getter(name="microEnforcerSecretsName")
    def micro_enforcer_secrets_name(self) -> str:
        return pulumi.get(self, "micro_enforcer_secrets_name")

    @property
    @pulumi.getter(name="negVulns")
    def neg_vulns(self) -> int:
        return pulumi.get(self, "neg_vulns")

    @property
    @pulumi.getter(name="networkActivityProtection")
    def network_activity_protection(self) -> bool:
        return pulumi.get(self, "network_activity_protection")

    @property
    @pulumi.getter(name="networkProtection")
    def network_protection(self) -> bool:
        return pulumi.get(self, "network_protection")

    @property
    @pulumi.getter
    def orchestrators(self) -> Sequence['outputs.GetEnforcerGroupsOrchestratorResult']:
        return pulumi.get(self, "orchestrators")

    @property
    @pulumi.getter(name="pasDeploymentLink")
    def pas_deployment_link(self) -> str:
        return pulumi.get(self, "pas_deployment_link")

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="riskExplorerAutoDiscovery")
    def risk_explorer_auto_discovery(self) -> bool:
        return pulumi.get(self, "risk_explorer_auto_discovery")

    @property
    @pulumi.getter(name="runtimePolicyName")
    def runtime_policy_name(self) -> str:
        return pulumi.get(self, "runtime_policy_name")

    @property
    @pulumi.getter(name="runtimeType")
    def runtime_type(self) -> str:
        return pulumi.get(self, "runtime_type")

    @property
    @pulumi.getter(name="syncHostImages")
    def sync_host_images(self) -> bool:
        return pulumi.get(self, "sync_host_images")

    @property
    @pulumi.getter(name="syscallEnabled")
    def syscall_enabled(self) -> bool:
        return pulumi.get(self, "syscall_enabled")

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userAccessControl")
    def user_access_control(self) -> bool:
        return pulumi.get(self, "user_access_control")


class AwaitableGetEnforcerGroupsResult(GetEnforcerGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnforcerGroupsResult(
            admission_control=self.admission_control,
            allow_kube_enforcer_audit=self.allow_kube_enforcer_audit,
            allowed_applications=self.allowed_applications,
            allowed_labels=self.allowed_labels,
            allowed_registries=self.allowed_registries,
            antivirus_protection=self.antivirus_protection,
            aqua_version=self.aqua_version,
            audit_all=self.audit_all,
            auto_copy_secrets=self.auto_copy_secrets,
            auto_discover_configure_registries=self.auto_discover_configure_registries,
            auto_discovery_enabled=self.auto_discovery_enabled,
            auto_scan_discovered_images_running_containers=self.auto_scan_discovered_images_running_containers,
            behavioral_engine=self.behavioral_engine,
            block_admission_control=self.block_admission_control,
            commands=self.commands,
            connected_count=self.connected_count,
            container_activity_protection=self.container_activity_protection,
            container_antivirus_protection=self.container_antivirus_protection,
            description=self.description,
            disconnected_count=self.disconnected_count,
            enforce=self.enforce,
            enforcer_image_name=self.enforcer_image_name,
            gateway_address=self.gateway_address,
            gateway_name=self.gateway_name,
            gateways=self.gateways,
            group_id=self.group_id,
            high_vulns=self.high_vulns,
            host_assurance=self.host_assurance,
            host_behavioral_engine=self.host_behavioral_engine,
            host_network_protection=self.host_network_protection,
            host_os=self.host_os,
            host_protection=self.host_protection,
            host_user_protection=self.host_user_protection,
            hosts_count=self.hosts_count,
            id=self.id,
            image_assurance=self.image_assurance,
            install_command=self.install_command,
            kube_bench_image_name=self.kube_bench_image_name,
            last_update=self.last_update,
            logical_name=self.logical_name,
            low_vulns=self.low_vulns,
            med_vulns=self.med_vulns,
            micro_enforcer_certs_secrets_name=self.micro_enforcer_certs_secrets_name,
            micro_enforcer_image_name=self.micro_enforcer_image_name,
            micro_enforcer_injection=self.micro_enforcer_injection,
            micro_enforcer_secrets_name=self.micro_enforcer_secrets_name,
            neg_vulns=self.neg_vulns,
            network_activity_protection=self.network_activity_protection,
            network_protection=self.network_protection,
            orchestrators=self.orchestrators,
            pas_deployment_link=self.pas_deployment_link,
            permission=self.permission,
            risk_explorer_auto_discovery=self.risk_explorer_auto_discovery,
            runtime_policy_name=self.runtime_policy_name,
            runtime_type=self.runtime_type,
            sync_host_images=self.sync_host_images,
            syscall_enabled=self.syscall_enabled,
            token=self.token,
            type=self.type,
            user_access_control=self.user_access_control)


def get_enforcer_groups(group_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnforcerGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aquasec:index/getEnforcerGroups:getEnforcerGroups', __args__, opts=opts, typ=GetEnforcerGroupsResult).value

    return AwaitableGetEnforcerGroupsResult(
        admission_control=__ret__.admission_control,
        allow_kube_enforcer_audit=__ret__.allow_kube_enforcer_audit,
        allowed_applications=__ret__.allowed_applications,
        allowed_labels=__ret__.allowed_labels,
        allowed_registries=__ret__.allowed_registries,
        antivirus_protection=__ret__.antivirus_protection,
        aqua_version=__ret__.aqua_version,
        audit_all=__ret__.audit_all,
        auto_copy_secrets=__ret__.auto_copy_secrets,
        auto_discover_configure_registries=__ret__.auto_discover_configure_registries,
        auto_discovery_enabled=__ret__.auto_discovery_enabled,
        auto_scan_discovered_images_running_containers=__ret__.auto_scan_discovered_images_running_containers,
        behavioral_engine=__ret__.behavioral_engine,
        block_admission_control=__ret__.block_admission_control,
        commands=__ret__.commands,
        connected_count=__ret__.connected_count,
        container_activity_protection=__ret__.container_activity_protection,
        container_antivirus_protection=__ret__.container_antivirus_protection,
        description=__ret__.description,
        disconnected_count=__ret__.disconnected_count,
        enforce=__ret__.enforce,
        enforcer_image_name=__ret__.enforcer_image_name,
        gateway_address=__ret__.gateway_address,
        gateway_name=__ret__.gateway_name,
        gateways=__ret__.gateways,
        group_id=__ret__.group_id,
        high_vulns=__ret__.high_vulns,
        host_assurance=__ret__.host_assurance,
        host_behavioral_engine=__ret__.host_behavioral_engine,
        host_network_protection=__ret__.host_network_protection,
        host_os=__ret__.host_os,
        host_protection=__ret__.host_protection,
        host_user_protection=__ret__.host_user_protection,
        hosts_count=__ret__.hosts_count,
        id=__ret__.id,
        image_assurance=__ret__.image_assurance,
        install_command=__ret__.install_command,
        kube_bench_image_name=__ret__.kube_bench_image_name,
        last_update=__ret__.last_update,
        logical_name=__ret__.logical_name,
        low_vulns=__ret__.low_vulns,
        med_vulns=__ret__.med_vulns,
        micro_enforcer_certs_secrets_name=__ret__.micro_enforcer_certs_secrets_name,
        micro_enforcer_image_name=__ret__.micro_enforcer_image_name,
        micro_enforcer_injection=__ret__.micro_enforcer_injection,
        micro_enforcer_secrets_name=__ret__.micro_enforcer_secrets_name,
        neg_vulns=__ret__.neg_vulns,
        network_activity_protection=__ret__.network_activity_protection,
        network_protection=__ret__.network_protection,
        orchestrators=__ret__.orchestrators,
        pas_deployment_link=__ret__.pas_deployment_link,
        permission=__ret__.permission,
        risk_explorer_auto_discovery=__ret__.risk_explorer_auto_discovery,
        runtime_policy_name=__ret__.runtime_policy_name,
        runtime_type=__ret__.runtime_type,
        sync_host_images=__ret__.sync_host_images,
        syscall_enabled=__ret__.syscall_enabled,
        token=__ret__.token,
        type=__ret__.type,
        user_access_control=__ret__.user_access_control)


@_utilities.lift_output_func(get_enforcer_groups)
def get_enforcer_groups_output(group_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnforcerGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
