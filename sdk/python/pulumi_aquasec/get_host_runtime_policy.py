# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetHostRuntimePolicyResult',
    'AwaitableGetHostRuntimePolicyResult',
    'get_host_runtime_policy',
    'get_host_runtime_policy_output',
]

@pulumi.output_type
class GetHostRuntimePolicyResult:
    """
    A collection of values returned by getHostRuntimePolicy.
    """
    def __init__(__self__, application_scopes=None, audit_all_os_user_activity=None, audit_full_command_arguments=None, author=None, blocked_files=None, description=None, enable_ip_reputation_security=None, enabled=None, enforce=None, enforce_after_days=None, file_integrity_monitorings=None, id=None, monitor_system_time_changes=None, monitor_windows_services=None, name=None, os_groups_alloweds=None, os_groups_blockeds=None, os_users_alloweds=None, os_users_blockeds=None, scope_expression=None, scope_variables=None, windows_registry_monitorings=None, windows_registry_protections=None):
        if application_scopes and not isinstance(application_scopes, list):
            raise TypeError("Expected argument 'application_scopes' to be a list")
        pulumi.set(__self__, "application_scopes", application_scopes)
        if audit_all_os_user_activity and not isinstance(audit_all_os_user_activity, bool):
            raise TypeError("Expected argument 'audit_all_os_user_activity' to be a bool")
        pulumi.set(__self__, "audit_all_os_user_activity", audit_all_os_user_activity)
        if audit_full_command_arguments and not isinstance(audit_full_command_arguments, bool):
            raise TypeError("Expected argument 'audit_full_command_arguments' to be a bool")
        pulumi.set(__self__, "audit_full_command_arguments", audit_full_command_arguments)
        if author and not isinstance(author, str):
            raise TypeError("Expected argument 'author' to be a str")
        pulumi.set(__self__, "author", author)
        if blocked_files and not isinstance(blocked_files, list):
            raise TypeError("Expected argument 'blocked_files' to be a list")
        pulumi.set(__self__, "blocked_files", blocked_files)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable_ip_reputation_security and not isinstance(enable_ip_reputation_security, bool):
            raise TypeError("Expected argument 'enable_ip_reputation_security' to be a bool")
        pulumi.set(__self__, "enable_ip_reputation_security", enable_ip_reputation_security)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if enforce and not isinstance(enforce, bool):
            raise TypeError("Expected argument 'enforce' to be a bool")
        pulumi.set(__self__, "enforce", enforce)
        if enforce_after_days and not isinstance(enforce_after_days, int):
            raise TypeError("Expected argument 'enforce_after_days' to be a int")
        pulumi.set(__self__, "enforce_after_days", enforce_after_days)
        if file_integrity_monitorings and not isinstance(file_integrity_monitorings, list):
            raise TypeError("Expected argument 'file_integrity_monitorings' to be a list")
        pulumi.set(__self__, "file_integrity_monitorings", file_integrity_monitorings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if monitor_system_time_changes and not isinstance(monitor_system_time_changes, bool):
            raise TypeError("Expected argument 'monitor_system_time_changes' to be a bool")
        pulumi.set(__self__, "monitor_system_time_changes", monitor_system_time_changes)
        if monitor_windows_services and not isinstance(monitor_windows_services, bool):
            raise TypeError("Expected argument 'monitor_windows_services' to be a bool")
        pulumi.set(__self__, "monitor_windows_services", monitor_windows_services)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_groups_alloweds and not isinstance(os_groups_alloweds, list):
            raise TypeError("Expected argument 'os_groups_alloweds' to be a list")
        pulumi.set(__self__, "os_groups_alloweds", os_groups_alloweds)
        if os_groups_blockeds and not isinstance(os_groups_blockeds, list):
            raise TypeError("Expected argument 'os_groups_blockeds' to be a list")
        pulumi.set(__self__, "os_groups_blockeds", os_groups_blockeds)
        if os_users_alloweds and not isinstance(os_users_alloweds, list):
            raise TypeError("Expected argument 'os_users_alloweds' to be a list")
        pulumi.set(__self__, "os_users_alloweds", os_users_alloweds)
        if os_users_blockeds and not isinstance(os_users_blockeds, list):
            raise TypeError("Expected argument 'os_users_blockeds' to be a list")
        pulumi.set(__self__, "os_users_blockeds", os_users_blockeds)
        if scope_expression and not isinstance(scope_expression, str):
            raise TypeError("Expected argument 'scope_expression' to be a str")
        pulumi.set(__self__, "scope_expression", scope_expression)
        if scope_variables and not isinstance(scope_variables, list):
            raise TypeError("Expected argument 'scope_variables' to be a list")
        pulumi.set(__self__, "scope_variables", scope_variables)
        if windows_registry_monitorings and not isinstance(windows_registry_monitorings, list):
            raise TypeError("Expected argument 'windows_registry_monitorings' to be a list")
        pulumi.set(__self__, "windows_registry_monitorings", windows_registry_monitorings)
        if windows_registry_protections and not isinstance(windows_registry_protections, list):
            raise TypeError("Expected argument 'windows_registry_protections' to be a list")
        pulumi.set(__self__, "windows_registry_protections", windows_registry_protections)

    @property
    @pulumi.getter(name="applicationScopes")
    def application_scopes(self) -> Sequence[str]:
        """
        Indicates the application scope of the service.
        """
        return pulumi.get(self, "application_scopes")

    @property
    @pulumi.getter(name="auditAllOsUserActivity")
    def audit_all_os_user_activity(self) -> bool:
        """
        If true, all process activity will be audited.
        """
        return pulumi.get(self, "audit_all_os_user_activity")

    @property
    @pulumi.getter(name="auditFullCommandArguments")
    def audit_full_command_arguments(self) -> bool:
        """
        If true, full command arguments will be audited.
        """
        return pulumi.get(self, "audit_full_command_arguments")

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Username of the account that created the service.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter(name="blockedFiles")
    def blocked_files(self) -> Sequence[str]:
        """
        List of files that are prevented from being read, modified and executed in the containers.
        """
        return pulumi.get(self, "blocked_files")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the host runtime policy
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableIpReputationSecurity")
    def enable_ip_reputation_security(self) -> bool:
        """
        If true, detect and prevent communication from containers to IP addresses known to have a bad reputation.
        """
        return pulumi.get(self, "enable_ip_reputation_security")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates if the runtime policy is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def enforce(self) -> bool:
        """
        Indicates that policy should effect container execution (not just for audit).
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter(name="enforceAfterDays")
    def enforce_after_days(self) -> int:
        """
        Indicates the number of days after which the runtime policy will be changed to enforce mode.
        """
        return pulumi.get(self, "enforce_after_days")

    @property
    @pulumi.getter(name="fileIntegrityMonitorings")
    def file_integrity_monitorings(self) -> Sequence['outputs.GetHostRuntimePolicyFileIntegrityMonitoringResult']:
        """
        Configuration for file integrity monitoring.
        """
        return pulumi.get(self, "file_integrity_monitorings")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorSystemTimeChanges")
    def monitor_system_time_changes(self) -> bool:
        """
        If true, system time changes will be monitored.
        """
        return pulumi.get(self, "monitor_system_time_changes")

    @property
    @pulumi.getter(name="monitorWindowsServices")
    def monitor_windows_services(self) -> bool:
        """
        If true, windows service operations will be monitored.
        """
        return pulumi.get(self, "monitor_windows_services")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the host runtime policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osGroupsAlloweds")
    def os_groups_alloweds(self) -> Sequence[str]:
        """
        List of OS (Linux or Windows) groups that are allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        """
        return pulumi.get(self, "os_groups_alloweds")

    @property
    @pulumi.getter(name="osGroupsBlockeds")
    def os_groups_blockeds(self) -> Sequence[str]:
        """
        List of OS (Linux or Windows) groups that are not allowed to authenticate to the host, and block authentication requests from all others. Groups can be either Linux groups or Windows AD groups.
        """
        return pulumi.get(self, "os_groups_blockeds")

    @property
    @pulumi.getter(name="osUsersAlloweds")
    def os_users_alloweds(self) -> Sequence[str]:
        """
        List of OS (Linux or Windows) users that are allowed to authenticate to the host, and block authentication requests from all others.
        """
        return pulumi.get(self, "os_users_alloweds")

    @property
    @pulumi.getter(name="osUsersBlockeds")
    def os_users_blockeds(self) -> Sequence[str]:
        """
        List of OS (Linux or Windows) users that are not allowed to authenticate to the host, and block authentication requests from all others.
        """
        return pulumi.get(self, "os_users_blockeds")

    @property
    @pulumi.getter(name="scopeExpression")
    def scope_expression(self) -> str:
        """
        Logical expression of how to compute the dependency of the scope variables.
        """
        return pulumi.get(self, "scope_expression")

    @property
    @pulumi.getter(name="scopeVariables")
    def scope_variables(self) -> Sequence['outputs.GetHostRuntimePolicyScopeVariableResult']:
        """
        List of scope attributes.
        """
        return pulumi.get(self, "scope_variables")

    @property
    @pulumi.getter(name="windowsRegistryMonitorings")
    def windows_registry_monitorings(self) -> Sequence['outputs.GetHostRuntimePolicyWindowsRegistryMonitoringResult']:
        """
        Configuration for windows registry monitoring.
        """
        return pulumi.get(self, "windows_registry_monitorings")

    @property
    @pulumi.getter(name="windowsRegistryProtections")
    def windows_registry_protections(self) -> Sequence['outputs.GetHostRuntimePolicyWindowsRegistryProtectionResult']:
        """
        Configuration for windows registry protection.
        """
        return pulumi.get(self, "windows_registry_protections")


class AwaitableGetHostRuntimePolicyResult(GetHostRuntimePolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHostRuntimePolicyResult(
            application_scopes=self.application_scopes,
            audit_all_os_user_activity=self.audit_all_os_user_activity,
            audit_full_command_arguments=self.audit_full_command_arguments,
            author=self.author,
            blocked_files=self.blocked_files,
            description=self.description,
            enable_ip_reputation_security=self.enable_ip_reputation_security,
            enabled=self.enabled,
            enforce=self.enforce,
            enforce_after_days=self.enforce_after_days,
            file_integrity_monitorings=self.file_integrity_monitorings,
            id=self.id,
            monitor_system_time_changes=self.monitor_system_time_changes,
            monitor_windows_services=self.monitor_windows_services,
            name=self.name,
            os_groups_alloweds=self.os_groups_alloweds,
            os_groups_blockeds=self.os_groups_blockeds,
            os_users_alloweds=self.os_users_alloweds,
            os_users_blockeds=self.os_users_blockeds,
            scope_expression=self.scope_expression,
            scope_variables=self.scope_variables,
            windows_registry_monitorings=self.windows_registry_monitorings,
            windows_registry_protections=self.windows_registry_protections)


def get_host_runtime_policy(name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHostRuntimePolicyResult:
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the host runtime policy
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aquasec:index/getHostRuntimePolicy:getHostRuntimePolicy', __args__, opts=opts, typ=GetHostRuntimePolicyResult).value

    return AwaitableGetHostRuntimePolicyResult(
        application_scopes=__ret__.application_scopes,
        audit_all_os_user_activity=__ret__.audit_all_os_user_activity,
        audit_full_command_arguments=__ret__.audit_full_command_arguments,
        author=__ret__.author,
        blocked_files=__ret__.blocked_files,
        description=__ret__.description,
        enable_ip_reputation_security=__ret__.enable_ip_reputation_security,
        enabled=__ret__.enabled,
        enforce=__ret__.enforce,
        enforce_after_days=__ret__.enforce_after_days,
        file_integrity_monitorings=__ret__.file_integrity_monitorings,
        id=__ret__.id,
        monitor_system_time_changes=__ret__.monitor_system_time_changes,
        monitor_windows_services=__ret__.monitor_windows_services,
        name=__ret__.name,
        os_groups_alloweds=__ret__.os_groups_alloweds,
        os_groups_blockeds=__ret__.os_groups_blockeds,
        os_users_alloweds=__ret__.os_users_alloweds,
        os_users_blockeds=__ret__.os_users_blockeds,
        scope_expression=__ret__.scope_expression,
        scope_variables=__ret__.scope_variables,
        windows_registry_monitorings=__ret__.windows_registry_monitorings,
        windows_registry_protections=__ret__.windows_registry_protections)


@_utilities.lift_output_func(get_host_runtime_policy)
def get_host_runtime_policy_output(name: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHostRuntimePolicyResult]:
    """
    Use this data source to access information about an existing resource.

    :param str name: Name of the host runtime policy
    """
    ...
