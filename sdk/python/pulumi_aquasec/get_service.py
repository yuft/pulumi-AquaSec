# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetServiceResult',
    'AwaitableGetServiceResult',
    'get_service',
    'get_service_output',
]

@pulumi.output_type
class GetServiceResult:
    """
    A collection of values returned by getService.
    """
    def __init__(__self__, application_scopes=None, author=None, containers_count=None, description=None, enforce=None, evaluated=None, id=None, is_registered=None, lastupdate=None, monitoring=None, name=None, not_evaluated_count=None, policies=None, priority=None, scope_expression=None, scope_variables=None, target=None, unregistered_count=None, vulnerabilities_high=None, vulnerabilities_low=None, vulnerabilities_malware=None, vulnerabilities_medium=None, vulnerabilities_negligible=None, vulnerabilities_score_average=None, vulnerabilities_sensitive=None, vulnerabilities_total=None):
        if application_scopes and not isinstance(application_scopes, list):
            raise TypeError("Expected argument 'application_scopes' to be a list")
        pulumi.set(__self__, "application_scopes", application_scopes)
        if author and not isinstance(author, str):
            raise TypeError("Expected argument 'author' to be a str")
        pulumi.set(__self__, "author", author)
        if containers_count and not isinstance(containers_count, int):
            raise TypeError("Expected argument 'containers_count' to be a int")
        pulumi.set(__self__, "containers_count", containers_count)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enforce and not isinstance(enforce, bool):
            raise TypeError("Expected argument 'enforce' to be a bool")
        pulumi.set(__self__, "enforce", enforce)
        if evaluated and not isinstance(evaluated, bool):
            raise TypeError("Expected argument 'evaluated' to be a bool")
        pulumi.set(__self__, "evaluated", evaluated)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_registered and not isinstance(is_registered, bool):
            raise TypeError("Expected argument 'is_registered' to be a bool")
        pulumi.set(__self__, "is_registered", is_registered)
        if lastupdate and not isinstance(lastupdate, int):
            raise TypeError("Expected argument 'lastupdate' to be a int")
        pulumi.set(__self__, "lastupdate", lastupdate)
        if monitoring and not isinstance(monitoring, bool):
            raise TypeError("Expected argument 'monitoring' to be a bool")
        pulumi.set(__self__, "monitoring", monitoring)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if not_evaluated_count and not isinstance(not_evaluated_count, int):
            raise TypeError("Expected argument 'not_evaluated_count' to be a int")
        pulumi.set(__self__, "not_evaluated_count", not_evaluated_count)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if scope_expression and not isinstance(scope_expression, str):
            raise TypeError("Expected argument 'scope_expression' to be a str")
        pulumi.set(__self__, "scope_expression", scope_expression)
        if scope_variables and not isinstance(scope_variables, list):
            raise TypeError("Expected argument 'scope_variables' to be a list")
        pulumi.set(__self__, "scope_variables", scope_variables)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if unregistered_count and not isinstance(unregistered_count, int):
            raise TypeError("Expected argument 'unregistered_count' to be a int")
        pulumi.set(__self__, "unregistered_count", unregistered_count)
        if vulnerabilities_high and not isinstance(vulnerabilities_high, int):
            raise TypeError("Expected argument 'vulnerabilities_high' to be a int")
        pulumi.set(__self__, "vulnerabilities_high", vulnerabilities_high)
        if vulnerabilities_low and not isinstance(vulnerabilities_low, int):
            raise TypeError("Expected argument 'vulnerabilities_low' to be a int")
        pulumi.set(__self__, "vulnerabilities_low", vulnerabilities_low)
        if vulnerabilities_malware and not isinstance(vulnerabilities_malware, int):
            raise TypeError("Expected argument 'vulnerabilities_malware' to be a int")
        pulumi.set(__self__, "vulnerabilities_malware", vulnerabilities_malware)
        if vulnerabilities_medium and not isinstance(vulnerabilities_medium, int):
            raise TypeError("Expected argument 'vulnerabilities_medium' to be a int")
        pulumi.set(__self__, "vulnerabilities_medium", vulnerabilities_medium)
        if vulnerabilities_negligible and not isinstance(vulnerabilities_negligible, int):
            raise TypeError("Expected argument 'vulnerabilities_negligible' to be a int")
        pulumi.set(__self__, "vulnerabilities_negligible", vulnerabilities_negligible)
        if vulnerabilities_score_average and not isinstance(vulnerabilities_score_average, int):
            raise TypeError("Expected argument 'vulnerabilities_score_average' to be a int")
        pulumi.set(__self__, "vulnerabilities_score_average", vulnerabilities_score_average)
        if vulnerabilities_sensitive and not isinstance(vulnerabilities_sensitive, int):
            raise TypeError("Expected argument 'vulnerabilities_sensitive' to be a int")
        pulumi.set(__self__, "vulnerabilities_sensitive", vulnerabilities_sensitive)
        if vulnerabilities_total and not isinstance(vulnerabilities_total, int):
            raise TypeError("Expected argument 'vulnerabilities_total' to be a int")
        pulumi.set(__self__, "vulnerabilities_total", vulnerabilities_total)

    @property
    @pulumi.getter(name="applicationScopes")
    def application_scopes(self) -> Sequence[str]:
        """
        Indicates the application scope of the service.
        """
        return pulumi.get(self, "application_scopes")

    @property
    @pulumi.getter
    def author(self) -> str:
        """
        Username of the account that created the service.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter(name="containersCount")
    def containers_count(self) -> int:
        """
        The number of containers associated with the service.
        """
        return pulumi.get(self, "containers_count")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A textual description of the service record; maximum 500 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enforce(self) -> bool:
        """
        Enforcement status of the service.
        """
        return pulumi.get(self, "enforce")

    @property
    @pulumi.getter
    def evaluated(self) -> bool:
        """
        Whether the service has been evaluated for security vulnerabilities.
        """
        return pulumi.get(self, "evaluated")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRegistered")
    def is_registered(self) -> bool:
        """
        Indicates if registered or not.
        """
        return pulumi.get(self, "is_registered")

    @property
    @pulumi.getter
    def lastupdate(self) -> int:
        """
        Timestamp of the last update in Unix time format.
        """
        return pulumi.get(self, "lastupdate")

    @property
    @pulumi.getter
    def monitoring(self) -> bool:
        """
        Indicates if monitoring is enabled or not
        """
        return pulumi.get(self, "monitoring")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service. It is recommended not to use whitespace characters in the name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notEvaluatedCount")
    def not_evaluated_count(self) -> int:
        """
        The number of container that are not evaluated.
        """
        return pulumi.get(self, "not_evaluated_count")

    @property
    @pulumi.getter
    def policies(self) -> Sequence[str]:
        """
        The service's policies; an array of container firewall policy names.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Rules priority, must be between 1-100.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="scopeExpression")
    def scope_expression(self) -> str:
        """
        Logical expression of how to compute the dependency of the scope variables.
        """
        return pulumi.get(self, "scope_expression")

    @property
    @pulumi.getter(name="scopeVariables")
    def scope_variables(self) -> Sequence['outputs.GetServiceScopeVariableResult']:
        """
        List of scope attributes.
        """
        return pulumi.get(self, "scope_variables")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        Type of the workload. container or host.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="unregisteredCount")
    def unregistered_count(self) -> int:
        """
        The number of containers allocated to the service that are not registered.
        """
        return pulumi.get(self, "unregistered_count")

    @property
    @pulumi.getter(name="vulnerabilitiesHigh")
    def vulnerabilities_high(self) -> int:
        """
        Number of high severity vulnerabilities.
        """
        return pulumi.get(self, "vulnerabilities_high")

    @property
    @pulumi.getter(name="vulnerabilitiesLow")
    def vulnerabilities_low(self) -> int:
        """
        Number of low severity vulnerabilities.
        """
        return pulumi.get(self, "vulnerabilities_low")

    @property
    @pulumi.getter(name="vulnerabilitiesMalware")
    def vulnerabilities_malware(self) -> int:
        """
        Number of malware.
        """
        return pulumi.get(self, "vulnerabilities_malware")

    @property
    @pulumi.getter(name="vulnerabilitiesMedium")
    def vulnerabilities_medium(self) -> int:
        """
        Number of medium severity vulnerabilities.
        """
        return pulumi.get(self, "vulnerabilities_medium")

    @property
    @pulumi.getter(name="vulnerabilitiesNegligible")
    def vulnerabilities_negligible(self) -> int:
        """
        Number of negligible vulnerabilities.
        """
        return pulumi.get(self, "vulnerabilities_negligible")

    @property
    @pulumi.getter(name="vulnerabilitiesScoreAverage")
    def vulnerabilities_score_average(self) -> int:
        """
        The CVSS average vulnerabilities score.
        """
        return pulumi.get(self, "vulnerabilities_score_average")

    @property
    @pulumi.getter(name="vulnerabilitiesSensitive")
    def vulnerabilities_sensitive(self) -> int:
        """
        Number of sensitive vulnerabilities.
        """
        return pulumi.get(self, "vulnerabilities_sensitive")

    @property
    @pulumi.getter(name="vulnerabilitiesTotal")
    def vulnerabilities_total(self) -> int:
        """
        Total number of vulnerabilities.
        """
        return pulumi.get(self, "vulnerabilities_total")


class AwaitableGetServiceResult(GetServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceResult(
            application_scopes=self.application_scopes,
            author=self.author,
            containers_count=self.containers_count,
            description=self.description,
            enforce=self.enforce,
            evaluated=self.evaluated,
            id=self.id,
            is_registered=self.is_registered,
            lastupdate=self.lastupdate,
            monitoring=self.monitoring,
            name=self.name,
            not_evaluated_count=self.not_evaluated_count,
            policies=self.policies,
            priority=self.priority,
            scope_expression=self.scope_expression,
            scope_variables=self.scope_variables,
            target=self.target,
            unregistered_count=self.unregistered_count,
            vulnerabilities_high=self.vulnerabilities_high,
            vulnerabilities_low=self.vulnerabilities_low,
            vulnerabilities_malware=self.vulnerabilities_malware,
            vulnerabilities_medium=self.vulnerabilities_medium,
            vulnerabilities_negligible=self.vulnerabilities_negligible,
            vulnerabilities_score_average=self.vulnerabilities_score_average,
            vulnerabilities_sensitive=self.vulnerabilities_sensitive,
            vulnerabilities_total=self.vulnerabilities_total)


def get_service(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceResult:
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the service. It is recommended not to use whitespace characters in the name.
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aquasec:index/getService:getService', __args__, opts=opts, typ=GetServiceResult).value

    return AwaitableGetServiceResult(
        application_scopes=__ret__.application_scopes,
        author=__ret__.author,
        containers_count=__ret__.containers_count,
        description=__ret__.description,
        enforce=__ret__.enforce,
        evaluated=__ret__.evaluated,
        id=__ret__.id,
        is_registered=__ret__.is_registered,
        lastupdate=__ret__.lastupdate,
        monitoring=__ret__.monitoring,
        name=__ret__.name,
        not_evaluated_count=__ret__.not_evaluated_count,
        policies=__ret__.policies,
        priority=__ret__.priority,
        scope_expression=__ret__.scope_expression,
        scope_variables=__ret__.scope_variables,
        target=__ret__.target,
        unregistered_count=__ret__.unregistered_count,
        vulnerabilities_high=__ret__.vulnerabilities_high,
        vulnerabilities_low=__ret__.vulnerabilities_low,
        vulnerabilities_malware=__ret__.vulnerabilities_malware,
        vulnerabilities_medium=__ret__.vulnerabilities_medium,
        vulnerabilities_negligible=__ret__.vulnerabilities_negligible,
        vulnerabilities_score_average=__ret__.vulnerabilities_score_average,
        vulnerabilities_sensitive=__ret__.vulnerabilities_sensitive,
        vulnerabilities_total=__ret__.vulnerabilities_total)


@_utilities.lift_output_func(get_service)
def get_service_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceResult]:
    """
    Use this data source to access information about an existing resource.

    :param str name: The name of the service. It is recommended not to use whitespace characters in the name.
    """
    ...
