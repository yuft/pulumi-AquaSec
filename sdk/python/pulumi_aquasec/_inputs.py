# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ApplicationScopeCategoryArgs',
    'ApplicationScopeCategoryArtifactArgs',
    'ApplicationScopeCategoryArtifactCfArgs',
    'ApplicationScopeCategoryArtifactCfVariableArgs',
    'ApplicationScopeCategoryArtifactFunctionArgs',
    'ApplicationScopeCategoryArtifactFunctionVariableArgs',
    'ApplicationScopeCategoryArtifactImageArgs',
    'ApplicationScopeCategoryArtifactImageVariableArgs',
    'ApplicationScopeCategoryEntityScopeArgs',
    'ApplicationScopeCategoryEntityScopeVariableArgs',
    'ApplicationScopeCategoryInfrastructureArgs',
    'ApplicationScopeCategoryInfrastructureKuberneteArgs',
    'ApplicationScopeCategoryInfrastructureKuberneteVariableArgs',
    'ApplicationScopeCategoryInfrastructureOArgs',
    'ApplicationScopeCategoryInfrastructureOVariableArgs',
    'ApplicationScopeCategoryWorkloadArgs',
    'ApplicationScopeCategoryWorkloadCfArgs',
    'ApplicationScopeCategoryWorkloadCfVariableArgs',
    'ApplicationScopeCategoryWorkloadKuberneteArgs',
    'ApplicationScopeCategoryWorkloadKuberneteVariableArgs',
    'ApplicationScopeCategoryWorkloadOArgs',
    'ApplicationScopeCategoryWorkloadOVariableArgs',
    'AquasecHostRuntimePolicyFileIntegrityMonitoringArgs',
    'AquasecHostRuntimePolicyScopeVariableArgs',
    'AquasecHostRuntimePolicyWindowsRegistryMonitoringArgs',
    'AquasecHostRuntimePolicyWindowsRegistryProtectionArgs',
    'ContainerRuntimePolicyScopeVariableArgs',
    'EnforcerGroupsCommandArgs',
    'EnforcerGroupsOrchestratorArgs',
    'FirewallPolicyInboundNetworkArgs',
    'FirewallPolicyOutboundNetworkArgs',
    'FunctionAssurancePolicyAutoScanTimeArgs',
    'FunctionAssurancePolicyCustomCheckArgs',
    'FunctionAssurancePolicyForbiddenLabelArgs',
    'FunctionAssurancePolicyPackagesBlackListArgs',
    'FunctionAssurancePolicyPackagesWhiteListArgs',
    'FunctionAssurancePolicyRequiredLabelArgs',
    'FunctionAssurancePolicyScopeArgs',
    'FunctionAssurancePolicyScopeVariableArgs',
    'FunctionAssurancePolicyTrustedBaseImageArgs',
    'FunctionRuntimePolicyScopeVariableArgs',
    'HostAssurancePolicyAutoScanTimeArgs',
    'HostAssurancePolicyCustomCheckArgs',
    'HostAssurancePolicyForbiddenLabelArgs',
    'HostAssurancePolicyPackagesBlackListArgs',
    'HostAssurancePolicyPackagesWhiteListArgs',
    'HostAssurancePolicyRequiredLabelArgs',
    'HostAssurancePolicyScopeArgs',
    'HostAssurancePolicyScopeVariableArgs',
    'HostAssurancePolicyTrustedBaseImageArgs',
    'ImageAssuranceChecksPerformedArgs',
    'ImageAssurancePolicyAutoScanTimeArgs',
    'ImageAssurancePolicyCustomCheckArgs',
    'ImageAssurancePolicyForbiddenLabelArgs',
    'ImageAssurancePolicyPackagesBlackListArgs',
    'ImageAssurancePolicyPackagesWhiteListArgs',
    'ImageAssurancePolicyRequiredLabelArgs',
    'ImageAssurancePolicyScopeArgs',
    'ImageAssurancePolicyScopeVariableArgs',
    'ImageAssurancePolicyTrustedBaseImageArgs',
    'ImageHistoryArgs',
    'ImageVulnerabilityArgs',
    'ServiceScopeVariableArgs',
    'UserSaasGroupArgs',
    'UserSaasLoginArgs',
    'GetApplicationScopeCategoryArgs',
    'GetApplicationScopeCategoryArtifactArgs',
    'GetApplicationScopeCategoryArtifactCfArgs',
    'GetApplicationScopeCategoryArtifactCfVariableArgs',
    'GetApplicationScopeCategoryArtifactFunctionArgs',
    'GetApplicationScopeCategoryArtifactFunctionVariableArgs',
    'GetApplicationScopeCategoryArtifactImageArgs',
    'GetApplicationScopeCategoryArtifactImageVariableArgs',
    'GetApplicationScopeCategoryEntityScopeArgs',
    'GetApplicationScopeCategoryEntityScopeVariableArgs',
    'GetApplicationScopeCategoryInfrastructureArgs',
    'GetApplicationScopeCategoryInfrastructureKuberneteArgs',
    'GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs',
    'GetApplicationScopeCategoryInfrastructureOArgs',
    'GetApplicationScopeCategoryInfrastructureOVariableArgs',
    'GetApplicationScopeCategoryWorkloadArgs',
    'GetApplicationScopeCategoryWorkloadCfArgs',
    'GetApplicationScopeCategoryWorkloadCfVariableArgs',
    'GetApplicationScopeCategoryWorkloadKuberneteArgs',
    'GetApplicationScopeCategoryWorkloadKuberneteVariableArgs',
    'GetApplicationScopeCategoryWorkloadOArgs',
    'GetApplicationScopeCategoryWorkloadOVariableArgs',
    'GetFirewallPolicyOutboundNetworkArgs',
]

@pulumi.input_type
class ApplicationScopeCategoryArgs:
    def __init__(__self__, *,
                 artifacts: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactArgs']]]] = None,
                 entity_scopes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeArgs']]]] = None,
                 infrastructures: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureArgs']]]] = None,
                 workloads: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadArgs']]]] = None):
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactArgs']]]]:
        return pulumi.get(self, "artifacts")

    @artifacts.setter
    def artifacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactArgs']]]]):
        pulumi.set(self, "artifacts", value)

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeArgs']]]]:
        return pulumi.get(self, "entity_scopes")

    @entity_scopes.setter
    def entity_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeArgs']]]]):
        pulumi.set(self, "entity_scopes", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureArgs']]]]:
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureArgs']]]]):
        pulumi.set(self, "infrastructures", value)

    @property
    @pulumi.getter
    def workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadArgs']]]]:
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadArgs']]]]):
        pulumi.set(self, "workloads", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactArgs:
    def __init__(__self__, *,
                 cfs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfArgs']]]] = None,
                 functions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionArgs']]]] = None,
                 images: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageArgs']]]] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfArgs']]]]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfArgs']]]]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def functions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionArgs']]]]:
        return pulumi.get(self, "functions")

    @functions.setter
    def functions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionArgs']]]]):
        pulumi.set(self, "functions", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageArgs']]]]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageArgs']]]]):
        pulumi.set(self, "images", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactCfArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactCfVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactCfVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactFunctionArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactFunctionVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactFunctionVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactImageArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryArtifactImageVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryArtifactImageVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryEntityScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryEntityScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryEntityScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureArgs:
    def __init__(__self__, *,
                 kubernetes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteArgs']]]] = None,
                 os: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOArgs']]]] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteArgs']]]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteArgs']]]]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOArgs']]]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOArgs']]]]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureKuberneteArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureOArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryInfrastructureOVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryInfrastructureOVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadArgs:
    def __init__(__self__, *,
                 cfs: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfArgs']]]] = None,
                 kubernetes: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteArgs']]]] = None,
                 os: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOArgs']]]] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfArgs']]]]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfArgs']]]]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteArgs']]]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteArgs']]]]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOArgs']]]]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOArgs']]]]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadCfArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadCfVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadCfVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadKuberneteArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadKuberneteVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadOArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationScopeCategoryWorkloadOVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ApplicationScopeCategoryWorkloadOVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AquasecHostRuntimePolicyFileIntegrityMonitoringArgs:
    def __init__(__self__, *,
                 excluded_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitor_attributes: Optional[pulumi.Input[bool]] = None,
                 monitor_create: Optional[pulumi.Input[bool]] = None,
                 monitor_delete: Optional[pulumi.Input[bool]] = None,
                 monitor_modify: Optional[pulumi.Input[bool]] = None,
                 monitor_read: Optional[pulumi.Input[bool]] = None,
                 monitored_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_paths: List of paths to be excluded from being monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_processes: List of processes to be excluded from being monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_users: List of users to be excluded from being monitored.
        :param pulumi.Input[bool] monitor_attributes: If true, add attributes operations will be monitored.
        :param pulumi.Input[bool] monitor_create: If true, create operations will be monitored.
        :param pulumi.Input[bool] monitor_delete: If true, deletion operations will be monitored.
        :param pulumi.Input[bool] monitor_modify: If true, modification operations will be monitored.
        :param pulumi.Input[bool] monitor_read: If true, read operations will be monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_paths: List of paths to be monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_processes: List of processes to be monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_users: List of users to be monitored.
        """
        if excluded_paths is not None:
            pulumi.set(__self__, "excluded_paths", excluded_paths)
        if excluded_processes is not None:
            pulumi.set(__self__, "excluded_processes", excluded_processes)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if monitor_attributes is not None:
            pulumi.set(__self__, "monitor_attributes", monitor_attributes)
        if monitor_create is not None:
            pulumi.set(__self__, "monitor_create", monitor_create)
        if monitor_delete is not None:
            pulumi.set(__self__, "monitor_delete", monitor_delete)
        if monitor_modify is not None:
            pulumi.set(__self__, "monitor_modify", monitor_modify)
        if monitor_read is not None:
            pulumi.set(__self__, "monitor_read", monitor_read)
        if monitored_paths is not None:
            pulumi.set(__self__, "monitored_paths", monitored_paths)
        if monitored_processes is not None:
            pulumi.set(__self__, "monitored_processes", monitored_processes)
        if monitored_users is not None:
            pulumi.set(__self__, "monitored_users", monitored_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_paths")

    @excluded_paths.setter
    def excluded_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_paths", value)

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_processes")

    @excluded_processes.setter
    def excluded_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_processes", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="monitorAttributes")
    def monitor_attributes(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, add attributes operations will be monitored.
        """
        return pulumi.get(self, "monitor_attributes")

    @monitor_attributes.setter
    def monitor_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_attributes", value)

    @property
    @pulumi.getter(name="monitorCreate")
    def monitor_create(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, create operations will be monitored.
        """
        return pulumi.get(self, "monitor_create")

    @monitor_create.setter
    def monitor_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_create", value)

    @property
    @pulumi.getter(name="monitorDelete")
    def monitor_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, deletion operations will be monitored.
        """
        return pulumi.get(self, "monitor_delete")

    @monitor_delete.setter
    def monitor_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_delete", value)

    @property
    @pulumi.getter(name="monitorModify")
    def monitor_modify(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, modification operations will be monitored.
        """
        return pulumi.get(self, "monitor_modify")

    @monitor_modify.setter
    def monitor_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_modify", value)

    @property
    @pulumi.getter(name="monitorRead")
    def monitor_read(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, read operations will be monitored.
        """
        return pulumi.get(self, "monitor_read")

    @monitor_read.setter
    def monitor_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_read", value)

    @property
    @pulumi.getter(name="monitoredPaths")
    def monitored_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_paths")

    @monitored_paths.setter
    def monitored_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_paths", value)

    @property
    @pulumi.getter(name="monitoredProcesses")
    def monitored_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of processes to be monitored.
        """
        return pulumi.get(self, "monitored_processes")

    @monitored_processes.setter
    def monitored_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_processes", value)

    @property
    @pulumi.getter(name="monitoredUsers")
    def monitored_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users to be monitored.
        """
        return pulumi.get(self, "monitored_users")

    @monitored_users.setter
    def monitored_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_users", value)


@pulumi.input_type
class AquasecHostRuntimePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AquasecHostRuntimePolicyWindowsRegistryMonitoringArgs:
    def __init__(__self__, *,
                 excluded_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitor_attributes: Optional[pulumi.Input[bool]] = None,
                 monitor_create: Optional[pulumi.Input[bool]] = None,
                 monitor_delete: Optional[pulumi.Input[bool]] = None,
                 monitor_modify: Optional[pulumi.Input[bool]] = None,
                 monitor_read: Optional[pulumi.Input[bool]] = None,
                 monitored_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitored_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_paths: List of paths to be excluded from being monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_processes: List of registry processes to be excluded from being monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_users: List of registry users to be excluded from being monitored.
        :param pulumi.Input[bool] monitor_attributes: If true, add attributes operations will be monitored.
        :param pulumi.Input[bool] monitor_create: If true, create operations will be monitored.
        :param pulumi.Input[bool] monitor_delete: If true, deletion operations will be monitored.
        :param pulumi.Input[bool] monitor_modify: If true, modification operations will be monitored.
        :param pulumi.Input[bool] monitor_read: If true, read operations will be monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_paths: List of paths to be monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_processes: List of registry processes to be monitored.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitored_users: List of registry users to be monitored.
        """
        if excluded_paths is not None:
            pulumi.set(__self__, "excluded_paths", excluded_paths)
        if excluded_processes is not None:
            pulumi.set(__self__, "excluded_processes", excluded_processes)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if monitor_attributes is not None:
            pulumi.set(__self__, "monitor_attributes", monitor_attributes)
        if monitor_create is not None:
            pulumi.set(__self__, "monitor_create", monitor_create)
        if monitor_delete is not None:
            pulumi.set(__self__, "monitor_delete", monitor_delete)
        if monitor_modify is not None:
            pulumi.set(__self__, "monitor_modify", monitor_modify)
        if monitor_read is not None:
            pulumi.set(__self__, "monitor_read", monitor_read)
        if monitored_paths is not None:
            pulumi.set(__self__, "monitored_paths", monitored_paths)
        if monitored_processes is not None:
            pulumi.set(__self__, "monitored_processes", monitored_processes)
        if monitored_users is not None:
            pulumi.set(__self__, "monitored_users", monitored_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_paths")

    @excluded_paths.setter
    def excluded_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_paths", value)

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry processes to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_processes")

    @excluded_processes.setter
    def excluded_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_processes", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry users to be excluded from being monitored.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="monitorAttributes")
    def monitor_attributes(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, add attributes operations will be monitored.
        """
        return pulumi.get(self, "monitor_attributes")

    @monitor_attributes.setter
    def monitor_attributes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_attributes", value)

    @property
    @pulumi.getter(name="monitorCreate")
    def monitor_create(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, create operations will be monitored.
        """
        return pulumi.get(self, "monitor_create")

    @monitor_create.setter
    def monitor_create(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_create", value)

    @property
    @pulumi.getter(name="monitorDelete")
    def monitor_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, deletion operations will be monitored.
        """
        return pulumi.get(self, "monitor_delete")

    @monitor_delete.setter
    def monitor_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_delete", value)

    @property
    @pulumi.getter(name="monitorModify")
    def monitor_modify(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, modification operations will be monitored.
        """
        return pulumi.get(self, "monitor_modify")

    @monitor_modify.setter
    def monitor_modify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_modify", value)

    @property
    @pulumi.getter(name="monitorRead")
    def monitor_read(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, read operations will be monitored.
        """
        return pulumi.get(self, "monitor_read")

    @monitor_read.setter
    def monitor_read(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_read", value)

    @property
    @pulumi.getter(name="monitoredPaths")
    def monitored_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of paths to be monitored.
        """
        return pulumi.get(self, "monitored_paths")

    @monitored_paths.setter
    def monitored_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_paths", value)

    @property
    @pulumi.getter(name="monitoredProcesses")
    def monitored_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry processes to be monitored.
        """
        return pulumi.get(self, "monitored_processes")

    @monitored_processes.setter
    def monitored_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_processes", value)

    @property
    @pulumi.getter(name="monitoredUsers")
    def monitored_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry users to be monitored.
        """
        return pulumi.get(self, "monitored_users")

    @monitored_users.setter
    def monitored_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitored_users", value)


@pulumi.input_type
class AquasecHostRuntimePolicyWindowsRegistryProtectionArgs:
    def __init__(__self__, *,
                 excluded_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_processes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protected_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_paths: List of registry paths to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_processes: List of registry processes to be excluded from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_users: List of registry paths to be users from being protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_paths: List of registry paths to be protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_processes: List of registry processes to be protected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protected_users: List of registry users to be protected.
        """
        if excluded_paths is not None:
            pulumi.set(__self__, "excluded_paths", excluded_paths)
        if excluded_processes is not None:
            pulumi.set(__self__, "excluded_processes", excluded_processes)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if protected_paths is not None:
            pulumi.set(__self__, "protected_paths", protected_paths)
        if protected_processes is not None:
            pulumi.set(__self__, "protected_processes", protected_processes)
        if protected_users is not None:
            pulumi.set(__self__, "protected_users", protected_users)

    @property
    @pulumi.getter(name="excludedPaths")
    def excluded_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be excluded from being protected.
        """
        return pulumi.get(self, "excluded_paths")

    @excluded_paths.setter
    def excluded_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_paths", value)

    @property
    @pulumi.getter(name="excludedProcesses")
    def excluded_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry processes to be excluded from being protected.
        """
        return pulumi.get(self, "excluded_processes")

    @excluded_processes.setter
    def excluded_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_processes", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be users from being protected.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="protectedPaths")
    def protected_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry paths to be protected.
        """
        return pulumi.get(self, "protected_paths")

    @protected_paths.setter
    def protected_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_paths", value)

    @property
    @pulumi.getter(name="protectedProcesses")
    def protected_processes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry processes to be protected.
        """
        return pulumi.get(self, "protected_processes")

    @protected_processes.setter
    def protected_processes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_processes", value)

    @property
    @pulumi.getter(name="protectedUsers")
    def protected_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of registry users to be protected.
        """
        return pulumi.get(self, "protected_users")

    @protected_users.setter
    def protected_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protected_users", value)


@pulumi.input_type
class ContainerRuntimePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnforcerGroupsCommandArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 kubernetes: Optional[pulumi.Input[str]] = None,
                 swarm: Optional[pulumi.Input[str]] = None,
                 windows: Optional[pulumi.Input[str]] = None):
        if default is not None:
            pulumi.set(__self__, "default", default)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if swarm is not None:
            pulumi.set(__self__, "swarm", swarm)
        if windows is not None:
            pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def swarm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "swarm")

    @swarm.setter
    def swarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "swarm", value)

    @property
    @pulumi.getter
    def windows(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "windows")

    @windows.setter
    def windows(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "windows", value)


@pulumi.input_type
class EnforcerGroupsOrchestratorArgs:
    def __init__(__self__, *,
                 master: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if master is not None:
            pulumi.set(__self__, "master", master)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FirewallPolicyInboundNetworkArgs:
    def __init__(__self__, *,
                 allow: pulumi.Input[bool],
                 port_range: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] allow: Indicates whether the specified resources are allowed to pass in data or requests.
        :param pulumi.Input[str] port_range: Range of ports affected by firewall.
        :param pulumi.Input[str] resource_type: Type of the resource
        :param pulumi.Input[str] resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> pulumi.Input[bool]:
        """
        Indicates whether the specified resources are allowed to pass in data or requests.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> pulumi.Input[str]:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class FirewallPolicyOutboundNetworkArgs:
    def __init__(__self__, *,
                 allow: pulumi.Input[bool],
                 port_range: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param pulumi.Input[str] port_range: Range of ports affected by firewall.
        :param pulumi.Input[str] resource_type: Type of the resource.
        :param pulumi.Input[str] resource: Information of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource_type", resource_type)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def allow(self) -> pulumi.Input[bool]:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> pulumi.Input[str]:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class FunctionAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class FunctionAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class FunctionAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class FunctionAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class FunctionAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class FunctionAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FunctionAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class FunctionRuntimePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class HostAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class HostAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class HostAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class HostAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['HostAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class HostAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class ImageAssuranceChecksPerformedArgs:
    def __init__(__self__, *,
                 assurance_type: Optional[pulumi.Input[str]] = None,
                 blocking: Optional[pulumi.Input[bool]] = None,
                 control: Optional[pulumi.Input[str]] = None,
                 dta_skipped: Optional[pulumi.Input[bool]] = None,
                 dta_skipped_reason: Optional[pulumi.Input[str]] = None,
                 failed: Optional[pulumi.Input[bool]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] dta_skipped: If DTA was skipped.
        :param pulumi.Input[str] dta_skipped_reason: The reason why DTA was skipped.
        """
        if assurance_type is not None:
            pulumi.set(__self__, "assurance_type", assurance_type)
        if blocking is not None:
            pulumi.set(__self__, "blocking", blocking)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if dta_skipped is not None:
            pulumi.set(__self__, "dta_skipped", dta_skipped)
        if dta_skipped_reason is not None:
            pulumi.set(__self__, "dta_skipped_reason", dta_skipped_reason)
        if failed is not None:
            pulumi.set(__self__, "failed", failed)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="assuranceType")
    def assurance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assurance_type")

    @assurance_type.setter
    def assurance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assurance_type", value)

    @property
    @pulumi.getter
    def blocking(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blocking")

    @blocking.setter
    def blocking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blocking", value)

    @property
    @pulumi.getter
    def control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control")

    @control.setter
    def control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control", value)

    @property
    @pulumi.getter(name="dtaSkipped")
    def dta_skipped(self) -> Optional[pulumi.Input[bool]]:
        """
        If DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped")

    @dta_skipped.setter
    def dta_skipped(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dta_skipped", value)

    @property
    @pulumi.getter(name="dtaSkippedReason")
    def dta_skipped_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason why DTA was skipped.
        """
        return pulumi.get(self, "dta_skipped_reason")

    @dta_skipped_reason.setter
    def dta_skipped_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dta_skipped_reason", value)

    @property
    @pulumi.getter
    def failed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "failed")

    @failed.setter
    def failed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "failed", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class ImageAssurancePolicyAutoScanTimeArgs:
    def __init__(__self__, *,
                 iteration: Optional[pulumi.Input[int]] = None,
                 iteration_type: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if iteration is not None:
            pulumi.set(__self__, "iteration", iteration)
        if iteration_type is not None:
            pulumi.set(__self__, "iteration_type", iteration_type)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def iteration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iteration")

    @iteration.setter
    def iteration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration", value)

    @property
    @pulumi.getter(name="iterationType")
    def iteration_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iteration_type")

    @iteration_type.setter
    def iteration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iteration_type", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class ImageAssurancePolicyCustomCheckArgs:
    def __init__(__self__, *,
                 author: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 snippet: Optional[pulumi.Input[str]] = None):
        if author is not None:
            pulumi.set(__self__, "author", author)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if snippet is not None:
            pulumi.set(__self__, "snippet", snippet)

    @property
    @pulumi.getter
    def author(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "author")

    @author.setter
    def author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "author", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def snippet(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snippet")

    @snippet.setter
    def snippet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snippet", value)


@pulumi.input_type
class ImageAssurancePolicyForbiddenLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageAssurancePolicyPackagesBlackListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class ImageAssurancePolicyPackagesWhiteListArgs:
    def __init__(__self__, *,
                 arch: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 epoch: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 version_range: Optional[pulumi.Input[str]] = None):
        if arch is not None:
            pulumi.set(__self__, "arch", arch)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if epoch is not None:
            pulumi.set(__self__, "epoch", epoch)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_range is not None:
            pulumi.set(__self__, "version_range", version_range)

    @property
    @pulumi.getter
    def arch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arch")

    @arch.setter
    def arch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arch", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def epoch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "epoch")

    @epoch.setter
    def epoch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "epoch", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="versionRange")
    def version_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version_range")

    @version_range.setter
    def version_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_range", value)


@pulumi.input_type
class ImageAssurancePolicyRequiredLabelArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageAssurancePolicyScopeArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Sequence[pulumi.Input['ImageAssurancePolicyScopeVariableArgs']]]] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageAssurancePolicyScopeVariableArgs']]]]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageAssurancePolicyScopeVariableArgs']]]]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class ImageAssurancePolicyScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageAssurancePolicyTrustedBaseImageArgs:
    def __init__(__self__, *,
                 imagename: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None):
        if imagename is not None:
            pulumi.set(__self__, "imagename", imagename)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)

    @property
    @pulumi.getter
    def imagename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imagename")

    @imagename.setter
    def imagename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imagename", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)


@pulumi.input_type
class ImageHistoryArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 created: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] comment: The image creation comment.
        :param pulumi.Input[str] created: The date and time when the image was registered.
        :param pulumi.Input[str] id: The ID of this resource.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        The image creation comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the image was registered.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class ImageVulnerabilityArgs:
    def __init__(__self__, *,
                 ack_author: Optional[pulumi.Input[str]] = None,
                 ack_comment: Optional[pulumi.Input[str]] = None,
                 ack_expiration_configured_at: Optional[pulumi.Input[str]] = None,
                 ack_expiration_configured_by: Optional[pulumi.Input[str]] = None,
                 ack_expiration_days: Optional[pulumi.Input[int]] = None,
                 ack_scope: Optional[pulumi.Input[str]] = None,
                 acknowledge_date: Optional[pulumi.Input[str]] = None,
                 ancestor_pkg: Optional[pulumi.Input[str]] = None,
                 aqua_score: Optional[pulumi.Input[float]] = None,
                 aqua_score_classification: Optional[pulumi.Input[str]] = None,
                 aqua_scoring_system: Optional[pulumi.Input[str]] = None,
                 aqua_severity: Optional[pulumi.Input[str]] = None,
                 aqua_severity_classification: Optional[pulumi.Input[str]] = None,
                 aqua_vectors: Optional[pulumi.Input[str]] = None,
                 audit_events_count: Optional[pulumi.Input[int]] = None,
                 block_events_count: Optional[pulumi.Input[int]] = None,
                 classification: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 digest: Optional[pulumi.Input[str]] = None,
                 exploit_reference: Optional[pulumi.Input[str]] = None,
                 exploit_type: Optional[pulumi.Input[str]] = None,
                 first_found_date: Optional[pulumi.Input[str]] = None,
                 fix_version: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 last_found_date: Optional[pulumi.Input[str]] = None,
                 modification_date: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nvd_cvss2_score: Optional[pulumi.Input[float]] = None,
                 nvd_cvss2_vectors: Optional[pulumi.Input[str]] = None,
                 nvd_cvss3_score: Optional[pulumi.Input[float]] = None,
                 nvd_cvss3_severity: Optional[pulumi.Input[str]] = None,
                 nvd_cvss3_vectors: Optional[pulumi.Input[str]] = None,
                 nvd_severity: Optional[pulumi.Input[str]] = None,
                 nvd_url: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 publish_date: Optional[pulumi.Input[str]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 resource_architecture: Optional[pulumi.Input[str]] = None,
                 resource_cpe: Optional[pulumi.Input[str]] = None,
                 resource_format: Optional[pulumi.Input[str]] = None,
                 resource_hash: Optional[pulumi.Input[str]] = None,
                 resource_licenses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 resource_path: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 resource_version: Optional[pulumi.Input[str]] = None,
                 severity_classification: Optional[pulumi.Input[str]] = None,
                 solution: Optional[pulumi.Input[str]] = None,
                 temporal_vector: Optional[pulumi.Input[str]] = None,
                 v_patch_applied_by: Optional[pulumi.Input[str]] = None,
                 v_patch_applied_on: Optional[pulumi.Input[str]] = None,
                 v_patch_enforced_by: Optional[pulumi.Input[str]] = None,
                 v_patch_enforced_on: Optional[pulumi.Input[str]] = None,
                 v_patch_policy_enforce: Optional[pulumi.Input[bool]] = None,
                 v_patch_policy_name: Optional[pulumi.Input[str]] = None,
                 v_patch_reverted_by: Optional[pulumi.Input[str]] = None,
                 v_patch_reverted_on: Optional[pulumi.Input[str]] = None,
                 v_patch_status: Optional[pulumi.Input[str]] = None,
                 vendor_cvss2_score: Optional[pulumi.Input[float]] = None,
                 vendor_cvss2_vectors: Optional[pulumi.Input[str]] = None,
                 vendor_severity: Optional[pulumi.Input[str]] = None,
                 vendor_statement: Optional[pulumi.Input[str]] = None,
                 vendor_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] digest: The content digest of the image.
        :param pulumi.Input[str] name: The name of the image.
        :param pulumi.Input[str] os: The operating system detected in the image
        :param pulumi.Input[str] os_version: The version of the OS detected in the image.
        :param pulumi.Input[str] permission: Permission of the image.
        :param pulumi.Input[str] registry: The name of the registry where the image is stored.
        :param pulumi.Input[str] repository: The name of the image's repository.
        """
        if ack_author is not None:
            pulumi.set(__self__, "ack_author", ack_author)
        if ack_comment is not None:
            pulumi.set(__self__, "ack_comment", ack_comment)
        if ack_expiration_configured_at is not None:
            pulumi.set(__self__, "ack_expiration_configured_at", ack_expiration_configured_at)
        if ack_expiration_configured_by is not None:
            pulumi.set(__self__, "ack_expiration_configured_by", ack_expiration_configured_by)
        if ack_expiration_days is not None:
            pulumi.set(__self__, "ack_expiration_days", ack_expiration_days)
        if ack_scope is not None:
            pulumi.set(__self__, "ack_scope", ack_scope)
        if acknowledge_date is not None:
            pulumi.set(__self__, "acknowledge_date", acknowledge_date)
        if ancestor_pkg is not None:
            pulumi.set(__self__, "ancestor_pkg", ancestor_pkg)
        if aqua_score is not None:
            pulumi.set(__self__, "aqua_score", aqua_score)
        if aqua_score_classification is not None:
            pulumi.set(__self__, "aqua_score_classification", aqua_score_classification)
        if aqua_scoring_system is not None:
            pulumi.set(__self__, "aqua_scoring_system", aqua_scoring_system)
        if aqua_severity is not None:
            pulumi.set(__self__, "aqua_severity", aqua_severity)
        if aqua_severity_classification is not None:
            pulumi.set(__self__, "aqua_severity_classification", aqua_severity_classification)
        if aqua_vectors is not None:
            pulumi.set(__self__, "aqua_vectors", aqua_vectors)
        if audit_events_count is not None:
            pulumi.set(__self__, "audit_events_count", audit_events_count)
        if block_events_count is not None:
            pulumi.set(__self__, "block_events_count", block_events_count)
        if classification is not None:
            pulumi.set(__self__, "classification", classification)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if exploit_reference is not None:
            pulumi.set(__self__, "exploit_reference", exploit_reference)
        if exploit_type is not None:
            pulumi.set(__self__, "exploit_type", exploit_type)
        if first_found_date is not None:
            pulumi.set(__self__, "first_found_date", first_found_date)
        if fix_version is not None:
            pulumi.set(__self__, "fix_version", fix_version)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if last_found_date is not None:
            pulumi.set(__self__, "last_found_date", last_found_date)
        if modification_date is not None:
            pulumi.set(__self__, "modification_date", modification_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nvd_cvss2_score is not None:
            pulumi.set(__self__, "nvd_cvss2_score", nvd_cvss2_score)
        if nvd_cvss2_vectors is not None:
            pulumi.set(__self__, "nvd_cvss2_vectors", nvd_cvss2_vectors)
        if nvd_cvss3_score is not None:
            pulumi.set(__self__, "nvd_cvss3_score", nvd_cvss3_score)
        if nvd_cvss3_severity is not None:
            pulumi.set(__self__, "nvd_cvss3_severity", nvd_cvss3_severity)
        if nvd_cvss3_vectors is not None:
            pulumi.set(__self__, "nvd_cvss3_vectors", nvd_cvss3_vectors)
        if nvd_severity is not None:
            pulumi.set(__self__, "nvd_severity", nvd_severity)
        if nvd_url is not None:
            pulumi.set(__self__, "nvd_url", nvd_url)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if publish_date is not None:
            pulumi.set(__self__, "publish_date", publish_date)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if resource_architecture is not None:
            pulumi.set(__self__, "resource_architecture", resource_architecture)
        if resource_cpe is not None:
            pulumi.set(__self__, "resource_cpe", resource_cpe)
        if resource_format is not None:
            pulumi.set(__self__, "resource_format", resource_format)
        if resource_hash is not None:
            pulumi.set(__self__, "resource_hash", resource_hash)
        if resource_licenses is not None:
            pulumi.set(__self__, "resource_licenses", resource_licenses)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if resource_path is not None:
            pulumi.set(__self__, "resource_path", resource_path)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if resource_version is not None:
            pulumi.set(__self__, "resource_version", resource_version)
        if severity_classification is not None:
            pulumi.set(__self__, "severity_classification", severity_classification)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)
        if temporal_vector is not None:
            pulumi.set(__self__, "temporal_vector", temporal_vector)
        if v_patch_applied_by is not None:
            pulumi.set(__self__, "v_patch_applied_by", v_patch_applied_by)
        if v_patch_applied_on is not None:
            pulumi.set(__self__, "v_patch_applied_on", v_patch_applied_on)
        if v_patch_enforced_by is not None:
            pulumi.set(__self__, "v_patch_enforced_by", v_patch_enforced_by)
        if v_patch_enforced_on is not None:
            pulumi.set(__self__, "v_patch_enforced_on", v_patch_enforced_on)
        if v_patch_policy_enforce is not None:
            pulumi.set(__self__, "v_patch_policy_enforce", v_patch_policy_enforce)
        if v_patch_policy_name is not None:
            pulumi.set(__self__, "v_patch_policy_name", v_patch_policy_name)
        if v_patch_reverted_by is not None:
            pulumi.set(__self__, "v_patch_reverted_by", v_patch_reverted_by)
        if v_patch_reverted_on is not None:
            pulumi.set(__self__, "v_patch_reverted_on", v_patch_reverted_on)
        if v_patch_status is not None:
            pulumi.set(__self__, "v_patch_status", v_patch_status)
        if vendor_cvss2_score is not None:
            pulumi.set(__self__, "vendor_cvss2_score", vendor_cvss2_score)
        if vendor_cvss2_vectors is not None:
            pulumi.set(__self__, "vendor_cvss2_vectors", vendor_cvss2_vectors)
        if vendor_severity is not None:
            pulumi.set(__self__, "vendor_severity", vendor_severity)
        if vendor_statement is not None:
            pulumi.set(__self__, "vendor_statement", vendor_statement)
        if vendor_url is not None:
            pulumi.set(__self__, "vendor_url", vendor_url)

    @property
    @pulumi.getter(name="ackAuthor")
    def ack_author(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_author")

    @ack_author.setter
    def ack_author(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_author", value)

    @property
    @pulumi.getter(name="ackComment")
    def ack_comment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_comment")

    @ack_comment.setter
    def ack_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_comment", value)

    @property
    @pulumi.getter(name="ackExpirationConfiguredAt")
    def ack_expiration_configured_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_expiration_configured_at")

    @ack_expiration_configured_at.setter
    def ack_expiration_configured_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_expiration_configured_at", value)

    @property
    @pulumi.getter(name="ackExpirationConfiguredBy")
    def ack_expiration_configured_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_expiration_configured_by")

    @ack_expiration_configured_by.setter
    def ack_expiration_configured_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_expiration_configured_by", value)

    @property
    @pulumi.getter(name="ackExpirationDays")
    def ack_expiration_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ack_expiration_days")

    @ack_expiration_days.setter
    def ack_expiration_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_expiration_days", value)

    @property
    @pulumi.getter(name="ackScope")
    def ack_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ack_scope")

    @ack_scope.setter
    def ack_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_scope", value)

    @property
    @pulumi.getter(name="acknowledgeDate")
    def acknowledge_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acknowledge_date")

    @acknowledge_date.setter
    def acknowledge_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acknowledge_date", value)

    @property
    @pulumi.getter(name="ancestorPkg")
    def ancestor_pkg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ancestor_pkg")

    @ancestor_pkg.setter
    def ancestor_pkg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ancestor_pkg", value)

    @property
    @pulumi.getter(name="aquaScore")
    def aqua_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "aqua_score")

    @aqua_score.setter
    def aqua_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "aqua_score", value)

    @property
    @pulumi.getter(name="aquaScoreClassification")
    def aqua_score_classification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aqua_score_classification")

    @aqua_score_classification.setter
    def aqua_score_classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_score_classification", value)

    @property
    @pulumi.getter(name="aquaScoringSystem")
    def aqua_scoring_system(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aqua_scoring_system")

    @aqua_scoring_system.setter
    def aqua_scoring_system(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_scoring_system", value)

    @property
    @pulumi.getter(name="aquaSeverity")
    def aqua_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aqua_severity")

    @aqua_severity.setter
    def aqua_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_severity", value)

    @property
    @pulumi.getter(name="aquaSeverityClassification")
    def aqua_severity_classification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aqua_severity_classification")

    @aqua_severity_classification.setter
    def aqua_severity_classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_severity_classification", value)

    @property
    @pulumi.getter(name="aquaVectors")
    def aqua_vectors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aqua_vectors")

    @aqua_vectors.setter
    def aqua_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aqua_vectors", value)

    @property
    @pulumi.getter(name="auditEventsCount")
    def audit_events_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audit_events_count")

    @audit_events_count.setter
    def audit_events_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audit_events_count", value)

    @property
    @pulumi.getter(name="blockEventsCount")
    def block_events_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_events_count")

    @block_events_count.setter
    def block_events_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_events_count", value)

    @property
    @pulumi.getter
    def classification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "classification")

    @classification.setter
    def classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "classification", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[str]]:
        """
        The content digest of the image.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter(name="exploitReference")
    def exploit_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exploit_reference")

    @exploit_reference.setter
    def exploit_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exploit_reference", value)

    @property
    @pulumi.getter(name="exploitType")
    def exploit_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exploit_type")

    @exploit_type.setter
    def exploit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exploit_type", value)

    @property
    @pulumi.getter(name="firstFoundDate")
    def first_found_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_found_date")

    @first_found_date.setter
    def first_found_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_found_date", value)

    @property
    @pulumi.getter(name="fixVersion")
    def fix_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fix_version")

    @fix_version.setter
    def fix_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fix_version", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="lastFoundDate")
    def last_found_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_found_date")

    @last_found_date.setter
    def last_found_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_found_date", value)

    @property
    @pulumi.getter(name="modificationDate")
    def modification_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modification_date")

    @modification_date.setter
    def modification_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modification_date", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nvdCvss2Score")
    def nvd_cvss2_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nvd_cvss2_score")

    @nvd_cvss2_score.setter
    def nvd_cvss2_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nvd_cvss2_score", value)

    @property
    @pulumi.getter(name="nvdCvss2Vectors")
    def nvd_cvss2_vectors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nvd_cvss2_vectors")

    @nvd_cvss2_vectors.setter
    def nvd_cvss2_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_cvss2_vectors", value)

    @property
    @pulumi.getter(name="nvdCvss3Score")
    def nvd_cvss3_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "nvd_cvss3_score")

    @nvd_cvss3_score.setter
    def nvd_cvss3_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "nvd_cvss3_score", value)

    @property
    @pulumi.getter(name="nvdCvss3Severity")
    def nvd_cvss3_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nvd_cvss3_severity")

    @nvd_cvss3_severity.setter
    def nvd_cvss3_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_cvss3_severity", value)

    @property
    @pulumi.getter(name="nvdCvss3Vectors")
    def nvd_cvss3_vectors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nvd_cvss3_vectors")

    @nvd_cvss3_vectors.setter
    def nvd_cvss3_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_cvss3_vectors", value)

    @property
    @pulumi.getter(name="nvdSeverity")
    def nvd_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nvd_severity")

    @nvd_severity.setter
    def nvd_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_severity", value)

    @property
    @pulumi.getter(name="nvdUrl")
    def nvd_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nvd_url")

    @nvd_url.setter
    def nvd_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nvd_url", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        The operating system detected in the image
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of the OS detected in the image.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        """
        Permission of the image.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="publishDate")
    def publish_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "publish_date")

    @publish_date.setter
    def publish_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_date", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the registry where the image is stored.
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the image's repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="resourceArchitecture")
    def resource_architecture(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_architecture")

    @resource_architecture.setter
    def resource_architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_architecture", value)

    @property
    @pulumi.getter(name="resourceCpe")
    def resource_cpe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_cpe")

    @resource_cpe.setter
    def resource_cpe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_cpe", value)

    @property
    @pulumi.getter(name="resourceFormat")
    def resource_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_format")

    @resource_format.setter
    def resource_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_format", value)

    @property
    @pulumi.getter(name="resourceHash")
    def resource_hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_hash")

    @resource_hash.setter
    def resource_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_hash", value)

    @property
    @pulumi.getter(name="resourceLicenses")
    def resource_licenses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_licenses")

    @resource_licenses.setter
    def resource_licenses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_licenses", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_path")

    @resource_path.setter
    def resource_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_path", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter(name="severityClassification")
    def severity_classification(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity_classification")

    @severity_classification.setter
    def severity_classification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity_classification", value)

    @property
    @pulumi.getter
    def solution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "solution")

    @solution.setter
    def solution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "solution", value)

    @property
    @pulumi.getter(name="temporalVector")
    def temporal_vector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "temporal_vector")

    @temporal_vector.setter
    def temporal_vector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temporal_vector", value)

    @property
    @pulumi.getter(name="vPatchAppliedBy")
    def v_patch_applied_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_applied_by")

    @v_patch_applied_by.setter
    def v_patch_applied_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_applied_by", value)

    @property
    @pulumi.getter(name="vPatchAppliedOn")
    def v_patch_applied_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_applied_on")

    @v_patch_applied_on.setter
    def v_patch_applied_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_applied_on", value)

    @property
    @pulumi.getter(name="vPatchEnforcedBy")
    def v_patch_enforced_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_enforced_by")

    @v_patch_enforced_by.setter
    def v_patch_enforced_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_enforced_by", value)

    @property
    @pulumi.getter(name="vPatchEnforcedOn")
    def v_patch_enforced_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_enforced_on")

    @v_patch_enforced_on.setter
    def v_patch_enforced_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_enforced_on", value)

    @property
    @pulumi.getter(name="vPatchPolicyEnforce")
    def v_patch_policy_enforce(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "v_patch_policy_enforce")

    @v_patch_policy_enforce.setter
    def v_patch_policy_enforce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "v_patch_policy_enforce", value)

    @property
    @pulumi.getter(name="vPatchPolicyName")
    def v_patch_policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_policy_name")

    @v_patch_policy_name.setter
    def v_patch_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_policy_name", value)

    @property
    @pulumi.getter(name="vPatchRevertedBy")
    def v_patch_reverted_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_reverted_by")

    @v_patch_reverted_by.setter
    def v_patch_reverted_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_reverted_by", value)

    @property
    @pulumi.getter(name="vPatchRevertedOn")
    def v_patch_reverted_on(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_reverted_on")

    @v_patch_reverted_on.setter
    def v_patch_reverted_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_reverted_on", value)

    @property
    @pulumi.getter(name="vPatchStatus")
    def v_patch_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "v_patch_status")

    @v_patch_status.setter
    def v_patch_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v_patch_status", value)

    @property
    @pulumi.getter(name="vendorCvss2Score")
    def vendor_cvss2_score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "vendor_cvss2_score")

    @vendor_cvss2_score.setter
    def vendor_cvss2_score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "vendor_cvss2_score", value)

    @property
    @pulumi.getter(name="vendorCvss2Vectors")
    def vendor_cvss2_vectors(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_cvss2_vectors")

    @vendor_cvss2_vectors.setter
    def vendor_cvss2_vectors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_cvss2_vectors", value)

    @property
    @pulumi.getter(name="vendorSeverity")
    def vendor_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_severity")

    @vendor_severity.setter
    def vendor_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_severity", value)

    @property
    @pulumi.getter(name="vendorStatement")
    def vendor_statement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_statement")

    @vendor_statement.setter
    def vendor_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_statement", value)

    @property
    @pulumi.getter(name="vendorUrl")
    def vendor_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vendor_url")

    @vendor_url.setter
    def vendor_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor_url", value)


@pulumi.input_type
class ServiceScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] attribute: Class of supported scope.
        :param pulumi.Input[str] value: Value assigned to the attribute.
        """
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        """
        Class of supported scope.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value assigned to the attribute.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UserSaasGroupArgs:
    def __init__(__self__, *,
                 group_admin: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if group_admin is not None:
            pulumi.set(__self__, "group_admin", group_admin)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="groupAdmin")
    def group_admin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "group_admin")

    @group_admin.setter
    def group_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "group_admin", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSaasLoginArgs:
    def __init__(__self__, *,
                 created: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        """
        if created is not None:
            pulumi.set(__self__, "created", created)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class GetApplicationScopeCategoryArgs:
    def __init__(__self__, *,
                 artifacts: Optional[Sequence['GetApplicationScopeCategoryArtifactArgs']] = None,
                 entity_scopes: Optional[Sequence['GetApplicationScopeCategoryEntityScopeArgs']] = None,
                 infrastructures: Optional[Sequence['GetApplicationScopeCategoryInfrastructureArgs']] = None,
                 workloads: Optional[Sequence['GetApplicationScopeCategoryWorkloadArgs']] = None):
        if artifacts is not None:
            pulumi.set(__self__, "artifacts", artifacts)
        if entity_scopes is not None:
            pulumi.set(__self__, "entity_scopes", entity_scopes)
        if infrastructures is not None:
            pulumi.set(__self__, "infrastructures", infrastructures)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter
    def artifacts(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactArgs']]:
        return pulumi.get(self, "artifacts")

    @artifacts.setter
    def artifacts(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactArgs']]):
        pulumi.set(self, "artifacts", value)

    @property
    @pulumi.getter(name="entityScopes")
    def entity_scopes(self) -> Optional[Sequence['GetApplicationScopeCategoryEntityScopeArgs']]:
        return pulumi.get(self, "entity_scopes")

    @entity_scopes.setter
    def entity_scopes(self, value: Optional[Sequence['GetApplicationScopeCategoryEntityScopeArgs']]):
        pulumi.set(self, "entity_scopes", value)

    @property
    @pulumi.getter
    def infrastructures(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureArgs']]:
        return pulumi.get(self, "infrastructures")

    @infrastructures.setter
    def infrastructures(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureArgs']]):
        pulumi.set(self, "infrastructures", value)

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadArgs']]:
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadArgs']]):
        pulumi.set(self, "workloads", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactArgs:
    def __init__(__self__, *,
                 cfs: Optional[Sequence['GetApplicationScopeCategoryArtifactCfArgs']] = None,
                 functions: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionArgs']] = None,
                 images: Optional[Sequence['GetApplicationScopeCategoryArtifactImageArgs']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if images is not None:
            pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactCfArgs']]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactCfArgs']]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionArgs']]:
        return pulumi.get(self, "functions")

    @functions.setter
    def functions(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionArgs']]):
        pulumi.set(self, "functions", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactImageArgs']]:
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactImageArgs']]):
        pulumi.set(self, "images", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactCfArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryArtifactCfVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactCfVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactCfVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactCfVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactFunctionArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactFunctionVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactFunctionVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactImageArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryArtifactImageVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryArtifactImageVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryArtifactImageVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryArtifactImageVariableArgs:
    def __init__(__self__, *,
                 attribute: Optional[str] = None,
                 value: Optional[str] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryEntityScopeArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryEntityScopeVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryEntityScopeVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryEntityScopeVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryEntityScopeVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: str):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureArgs:
    def __init__(__self__, *,
                 kubernetes: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteArgs']] = None,
                 os: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOArgs']] = None):
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteArgs']]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureOArgs']]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOArgs']]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureKuberneteArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureOArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryInfrastructureOVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryInfrastructureOVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryInfrastructureOVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadArgs:
    def __init__(__self__, *,
                 cfs: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfArgs']] = None,
                 kubernetes: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteArgs']] = None,
                 os: Optional[Sequence['GetApplicationScopeCategoryWorkloadOArgs']] = None):
        if cfs is not None:
            pulumi.set(__self__, "cfs", cfs)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def cfs(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadCfArgs']]:
        return pulumi.get(self, "cfs")

    @cfs.setter
    def cfs(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfArgs']]):
        pulumi.set(self, "cfs", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteArgs']]:
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadOArgs']]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadOArgs']]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadCfArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadCfVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadCfVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadCfVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadKuberneteArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadKuberneteVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadKuberneteVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadOArgs:
    def __init__(__self__, *,
                 expression: str,
                 variables: Optional[Sequence['GetApplicationScopeCategoryWorkloadOVariableArgs']] = None):
        pulumi.set(__self__, "expression", expression)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Sequence['GetApplicationScopeCategoryWorkloadOVariableArgs']]:
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: Optional[Sequence['GetApplicationScopeCategoryWorkloadOVariableArgs']]):
        pulumi.set(self, "variables", value)


@pulumi.input_type
class GetApplicationScopeCategoryWorkloadOVariableArgs:
    def __init__(__self__, *,
                 attribute: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "attribute", attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def attribute(self) -> str:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: str):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetFirewallPolicyOutboundNetworkArgs:
    def __init__(__self__, *,
                 allow: bool,
                 port_range: str,
                 resource: str,
                 resource_type: str):
        """
        :param bool allow: Indicates whether the specified resources are allowed to receive data or requests.
        :param str port_range: Range of ports affected by firewall.
        :param str resource: Information of the resource.
        :param str resource_type: Type of the resource.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Indicates whether the specified resources are allowed to receive data or requests.
        """
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: bool):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Range of ports affected by firewall.
        """
        return pulumi.get(self, "port_range")

    @port_range.setter
    def port_range(self, value: str):
        pulumi.set(self, "port_range", value)

    @property
    @pulumi.getter
    def resource(self) -> str:
        """
        Information of the resource.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: str):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: str):
        pulumi.set(self, "resource_type", value)


