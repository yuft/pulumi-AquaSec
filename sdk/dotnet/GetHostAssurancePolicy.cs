// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aquasec
{
    public static class GetHostAssurancePolicy
    {
        public static Task<GetHostAssurancePolicyResult> InvokeAsync(GetHostAssurancePolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHostAssurancePolicyResult>("aquasec:index/getHostAssurancePolicy:getHostAssurancePolicy", args ?? new GetHostAssurancePolicyArgs(), options.WithDefaults());

        public static Output<GetHostAssurancePolicyResult> Invoke(GetHostAssurancePolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetHostAssurancePolicyResult>("aquasec:index/getHostAssurancePolicy:getHostAssurancePolicy", args ?? new GetHostAssurancePolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHostAssurancePolicyArgs : Pulumi.InvokeArgs
    {
        [Input("maximumScoreExcludeNoFix")]
        public bool? MaximumScoreExcludeNoFix { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetHostAssurancePolicyArgs()
        {
        }
    }

    public sealed class GetHostAssurancePolicyInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("maximumScoreExcludeNoFix")]
        public Input<bool>? MaximumScoreExcludeNoFix { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetHostAssurancePolicyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetHostAssurancePolicyResult
    {
        public readonly ImmutableArray<string> AllowedImages;
        public readonly ImmutableArray<string> ApplicationScopes;
        public readonly string AssuranceType;
        public readonly bool AuditOnFailure;
        public readonly string Author;
        public readonly bool AutoScanConfigured;
        public readonly bool AutoScanEnabled;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyAutoScanTimeResult> AutoScanTimes;
        public readonly ImmutableArray<string> BlacklistPermissions;
        public readonly bool BlacklistPermissionsEnabled;
        public readonly ImmutableArray<string> BlacklistedLicenses;
        public readonly bool BlacklistedLicensesEnabled;
        public readonly bool BlockFailed;
        public readonly bool ControlExcludeNoFix;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyCustomCheckResult> CustomChecks;
        public readonly bool CustomChecksEnabled;
        public readonly bool CustomSeverityEnabled;
        public readonly bool CvesBlackListEnabled;
        public readonly ImmutableArray<string> CvesBlackLists;
        public readonly bool CvesWhiteListEnabled;
        public readonly ImmutableArray<string> CvesWhiteLists;
        public readonly string CvssSeverity;
        public readonly bool CvssSeverityEnabled;
        public readonly bool CvssSeverityExcludeNoFix;
        public readonly string Description;
        public readonly bool DisallowMalware;
        public readonly bool DockerCisEnabled;
        public readonly string Domain;
        public readonly string DomainName;
        public readonly bool DtaEnabled;
        public readonly string DtaSeverity;
        public readonly bool Enabled;
        public readonly bool Enforce;
        public readonly int EnforceAfterDays;
        public readonly bool EnforceExcessivePermissions;
        public readonly ImmutableArray<string> ExceptionalMonitoredMalwarePaths;
        public readonly bool FailCicd;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyForbiddenLabelResult> ForbiddenLabels;
        public readonly bool ForbiddenLabelsEnabled;
        public readonly bool ForceMicroenforcer;
        public readonly bool FunctionIntegrityEnabled;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IgnoreRecentlyPublishedVln;
        public readonly int IgnoreRecentlyPublishedVlnPeriod;
        public readonly bool IgnoreRiskResourcesEnabled;
        public readonly ImmutableArray<string> IgnoredRiskResources;
        public readonly ImmutableArray<string> Images;
        public readonly bool KubeCisEnabled;
        public readonly ImmutableArray<string> Labels;
        public readonly string MalwareAction;
        public readonly double MaximumScore;
        public readonly bool MaximumScoreEnabled;
        public readonly bool? MaximumScoreExcludeNoFix;
        public readonly ImmutableArray<string> MonitoredMalwarePaths;
        public readonly string Name;
        public readonly bool OnlyNoneRootUsers;
        public readonly bool PackagesBlackListEnabled;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyPackagesBlackListResult> PackagesBlackLists;
        public readonly bool PackagesWhiteListEnabled;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyPackagesWhiteListResult> PackagesWhiteLists;
        public readonly bool PartialResultsImageFail;
        public readonly bool ReadOnly;
        public readonly ImmutableArray<string> Registries;
        public readonly string Registry;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyRequiredLabelResult> RequiredLabels;
        public readonly bool RequiredLabelsEnabled;
        public readonly bool ScanNfsMounts;
        public readonly bool ScanSensitiveData;
        public readonly bool ScapEnabled;
        public readonly ImmutableArray<string> ScapFiles;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyScopeResult> Scopes;
        public readonly ImmutableArray<Outputs.GetHostAssurancePolicyTrustedBaseImageResult> TrustedBaseImages;
        public readonly bool TrustedBaseImagesEnabled;
        public readonly ImmutableArray<string> WhitelistedLicenses;
        public readonly bool WhitelistedLicensesEnabled;

        [OutputConstructor]
        private GetHostAssurancePolicyResult(
            ImmutableArray<string> allowedImages,

            ImmutableArray<string> applicationScopes,

            string assuranceType,

            bool auditOnFailure,

            string author,

            bool autoScanConfigured,

            bool autoScanEnabled,

            ImmutableArray<Outputs.GetHostAssurancePolicyAutoScanTimeResult> autoScanTimes,

            ImmutableArray<string> blacklistPermissions,

            bool blacklistPermissionsEnabled,

            ImmutableArray<string> blacklistedLicenses,

            bool blacklistedLicensesEnabled,

            bool blockFailed,

            bool controlExcludeNoFix,

            ImmutableArray<Outputs.GetHostAssurancePolicyCustomCheckResult> customChecks,

            bool customChecksEnabled,

            bool customSeverityEnabled,

            bool cvesBlackListEnabled,

            ImmutableArray<string> cvesBlackLists,

            bool cvesWhiteListEnabled,

            ImmutableArray<string> cvesWhiteLists,

            string cvssSeverity,

            bool cvssSeverityEnabled,

            bool cvssSeverityExcludeNoFix,

            string description,

            bool disallowMalware,

            bool dockerCisEnabled,

            string domain,

            string domainName,

            bool dtaEnabled,

            string dtaSeverity,

            bool enabled,

            bool enforce,

            int enforceAfterDays,

            bool enforceExcessivePermissions,

            ImmutableArray<string> exceptionalMonitoredMalwarePaths,

            bool failCicd,

            ImmutableArray<Outputs.GetHostAssurancePolicyForbiddenLabelResult> forbiddenLabels,

            bool forbiddenLabelsEnabled,

            bool forceMicroenforcer,

            bool functionIntegrityEnabled,

            string id,

            bool ignoreRecentlyPublishedVln,

            int ignoreRecentlyPublishedVlnPeriod,

            bool ignoreRiskResourcesEnabled,

            ImmutableArray<string> ignoredRiskResources,

            ImmutableArray<string> images,

            bool kubeCisEnabled,

            ImmutableArray<string> labels,

            string malwareAction,

            double maximumScore,

            bool maximumScoreEnabled,

            bool? maximumScoreExcludeNoFix,

            ImmutableArray<string> monitoredMalwarePaths,

            string name,

            bool onlyNoneRootUsers,

            bool packagesBlackListEnabled,

            ImmutableArray<Outputs.GetHostAssurancePolicyPackagesBlackListResult> packagesBlackLists,

            bool packagesWhiteListEnabled,

            ImmutableArray<Outputs.GetHostAssurancePolicyPackagesWhiteListResult> packagesWhiteLists,

            bool partialResultsImageFail,

            bool readOnly,

            ImmutableArray<string> registries,

            string registry,

            ImmutableArray<Outputs.GetHostAssurancePolicyRequiredLabelResult> requiredLabels,

            bool requiredLabelsEnabled,

            bool scanNfsMounts,

            bool scanSensitiveData,

            bool scapEnabled,

            ImmutableArray<string> scapFiles,

            ImmutableArray<Outputs.GetHostAssurancePolicyScopeResult> scopes,

            ImmutableArray<Outputs.GetHostAssurancePolicyTrustedBaseImageResult> trustedBaseImages,

            bool trustedBaseImagesEnabled,

            ImmutableArray<string> whitelistedLicenses,

            bool whitelistedLicensesEnabled)
        {
            AllowedImages = allowedImages;
            ApplicationScopes = applicationScopes;
            AssuranceType = assuranceType;
            AuditOnFailure = auditOnFailure;
            Author = author;
            AutoScanConfigured = autoScanConfigured;
            AutoScanEnabled = autoScanEnabled;
            AutoScanTimes = autoScanTimes;
            BlacklistPermissions = blacklistPermissions;
            BlacklistPermissionsEnabled = blacklistPermissionsEnabled;
            BlacklistedLicenses = blacklistedLicenses;
            BlacklistedLicensesEnabled = blacklistedLicensesEnabled;
            BlockFailed = blockFailed;
            ControlExcludeNoFix = controlExcludeNoFix;
            CustomChecks = customChecks;
            CustomChecksEnabled = customChecksEnabled;
            CustomSeverityEnabled = customSeverityEnabled;
            CvesBlackListEnabled = cvesBlackListEnabled;
            CvesBlackLists = cvesBlackLists;
            CvesWhiteListEnabled = cvesWhiteListEnabled;
            CvesWhiteLists = cvesWhiteLists;
            CvssSeverity = cvssSeverity;
            CvssSeverityEnabled = cvssSeverityEnabled;
            CvssSeverityExcludeNoFix = cvssSeverityExcludeNoFix;
            Description = description;
            DisallowMalware = disallowMalware;
            DockerCisEnabled = dockerCisEnabled;
            Domain = domain;
            DomainName = domainName;
            DtaEnabled = dtaEnabled;
            DtaSeverity = dtaSeverity;
            Enabled = enabled;
            Enforce = enforce;
            EnforceAfterDays = enforceAfterDays;
            EnforceExcessivePermissions = enforceExcessivePermissions;
            ExceptionalMonitoredMalwarePaths = exceptionalMonitoredMalwarePaths;
            FailCicd = failCicd;
            ForbiddenLabels = forbiddenLabels;
            ForbiddenLabelsEnabled = forbiddenLabelsEnabled;
            ForceMicroenforcer = forceMicroenforcer;
            FunctionIntegrityEnabled = functionIntegrityEnabled;
            Id = id;
            IgnoreRecentlyPublishedVln = ignoreRecentlyPublishedVln;
            IgnoreRecentlyPublishedVlnPeriod = ignoreRecentlyPublishedVlnPeriod;
            IgnoreRiskResourcesEnabled = ignoreRiskResourcesEnabled;
            IgnoredRiskResources = ignoredRiskResources;
            Images = images;
            KubeCisEnabled = kubeCisEnabled;
            Labels = labels;
            MalwareAction = malwareAction;
            MaximumScore = maximumScore;
            MaximumScoreEnabled = maximumScoreEnabled;
            MaximumScoreExcludeNoFix = maximumScoreExcludeNoFix;
            MonitoredMalwarePaths = monitoredMalwarePaths;
            Name = name;
            OnlyNoneRootUsers = onlyNoneRootUsers;
            PackagesBlackListEnabled = packagesBlackListEnabled;
            PackagesBlackLists = packagesBlackLists;
            PackagesWhiteListEnabled = packagesWhiteListEnabled;
            PackagesWhiteLists = packagesWhiteLists;
            PartialResultsImageFail = partialResultsImageFail;
            ReadOnly = readOnly;
            Registries = registries;
            Registry = registry;
            RequiredLabels = requiredLabels;
            RequiredLabelsEnabled = requiredLabelsEnabled;
            ScanNfsMounts = scanNfsMounts;
            ScanSensitiveData = scanSensitiveData;
            ScapEnabled = scapEnabled;
            ScapFiles = scapFiles;
            Scopes = scopes;
            TrustedBaseImages = trustedBaseImages;
            TrustedBaseImagesEnabled = trustedBaseImagesEnabled;
            WhitelistedLicenses = whitelistedLicenses;
            WhitelistedLicensesEnabled = whitelistedLicensesEnabled;
        }
    }
}
