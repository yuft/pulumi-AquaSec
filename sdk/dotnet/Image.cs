// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aquasec
{
    [AquasecResourceType("aquasec:index/image:Image")]
    public partial class Image : Pulumi.CustomResource
    {
        /// <summary>
        /// If this field is set to true, the image will be whitelisted.
        /// </summary>
        [Output("allowImage")]
        public Output<bool?> AllowImage { get; private set; } = null!;

        /// <summary>
        /// The image architecture.
        /// </summary>
        [Output("architecture")]
        public Output<string> Architecture { get; private set; } = null!;

        /// <summary>
        /// The list of image assurance checks performed on the image.
        /// </summary>
        [Output("assuranceChecksPerformeds")]
        public Output<ImmutableArray<Outputs.ImageAssuranceChecksPerformed>> AssuranceChecksPerformeds { get; private set; } = null!;

        /// <summary>
        /// The name of the user who registered the image.
        /// </summary>
        [Output("author")]
        public Output<string> Author { get; private set; } = null!;

        /// <summary>
        /// Whether the image is blacklisted.
        /// </summary>
        [Output("blacklisted")]
        public Output<bool> Blacklisted { get; private set; } = null!;

        /// <summary>
        /// If this field is set to true, the image will be blacklisted.
        /// </summary>
        [Output("blockImage")]
        public Output<bool?> BlockImage { get; private set; } = null!;

        /// <summary>
        /// The image creation comment.
        /// </summary>
        [Output("comment")]
        public Output<string> Comment { get; private set; } = null!;

        /// <summary>
        /// The date and time when the image was registered.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Number of critical severity vulnerabilities detected in the image.
        /// </summary>
        [Output("criticalVulnerabilities")]
        public Output<int> CriticalVulnerabilities { get; private set; } = null!;

        /// <summary>
        /// The default user of the image.
        /// </summary>
        [Output("defaultUser")]
        public Output<string> DefaultUser { get; private set; } = null!;

        /// <summary>
        /// The content digest of the image.
        /// </summary>
        [Output("digest")]
        public Output<string> Digest { get; private set; } = null!;

        /// <summary>
        /// Whether the image is disallowed (non-compliant).
        /// </summary>
        [Output("disallowed")]
        public Output<bool> Disallowed { get; private set; } = null!;

        /// <summary>
        /// Whether the image was disallowed because of Image Assurance Policies.
        /// </summary>
        [Output("disallowedByAssuranceChecks")]
        public Output<bool> DisallowedByAssuranceChecks { get; private set; } = null!;

        /// <summary>
        /// The Docker image ID.
        /// </summary>
        [Output("dockerId")]
        public Output<string> DockerId { get; private set; } = null!;

        /// <summary>
        /// Docker labels of the image.
        /// </summary>
        [Output("dockerLabels")]
        public Output<ImmutableArray<string>> DockerLabels { get; private set; } = null!;

        /// <summary>
        /// The Docker version used when building the image.
        /// </summary>
        [Output("dockerVersion")]
        public Output<string> DockerVersion { get; private set; } = null!;

        /// <summary>
        /// DTA severity score.
        /// </summary>
        [Output("dtaSeverityScore")]
        public Output<string> DtaSeverityScore { get; private set; } = null!;

        /// <summary>
        /// If DTA was skipped.
        /// </summary>
        [Output("dtaSkipped")]
        public Output<bool> DtaSkipped { get; private set; } = null!;

        /// <summary>
        /// The reason why DTA was skipped.
        /// </summary>
        [Output("dtaSkippedReason")]
        public Output<string> DtaSkippedReason { get; private set; } = null!;

        /// <summary>
        /// Environment variables in the image.
        /// </summary>
        [Output("environmentVariables")]
        public Output<ImmutableArray<string>> EnvironmentVariables { get; private set; } = null!;

        /// <summary>
        /// Number of high severity vulnerabilities detected in the image.
        /// </summary>
        [Output("highVulnerabilities")]
        public Output<int> HighVulnerabilities { get; private set; } = null!;

        /// <summary>
        /// The Docker history of the image.
        /// </summary>
        [Output("histories")]
        public Output<ImmutableArray<Outputs.ImageHistory>> Histories { get; private set; } = null!;

        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        [Output("imageSize")]
        public Output<int> ImageSize { get; private set; } = null!;

        /// <summary>
        /// The type of the image.
        /// </summary>
        [Output("imageType")]
        public Output<string> ImageType { get; private set; } = null!;

        /// <summary>
        /// Aqua labels of the image.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Number of low severity vulnerabilities detected in the image.
        /// </summary>
        [Output("lowVulnerabilities")]
        public Output<int> LowVulnerabilities { get; private set; } = null!;

        /// <summary>
        /// Number of malware found on the image.
        /// </summary>
        [Output("malware")]
        public Output<int> Malware { get; private set; } = null!;

        /// <summary>
        /// Number of medium severity vulnerabilities detected in the image.
        /// </summary>
        [Output("mediumVulnerabilities")]
        public Output<int> MediumVulnerabilities { get; private set; } = null!;

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of negligible severity vulnerabilities detected in the image.
        /// </summary>
        [Output("negligibleVulnerabilities")]
        public Output<int> NegligibleVulnerabilities { get; private set; } = null!;

        /// <summary>
        /// Whether a new version of the image is available in the registry but is not scanned and registered yet.
        /// </summary>
        [Output("newerImageExists")]
        public Output<bool> NewerImageExists { get; private set; } = null!;

        /// <summary>
        /// The operating system detected in the image
        /// </summary>
        [Output("os")]
        public Output<string> Os { get; private set; } = null!;

        /// <summary>
        /// The version of the OS detected in the image.
        /// </summary>
        [Output("osVersion")]
        public Output<string> OsVersion { get; private set; } = null!;

        /// <summary>
        /// The ID of the parent image.
        /// </summary>
        [Output("parent")]
        public Output<string> Parent { get; private set; } = null!;

        /// <summary>
        /// Whether the image could only be partially scanned.
        /// </summary>
        [Output("partialResults")]
        public Output<bool> PartialResults { get; private set; } = null!;

        /// <summary>
        /// Whether the image is non-compliant, but is pending this status due to running containers.
        /// </summary>
        [Output("pendingDisallowed")]
        public Output<bool> PendingDisallowed { get; private set; } = null!;

        /// <summary>
        /// Permission of the image.
        /// </summary>
        [Output("permission")]
        public Output<string> Permission { get; private set; } = null!;

        /// <summary>
        /// The name of the user who last modified the image permissions.
        /// </summary>
        [Output("permissionAuthor")]
        public Output<string> PermissionAuthor { get; private set; } = null!;

        /// <summary>
        /// The comment provided when the image permissions were last modified
        /// </summary>
        [Output("permissionComment")]
        public Output<string> PermissionComment { get; private set; } = null!;

        /// <summary>
        /// A comment on why the image was whitelisted or blacklisted
        /// </summary>
        [Output("permissionModificationComment")]
        public Output<string?> PermissionModificationComment { get; private set; } = null!;

        /// <summary>
        /// The name of the registry where the image is stored.
        /// </summary>
        [Output("registry")]
        public Output<string> Registry { get; private set; } = null!;

        /// <summary>
        /// Type of the registry.
        /// </summary>
        [Output("registryType")]
        public Output<string> RegistryType { get; private set; } = null!;

        /// <summary>
        /// The repository digests.
        /// </summary>
        [Output("repoDigests")]
        public Output<ImmutableArray<string>> RepoDigests { get; private set; } = null!;

        /// <summary>
        /// The name of the image's repository.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// The date and time when the image was last scanned.
        /// </summary>
        [Output("scanDate")]
        public Output<string> ScanDate { get; private set; } = null!;

        /// <summary>
        /// If the image scan failed, the failure message.
        /// </summary>
        [Output("scanError")]
        public Output<string> ScanError { get; private set; } = null!;

        /// <summary>
        /// The scan status of the image (either 'pending', 'in*progress', 'finished', 'failed' or 'not*started').
        /// </summary>
        [Output("scanStatus")]
        public Output<string> ScanStatus { get; private set; } = null!;

        /// <summary>
        /// Number of sensitive data detected in the image.
        /// </summary>
        [Output("sensitiveData")]
        public Output<int> SensitiveData { get; private set; } = null!;

        /// <summary>
        /// The tag of the image.
        /// </summary>
        [Output("tag")]
        public Output<string> Tag { get; private set; } = null!;

        /// <summary>
        /// The total number of vulnerabilities detected in the image.
        /// </summary>
        [Output("totalVulnerabilities")]
        public Output<int> TotalVulnerabilities { get; private set; } = null!;

        /// <summary>
        /// The virtual size of the image.
        /// </summary>
        [Output("virtualSize")]
        public Output<int> VirtualSize { get; private set; } = null!;

        /// <summary>
        /// A list of all the vulnerabilities found in the image
        /// </summary>
        [Output("vulnerabilities")]
        public Output<ImmutableArray<Outputs.ImageVulnerability>> Vulnerabilities { get; private set; } = null!;

        /// <summary>
        /// Whether the image is whitelisted.
        /// </summary>
        [Output("whitelisted")]
        public Output<bool> Whitelisted { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("aquasec:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
            : base("aquasec:index/image:Image", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
        {
            return new Image(name, id, state, options);
        }
    }

    public sealed class ImageArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this field is set to true, the image will be whitelisted.
        /// </summary>
        [Input("allowImage")]
        public Input<bool>? AllowImage { get; set; }

        /// <summary>
        /// If this field is set to true, the image will be blacklisted.
        /// </summary>
        [Input("blockImage")]
        public Input<bool>? BlockImage { get; set; }

        /// <summary>
        /// A comment on why the image was whitelisted or blacklisted
        /// </summary>
        [Input("permissionModificationComment")]
        public Input<string>? PermissionModificationComment { get; set; }

        /// <summary>
        /// The name of the registry where the image is stored.
        /// </summary>
        [Input("registry", required: true)]
        public Input<string> Registry { get; set; } = null!;

        /// <summary>
        /// The name of the image's repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// The tag of the image.
        /// </summary>
        [Input("tag", required: true)]
        public Input<string> Tag { get; set; } = null!;

        public ImageArgs()
        {
        }
    }

    public sealed class ImageState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this field is set to true, the image will be whitelisted.
        /// </summary>
        [Input("allowImage")]
        public Input<bool>? AllowImage { get; set; }

        /// <summary>
        /// The image architecture.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("assuranceChecksPerformeds")]
        private InputList<Inputs.ImageAssuranceChecksPerformedGetArgs>? _assuranceChecksPerformeds;

        /// <summary>
        /// The list of image assurance checks performed on the image.
        /// </summary>
        public InputList<Inputs.ImageAssuranceChecksPerformedGetArgs> AssuranceChecksPerformeds
        {
            get => _assuranceChecksPerformeds ?? (_assuranceChecksPerformeds = new InputList<Inputs.ImageAssuranceChecksPerformedGetArgs>());
            set => _assuranceChecksPerformeds = value;
        }

        /// <summary>
        /// The name of the user who registered the image.
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        /// <summary>
        /// Whether the image is blacklisted.
        /// </summary>
        [Input("blacklisted")]
        public Input<bool>? Blacklisted { get; set; }

        /// <summary>
        /// If this field is set to true, the image will be blacklisted.
        /// </summary>
        [Input("blockImage")]
        public Input<bool>? BlockImage { get; set; }

        /// <summary>
        /// The image creation comment.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The date and time when the image was registered.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// Number of critical severity vulnerabilities detected in the image.
        /// </summary>
        [Input("criticalVulnerabilities")]
        public Input<int>? CriticalVulnerabilities { get; set; }

        /// <summary>
        /// The default user of the image.
        /// </summary>
        [Input("defaultUser")]
        public Input<string>? DefaultUser { get; set; }

        /// <summary>
        /// The content digest of the image.
        /// </summary>
        [Input("digest")]
        public Input<string>? Digest { get; set; }

        /// <summary>
        /// Whether the image is disallowed (non-compliant).
        /// </summary>
        [Input("disallowed")]
        public Input<bool>? Disallowed { get; set; }

        /// <summary>
        /// Whether the image was disallowed because of Image Assurance Policies.
        /// </summary>
        [Input("disallowedByAssuranceChecks")]
        public Input<bool>? DisallowedByAssuranceChecks { get; set; }

        /// <summary>
        /// The Docker image ID.
        /// </summary>
        [Input("dockerId")]
        public Input<string>? DockerId { get; set; }

        [Input("dockerLabels")]
        private InputList<string>? _dockerLabels;

        /// <summary>
        /// Docker labels of the image.
        /// </summary>
        public InputList<string> DockerLabels
        {
            get => _dockerLabels ?? (_dockerLabels = new InputList<string>());
            set => _dockerLabels = value;
        }

        /// <summary>
        /// The Docker version used when building the image.
        /// </summary>
        [Input("dockerVersion")]
        public Input<string>? DockerVersion { get; set; }

        /// <summary>
        /// DTA severity score.
        /// </summary>
        [Input("dtaSeverityScore")]
        public Input<string>? DtaSeverityScore { get; set; }

        /// <summary>
        /// If DTA was skipped.
        /// </summary>
        [Input("dtaSkipped")]
        public Input<bool>? DtaSkipped { get; set; }

        /// <summary>
        /// The reason why DTA was skipped.
        /// </summary>
        [Input("dtaSkippedReason")]
        public Input<string>? DtaSkippedReason { get; set; }

        [Input("environmentVariables")]
        private InputList<string>? _environmentVariables;

        /// <summary>
        /// Environment variables in the image.
        /// </summary>
        public InputList<string> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<string>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// Number of high severity vulnerabilities detected in the image.
        /// </summary>
        [Input("highVulnerabilities")]
        public Input<int>? HighVulnerabilities { get; set; }

        [Input("histories")]
        private InputList<Inputs.ImageHistoryGetArgs>? _histories;

        /// <summary>
        /// The Docker history of the image.
        /// </summary>
        public InputList<Inputs.ImageHistoryGetArgs> Histories
        {
            get => _histories ?? (_histories = new InputList<Inputs.ImageHistoryGetArgs>());
            set => _histories = value;
        }

        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        [Input("imageSize")]
        public Input<int>? ImageSize { get; set; }

        /// <summary>
        /// The type of the image.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// Aqua labels of the image.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Number of low severity vulnerabilities detected in the image.
        /// </summary>
        [Input("lowVulnerabilities")]
        public Input<int>? LowVulnerabilities { get; set; }

        /// <summary>
        /// Number of malware found on the image.
        /// </summary>
        [Input("malware")]
        public Input<int>? Malware { get; set; }

        /// <summary>
        /// Number of medium severity vulnerabilities detected in the image.
        /// </summary>
        [Input("mediumVulnerabilities")]
        public Input<int>? MediumVulnerabilities { get; set; }

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of negligible severity vulnerabilities detected in the image.
        /// </summary>
        [Input("negligibleVulnerabilities")]
        public Input<int>? NegligibleVulnerabilities { get; set; }

        /// <summary>
        /// Whether a new version of the image is available in the registry but is not scanned and registered yet.
        /// </summary>
        [Input("newerImageExists")]
        public Input<bool>? NewerImageExists { get; set; }

        /// <summary>
        /// The operating system detected in the image
        /// </summary>
        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// The version of the OS detected in the image.
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// The ID of the parent image.
        /// </summary>
        [Input("parent")]
        public Input<string>? Parent { get; set; }

        /// <summary>
        /// Whether the image could only be partially scanned.
        /// </summary>
        [Input("partialResults")]
        public Input<bool>? PartialResults { get; set; }

        /// <summary>
        /// Whether the image is non-compliant, but is pending this status due to running containers.
        /// </summary>
        [Input("pendingDisallowed")]
        public Input<bool>? PendingDisallowed { get; set; }

        /// <summary>
        /// Permission of the image.
        /// </summary>
        [Input("permission")]
        public Input<string>? Permission { get; set; }

        /// <summary>
        /// The name of the user who last modified the image permissions.
        /// </summary>
        [Input("permissionAuthor")]
        public Input<string>? PermissionAuthor { get; set; }

        /// <summary>
        /// The comment provided when the image permissions were last modified
        /// </summary>
        [Input("permissionComment")]
        public Input<string>? PermissionComment { get; set; }

        /// <summary>
        /// A comment on why the image was whitelisted or blacklisted
        /// </summary>
        [Input("permissionModificationComment")]
        public Input<string>? PermissionModificationComment { get; set; }

        /// <summary>
        /// The name of the registry where the image is stored.
        /// </summary>
        [Input("registry")]
        public Input<string>? Registry { get; set; }

        /// <summary>
        /// Type of the registry.
        /// </summary>
        [Input("registryType")]
        public Input<string>? RegistryType { get; set; }

        [Input("repoDigests")]
        private InputList<string>? _repoDigests;

        /// <summary>
        /// The repository digests.
        /// </summary>
        public InputList<string> RepoDigests
        {
            get => _repoDigests ?? (_repoDigests = new InputList<string>());
            set => _repoDigests = value;
        }

        /// <summary>
        /// The name of the image's repository.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// The date and time when the image was last scanned.
        /// </summary>
        [Input("scanDate")]
        public Input<string>? ScanDate { get; set; }

        /// <summary>
        /// If the image scan failed, the failure message.
        /// </summary>
        [Input("scanError")]
        public Input<string>? ScanError { get; set; }

        /// <summary>
        /// The scan status of the image (either 'pending', 'in*progress', 'finished', 'failed' or 'not*started').
        /// </summary>
        [Input("scanStatus")]
        public Input<string>? ScanStatus { get; set; }

        /// <summary>
        /// Number of sensitive data detected in the image.
        /// </summary>
        [Input("sensitiveData")]
        public Input<int>? SensitiveData { get; set; }

        /// <summary>
        /// The tag of the image.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        /// <summary>
        /// The total number of vulnerabilities detected in the image.
        /// </summary>
        [Input("totalVulnerabilities")]
        public Input<int>? TotalVulnerabilities { get; set; }

        /// <summary>
        /// The virtual size of the image.
        /// </summary>
        [Input("virtualSize")]
        public Input<int>? VirtualSize { get; set; }

        [Input("vulnerabilities")]
        private InputList<Inputs.ImageVulnerabilityGetArgs>? _vulnerabilities;

        /// <summary>
        /// A list of all the vulnerabilities found in the image
        /// </summary>
        public InputList<Inputs.ImageVulnerabilityGetArgs> Vulnerabilities
        {
            get => _vulnerabilities ?? (_vulnerabilities = new InputList<Inputs.ImageVulnerabilityGetArgs>());
            set => _vulnerabilities = value;
        }

        /// <summary>
        /// Whether the image is whitelisted.
        /// </summary>
        [Input("whitelisted")]
        public Input<bool>? Whitelisted { get; set; }

        public ImageState()
        {
        }
    }
}
