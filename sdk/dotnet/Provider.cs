// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aquasec
{
    /// <summary>
    /// The provider type for the aquasec package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [AquasecResourceType("pulumi:providers:aquasec")]
    public partial class Provider : Pulumi.ProviderResource
    {
        /// <summary>
        /// This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.
        /// </summary>
        [Output("aquaUrl")]
        public Output<string?> AquaUrl { get; private set; } = null!;

        /// <summary>
        /// This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced
        /// from the `AQUA_CA_CERT_PATH` environment variable.
        /// </summary>
        [Output("caCertificatePath")]
        public Output<string?> CaCertificatePath { get; private set; } = null!;

        /// <summary>
        /// This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can
        /// alternatively be sourced from the `AQUA_CONFIG` environment variable.
        /// </summary>
        [Output("configPath")]
        public Output<string?> ConfigPath { get; private set; } = null!;

        /// <summary>
        /// This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`
        /// environment variable.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`
        /// environment variable.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("aquasec", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.
        /// </summary>
        [Input("aquaUrl")]
        public Input<string>? AquaUrl { get; set; }

        /// <summary>
        /// This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced
        /// from the `AQUA_CA_CERT_PATH` environment variable.
        /// </summary>
        [Input("caCertificatePath")]
        public Input<string>? CaCertificatePath { get; set; }

        /// <summary>
        /// This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can
        /// alternatively be sourced from the `AQUA_CONFIG` environment variable.
        /// </summary>
        [Input("configPath")]
        public Input<string>? ConfigPath { get; set; }

        /// <summary>
        /// This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`
        /// environment variable.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`
        /// environment variable.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// If true, server tls certificates will be verified by the client before making a connection. Defaults to true. Can
        /// alternatively be sourced from the `AQUA_TLS_VERIFY` environment variable.
        /// </summary>
        [Input("verifyTls", json: true)]
        public Input<bool>? VerifyTls { get; set; }

        public ProviderArgs()
        {
            AquaUrl = Utilities.GetEnv("AQUA_URL");
            Password = Utilities.GetEnv("AUQA_PASSWORD");
            Username = Utilities.GetEnv("AQUA_USERNAME");
        }
    }
}
