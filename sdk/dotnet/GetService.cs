// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aquasec
{
    public static class GetService
    {
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("aquasec:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServiceResult>("aquasec:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the service. It is recommended not to use whitespace characters in the name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetServiceArgs()
        {
        }
    }

    public sealed class GetServiceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the service. It is recommended not to use whitespace characters in the name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetServiceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        public readonly ImmutableArray<string> ApplicationScopes;
        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        public readonly string Author;
        /// <summary>
        /// The number of containers associated with the service.
        /// </summary>
        public readonly int ContainersCount;
        /// <summary>
        /// A textual description of the service record; maximum 500 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enforcement status of the service.
        /// </summary>
        public readonly bool Enforce;
        /// <summary>
        /// Whether the service has been evaluated for security vulnerabilities.
        /// </summary>
        public readonly bool Evaluated;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates if registered or not.
        /// </summary>
        public readonly bool IsRegistered;
        /// <summary>
        /// Timestamp of the last update in Unix time format.
        /// </summary>
        public readonly int Lastupdate;
        /// <summary>
        /// Indicates if monitoring is enabled or not
        /// </summary>
        public readonly bool Monitoring;
        /// <summary>
        /// The name of the service. It is recommended not to use whitespace characters in the name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The number of container that are not evaluated.
        /// </summary>
        public readonly int NotEvaluatedCount;
        /// <summary>
        /// The service's policies; an array of container firewall policy names.
        /// </summary>
        public readonly ImmutableArray<string> Policies;
        /// <summary>
        /// Rules priority, must be between 1-100.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        public readonly string ScopeExpression;
        /// <summary>
        /// List of scope attributes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceScopeVariableResult> ScopeVariables;
        /// <summary>
        /// Type of the workload. container or host.
        /// </summary>
        public readonly string Target;
        /// <summary>
        /// The number of containers allocated to the service that are not registered.
        /// </summary>
        public readonly int UnregisteredCount;
        /// <summary>
        /// Number of high severity vulnerabilities.
        /// </summary>
        public readonly int VulnerabilitiesHigh;
        /// <summary>
        /// Number of low severity vulnerabilities.
        /// </summary>
        public readonly int VulnerabilitiesLow;
        /// <summary>
        /// Number of malware.
        /// </summary>
        public readonly int VulnerabilitiesMalware;
        /// <summary>
        /// Number of medium severity vulnerabilities.
        /// </summary>
        public readonly int VulnerabilitiesMedium;
        /// <summary>
        /// Number of negligible vulnerabilities.
        /// </summary>
        public readonly int VulnerabilitiesNegligible;
        /// <summary>
        /// The CVSS average vulnerabilities score.
        /// </summary>
        public readonly int VulnerabilitiesScoreAverage;
        /// <summary>
        /// Number of sensitive vulnerabilities.
        /// </summary>
        public readonly int VulnerabilitiesSensitive;
        /// <summary>
        /// Total number of vulnerabilities.
        /// </summary>
        public readonly int VulnerabilitiesTotal;

        [OutputConstructor]
        private GetServiceResult(
            ImmutableArray<string> applicationScopes,

            string author,

            int containersCount,

            string description,

            bool enforce,

            bool evaluated,

            string id,

            bool isRegistered,

            int lastupdate,

            bool monitoring,

            string name,

            int notEvaluatedCount,

            ImmutableArray<string> policies,

            int priority,

            string scopeExpression,

            ImmutableArray<Outputs.GetServiceScopeVariableResult> scopeVariables,

            string target,

            int unregisteredCount,

            int vulnerabilitiesHigh,

            int vulnerabilitiesLow,

            int vulnerabilitiesMalware,

            int vulnerabilitiesMedium,

            int vulnerabilitiesNegligible,

            int vulnerabilitiesScoreAverage,

            int vulnerabilitiesSensitive,

            int vulnerabilitiesTotal)
        {
            ApplicationScopes = applicationScopes;
            Author = author;
            ContainersCount = containersCount;
            Description = description;
            Enforce = enforce;
            Evaluated = evaluated;
            Id = id;
            IsRegistered = isRegistered;
            Lastupdate = lastupdate;
            Monitoring = monitoring;
            Name = name;
            NotEvaluatedCount = notEvaluatedCount;
            Policies = policies;
            Priority = priority;
            ScopeExpression = scopeExpression;
            ScopeVariables = scopeVariables;
            Target = target;
            UnregisteredCount = unregisteredCount;
            VulnerabilitiesHigh = vulnerabilitiesHigh;
            VulnerabilitiesLow = vulnerabilitiesLow;
            VulnerabilitiesMalware = vulnerabilitiesMalware;
            VulnerabilitiesMedium = vulnerabilitiesMedium;
            VulnerabilitiesNegligible = vulnerabilitiesNegligible;
            VulnerabilitiesScoreAverage = vulnerabilitiesScoreAverage;
            VulnerabilitiesSensitive = vulnerabilitiesSensitive;
            VulnerabilitiesTotal = vulnerabilitiesTotal;
        }
    }
}
