// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Aquasec
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly Pulumi.Config __config = new Pulumi.Config("aquasec");

        private static readonly __Value<string?> _aquaUrl = new __Value<string?>(() => __config.Get("aquaUrl") ?? Utilities.GetEnv("AQUA_URL"));
        /// <summary>
        /// This is the base URL of your Aqua instance. Can alternatively be sourced from the `AQUA_URL` environment variable.
        /// </summary>
        public static string? AquaUrl
        {
            get => _aquaUrl.Get();
            set => _aquaUrl.Set(value);
        }

        private static readonly __Value<string?> _caCertificatePath = new __Value<string?>(() => __config.Get("caCertificatePath"));
        /// <summary>
        /// This is the file path for server CA certificates if they are not available on the host OS. Can alternatively be sourced
        /// from the `AQUA_CA_CERT_PATH` environment variable.
        /// </summary>
        public static string? CaCertificatePath
        {
            get => _caCertificatePath.Get();
            set => _caCertificatePath.Set(value);
        }

        private static readonly __Value<string?> _configPath = new __Value<string?>(() => __config.Get("configPath"));
        /// <summary>
        /// This is the file path for Aqua provider configuration. The default configuration path is `~/.aqua/tf.config`. Can
        /// alternatively be sourced from the `AQUA_CONFIG` environment variable.
        /// </summary>
        public static string? ConfigPath
        {
            get => _configPath.Get();
            set => _configPath.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password") ?? Utilities.GetEnv("AUQA_PASSWORD"));
        /// <summary>
        /// This is the password that should be used to make the connection. Can alternatively be sourced from the `AQUA_PASSWORD`
        /// environment variable.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username") ?? Utilities.GetEnv("AQUA_USERNAME"));
        /// <summary>
        /// This is the user id that should be used to make the connection. Can alternatively be sourced from the `AQUA_USER`
        /// environment variable.
        /// </summary>
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

        private static readonly __Value<bool?> _verifyTls = new __Value<bool?>(() => __config.GetBoolean("verifyTls"));
        /// <summary>
        /// If true, server tls certificates will be verified by the client before making a connection. Defaults to true. Can
        /// alternatively be sourced from the `AQUA_TLS_VERIFY` environment variable.
        /// </summary>
        public static bool? VerifyTls
        {
            get => _verifyTls.Get();
            set => _verifyTls.Set(value);
        }

    }
}
