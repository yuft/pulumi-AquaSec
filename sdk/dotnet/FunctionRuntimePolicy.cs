// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aquasec
{
    [AquasecResourceType("aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy")]
    public partial class FunctionRuntimePolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        [Output("applicationScopes")]
        public Output<ImmutableArray<string>> ApplicationScopes { get; private set; } = null!;

        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        [Output("author")]
        public Output<string> Author { get; private set; } = null!;

        /// <summary>
        /// If true, prevent creation of malicious executables in functions during their runtime post invocation.
        /// </summary>
        [Output("blockMaliciousExecutables")]
        public Output<bool?> BlockMaliciousExecutables { get; private set; } = null!;

        /// <summary>
        /// List of executables that are prevented from running in containers.
        /// </summary>
        [Output("blockedExecutables")]
        public Output<ImmutableArray<string>> BlockedExecutables { get; private set; } = null!;

        /// <summary>
        /// The description of the function runtime policy
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Indicates if the runtime policy is enabled or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Indicates that policy should effect container execution (not just for audit).
        /// </summary>
        [Output("enforce")]
        public Output<bool?> Enforce { get; private set; } = null!;

        /// <summary>
        /// Honeypot User ID (Access Key)
        /// </summary>
        [Output("honeypotAccessKey")]
        public Output<string?> HoneypotAccessKey { get; private set; } = null!;

        /// <summary>
        /// List of options to apply the honeypot on (Environment Vairable, Layer, File)
        /// </summary>
        [Output("honeypotApplyOns")]
        public Output<ImmutableArray<string>> HoneypotApplyOns { get; private set; } = null!;

        /// <summary>
        /// Honeypot User Password (Secret Key)
        /// </summary>
        [Output("honeypotSecretKey")]
        public Output<string?> HoneypotSecretKey { get; private set; } = null!;

        /// <summary>
        /// Serverless application name
        /// </summary>
        [Output("honeypotServerlessAppName")]
        public Output<string?> HoneypotServerlessAppName { get; private set; } = null!;

        /// <summary>
        /// Name of the function runtime policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        [Output("scopeExpression")]
        public Output<string> ScopeExpression { get; private set; } = null!;

        /// <summary>
        /// List of scope attributes.
        /// </summary>
        [Output("scopeVariables")]
        public Output<ImmutableArray<Outputs.FunctionRuntimePolicyScopeVariable>> ScopeVariables { get; private set; } = null!;


        /// <summary>
        /// Create a FunctionRuntimePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FunctionRuntimePolicy(string name, FunctionRuntimePolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy", name, args ?? new FunctionRuntimePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FunctionRuntimePolicy(string name, Input<string> id, FunctionRuntimePolicyState? state = null, CustomResourceOptions? options = null)
            : base("aquasec:index/functionRuntimePolicy:FunctionRuntimePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FunctionRuntimePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FunctionRuntimePolicy Get(string name, Input<string> id, FunctionRuntimePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new FunctionRuntimePolicy(name, id, state, options);
        }
    }

    public sealed class FunctionRuntimePolicyArgs : Pulumi.ResourceArgs
    {
        [Input("applicationScopes")]
        private InputList<string>? _applicationScopes;

        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        public InputList<string> ApplicationScopes
        {
            get => _applicationScopes ?? (_applicationScopes = new InputList<string>());
            set => _applicationScopes = value;
        }

        /// <summary>
        /// If true, prevent creation of malicious executables in functions during their runtime post invocation.
        /// </summary>
        [Input("blockMaliciousExecutables")]
        public Input<bool>? BlockMaliciousExecutables { get; set; }

        [Input("blockedExecutables")]
        private InputList<string>? _blockedExecutables;

        /// <summary>
        /// List of executables that are prevented from running in containers.
        /// </summary>
        public InputList<string> BlockedExecutables
        {
            get => _blockedExecutables ?? (_blockedExecutables = new InputList<string>());
            set => _blockedExecutables = value;
        }

        /// <summary>
        /// The description of the function runtime policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates if the runtime policy is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Indicates that policy should effect container execution (not just for audit).
        /// </summary>
        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        /// <summary>
        /// Honeypot User ID (Access Key)
        /// </summary>
        [Input("honeypotAccessKey")]
        public Input<string>? HoneypotAccessKey { get; set; }

        [Input("honeypotApplyOns")]
        private InputList<string>? _honeypotApplyOns;

        /// <summary>
        /// List of options to apply the honeypot on (Environment Vairable, Layer, File)
        /// </summary>
        public InputList<string> HoneypotApplyOns
        {
            get => _honeypotApplyOns ?? (_honeypotApplyOns = new InputList<string>());
            set => _honeypotApplyOns = value;
        }

        /// <summary>
        /// Honeypot User Password (Secret Key)
        /// </summary>
        [Input("honeypotSecretKey")]
        public Input<string>? HoneypotSecretKey { get; set; }

        /// <summary>
        /// Serverless application name
        /// </summary>
        [Input("honeypotServerlessAppName")]
        public Input<string>? HoneypotServerlessAppName { get; set; }

        /// <summary>
        /// Name of the function runtime policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        [Input("scopeExpression")]
        public Input<string>? ScopeExpression { get; set; }

        [Input("scopeVariables")]
        private InputList<Inputs.FunctionRuntimePolicyScopeVariableArgs>? _scopeVariables;

        /// <summary>
        /// List of scope attributes.
        /// </summary>
        public InputList<Inputs.FunctionRuntimePolicyScopeVariableArgs> ScopeVariables
        {
            get => _scopeVariables ?? (_scopeVariables = new InputList<Inputs.FunctionRuntimePolicyScopeVariableArgs>());
            set => _scopeVariables = value;
        }

        public FunctionRuntimePolicyArgs()
        {
        }
    }

    public sealed class FunctionRuntimePolicyState : Pulumi.ResourceArgs
    {
        [Input("applicationScopes")]
        private InputList<string>? _applicationScopes;

        /// <summary>
        /// Indicates the application scope of the service.
        /// </summary>
        public InputList<string> ApplicationScopes
        {
            get => _applicationScopes ?? (_applicationScopes = new InputList<string>());
            set => _applicationScopes = value;
        }

        /// <summary>
        /// Username of the account that created the service.
        /// </summary>
        [Input("author")]
        public Input<string>? Author { get; set; }

        /// <summary>
        /// If true, prevent creation of malicious executables in functions during their runtime post invocation.
        /// </summary>
        [Input("blockMaliciousExecutables")]
        public Input<bool>? BlockMaliciousExecutables { get; set; }

        [Input("blockedExecutables")]
        private InputList<string>? _blockedExecutables;

        /// <summary>
        /// List of executables that are prevented from running in containers.
        /// </summary>
        public InputList<string> BlockedExecutables
        {
            get => _blockedExecutables ?? (_blockedExecutables = new InputList<string>());
            set => _blockedExecutables = value;
        }

        /// <summary>
        /// The description of the function runtime policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indicates if the runtime policy is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Indicates that policy should effect container execution (not just for audit).
        /// </summary>
        [Input("enforce")]
        public Input<bool>? Enforce { get; set; }

        /// <summary>
        /// Honeypot User ID (Access Key)
        /// </summary>
        [Input("honeypotAccessKey")]
        public Input<string>? HoneypotAccessKey { get; set; }

        [Input("honeypotApplyOns")]
        private InputList<string>? _honeypotApplyOns;

        /// <summary>
        /// List of options to apply the honeypot on (Environment Vairable, Layer, File)
        /// </summary>
        public InputList<string> HoneypotApplyOns
        {
            get => _honeypotApplyOns ?? (_honeypotApplyOns = new InputList<string>());
            set => _honeypotApplyOns = value;
        }

        /// <summary>
        /// Honeypot User Password (Secret Key)
        /// </summary>
        [Input("honeypotSecretKey")]
        public Input<string>? HoneypotSecretKey { get; set; }

        /// <summary>
        /// Serverless application name
        /// </summary>
        [Input("honeypotServerlessAppName")]
        public Input<string>? HoneypotServerlessAppName { get; set; }

        /// <summary>
        /// Name of the function runtime policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Logical expression of how to compute the dependency of the scope variables.
        /// </summary>
        [Input("scopeExpression")]
        public Input<string>? ScopeExpression { get; set; }

        [Input("scopeVariables")]
        private InputList<Inputs.FunctionRuntimePolicyScopeVariableGetArgs>? _scopeVariables;

        /// <summary>
        /// List of scope attributes.
        /// </summary>
        public InputList<Inputs.FunctionRuntimePolicyScopeVariableGetArgs> ScopeVariables
        {
            get => _scopeVariables ?? (_scopeVariables = new InputList<Inputs.FunctionRuntimePolicyScopeVariableGetArgs>());
            set => _scopeVariables = value;
        }

        public FunctionRuntimePolicyState()
        {
        }
    }
}
