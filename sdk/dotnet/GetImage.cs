// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aquasec
{
    public static class GetImage
    {
        public static Task<GetImageResult> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("aquasec:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetImageResult>("aquasec:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the registry where the image is stored.
        /// </summary>
        [Input("registry", required: true)]
        public string Registry { get; set; } = null!;

        /// <summary>
        /// The name of the image's repository.
        /// </summary>
        [Input("repository", required: true)]
        public string Repository { get; set; } = null!;

        /// <summary>
        /// The tag of the image.
        /// </summary>
        [Input("tag", required: true)]
        public string Tag { get; set; } = null!;

        public GetImageArgs()
        {
        }
    }

    public sealed class GetImageInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the registry where the image is stored.
        /// </summary>
        [Input("registry", required: true)]
        public Input<string> Registry { get; set; } = null!;

        /// <summary>
        /// The name of the image's repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// The tag of the image.
        /// </summary>
        [Input("tag", required: true)]
        public Input<string> Tag { get; set; } = null!;

        public GetImageInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// The image architecture.
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// The list of image assurance checks performed on the image.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageAssuranceChecksPerformedResult> AssuranceChecksPerformeds;
        /// <summary>
        /// The name of the user who registered the image.
        /// </summary>
        public readonly string Author;
        /// <summary>
        /// Whether the image is blacklisted.
        /// </summary>
        public readonly bool Blacklisted;
        /// <summary>
        /// The image creation comment.
        /// </summary>
        public readonly string Comment;
        /// <summary>
        /// The date and time when the image was registered.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// Number of critical severity vulnerabilities detected in the image.
        /// </summary>
        public readonly int CriticalVulnerabilities;
        /// <summary>
        /// The default user of the image.
        /// </summary>
        public readonly string DefaultUser;
        /// <summary>
        /// The content digest of the image.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// Whether the image is disallowed (non-compliant).
        /// </summary>
        public readonly bool Disallowed;
        /// <summary>
        /// Whether the image was disallowed because of Image Assurance Policies.
        /// </summary>
        public readonly bool DisallowedByAssuranceChecks;
        /// <summary>
        /// The Docker image ID.
        /// </summary>
        public readonly string DockerId;
        /// <summary>
        /// Docker labels of the image.
        /// </summary>
        public readonly ImmutableArray<string> DockerLabels;
        /// <summary>
        /// The Docker version used when building the image.
        /// </summary>
        public readonly string DockerVersion;
        /// <summary>
        /// DTA severity score.
        /// </summary>
        public readonly string DtaSeverityScore;
        /// <summary>
        /// If DTA was skipped.
        /// </summary>
        public readonly bool DtaSkipped;
        /// <summary>
        /// The reason why DTA was skipped.
        /// </summary>
        public readonly string DtaSkippedReason;
        /// <summary>
        /// Environment variables in the image.
        /// </summary>
        public readonly ImmutableArray<string> EnvironmentVariables;
        /// <summary>
        /// Number of high severity vulnerabilities detected in the image.
        /// </summary>
        public readonly int HighVulnerabilities;
        /// <summary>
        /// The Docker history of the image.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageHistoryResult> Histories;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The size of the image in bytes.
        /// </summary>
        public readonly int ImageSize;
        /// <summary>
        /// The type of the image.
        /// </summary>
        public readonly string ImageType;
        /// <summary>
        /// Aqua labels of the image.
        /// </summary>
        public readonly ImmutableArray<string> Labels;
        /// <summary>
        /// Number of low severity vulnerabilities detected in the image.
        /// </summary>
        public readonly int LowVulnerabilities;
        /// <summary>
        /// Number of malware found on the image.
        /// </summary>
        public readonly int Malware;
        /// <summary>
        /// Number of medium severity vulnerabilities detected in the image.
        /// </summary>
        public readonly int MediumVulnerabilities;
        /// <summary>
        /// The name of the image.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Number of negligible severity vulnerabilities detected in the image.
        /// </summary>
        public readonly int NegligibleVulnerabilities;
        /// <summary>
        /// Whether a new version of the image is available in the registry but is not scanned and registered yet.
        /// </summary>
        public readonly bool NewerImageExists;
        /// <summary>
        /// The operating system detected in the image
        /// </summary>
        public readonly string Os;
        /// <summary>
        /// The version of the OS detected in the image.
        /// </summary>
        public readonly string OsVersion;
        /// <summary>
        /// The ID of the parent image.
        /// </summary>
        public readonly string Parent;
        /// <summary>
        /// Whether the image could only be partially scanned.
        /// </summary>
        public readonly bool PartialResults;
        /// <summary>
        /// Whether the image is non-compliant, but is pending this status due to running containers.
        /// </summary>
        public readonly bool PendingDisallowed;
        /// <summary>
        /// Permission of the image.
        /// </summary>
        public readonly string Permission;
        /// <summary>
        /// The name of the user who last modified the image permissions.
        /// </summary>
        public readonly string PermissionAuthor;
        /// <summary>
        /// The comment provided when the image permissions were last modified
        /// </summary>
        public readonly string PermissionComment;
        /// <summary>
        /// The name of the registry where the image is stored.
        /// </summary>
        public readonly string Registry;
        /// <summary>
        /// Type of the registry.
        /// </summary>
        public readonly string RegistryType;
        /// <summary>
        /// The repository digests.
        /// </summary>
        public readonly ImmutableArray<string> RepoDigests;
        /// <summary>
        /// The name of the image's repository.
        /// </summary>
        public readonly string Repository;
        /// <summary>
        /// The date and time when the image was last scanned.
        /// </summary>
        public readonly string ScanDate;
        /// <summary>
        /// If the image scan failed, the failure message.
        /// </summary>
        public readonly string ScanError;
        /// <summary>
        /// The scan status of the image (either 'pending', 'in*progress', 'finished', 'failed' or 'not*started').
        /// </summary>
        public readonly string ScanStatus;
        /// <summary>
        /// Number of sensitive data detected in the image.
        /// </summary>
        public readonly int SensitiveData;
        /// <summary>
        /// The tag of the image.
        /// </summary>
        public readonly string Tag;
        /// <summary>
        /// The total number of vulnerabilities detected in the image.
        /// </summary>
        public readonly int TotalVulnerabilities;
        /// <summary>
        /// The virtual size of the image.
        /// </summary>
        public readonly int VirtualSize;
        /// <summary>
        /// A list of all the vulnerabilities found in the image
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageVulnerabilityResult> Vulnerabilities;
        /// <summary>
        /// Whether the image is whitelisted.
        /// </summary>
        public readonly bool Whitelisted;

        [OutputConstructor]
        private GetImageResult(
            string architecture,

            ImmutableArray<Outputs.GetImageAssuranceChecksPerformedResult> assuranceChecksPerformeds,

            string author,

            bool blacklisted,

            string comment,

            string created,

            int criticalVulnerabilities,

            string defaultUser,

            string digest,

            bool disallowed,

            bool disallowedByAssuranceChecks,

            string dockerId,

            ImmutableArray<string> dockerLabels,

            string dockerVersion,

            string dtaSeverityScore,

            bool dtaSkipped,

            string dtaSkippedReason,

            ImmutableArray<string> environmentVariables,

            int highVulnerabilities,

            ImmutableArray<Outputs.GetImageHistoryResult> histories,

            string id,

            int imageSize,

            string imageType,

            ImmutableArray<string> labels,

            int lowVulnerabilities,

            int malware,

            int mediumVulnerabilities,

            string name,

            int negligibleVulnerabilities,

            bool newerImageExists,

            string os,

            string osVersion,

            string parent,

            bool partialResults,

            bool pendingDisallowed,

            string permission,

            string permissionAuthor,

            string permissionComment,

            string registry,

            string registryType,

            ImmutableArray<string> repoDigests,

            string repository,

            string scanDate,

            string scanError,

            string scanStatus,

            int sensitiveData,

            string tag,

            int totalVulnerabilities,

            int virtualSize,

            ImmutableArray<Outputs.GetImageVulnerabilityResult> vulnerabilities,

            bool whitelisted)
        {
            Architecture = architecture;
            AssuranceChecksPerformeds = assuranceChecksPerformeds;
            Author = author;
            Blacklisted = blacklisted;
            Comment = comment;
            Created = created;
            CriticalVulnerabilities = criticalVulnerabilities;
            DefaultUser = defaultUser;
            Digest = digest;
            Disallowed = disallowed;
            DisallowedByAssuranceChecks = disallowedByAssuranceChecks;
            DockerId = dockerId;
            DockerLabels = dockerLabels;
            DockerVersion = dockerVersion;
            DtaSeverityScore = dtaSeverityScore;
            DtaSkipped = dtaSkipped;
            DtaSkippedReason = dtaSkippedReason;
            EnvironmentVariables = environmentVariables;
            HighVulnerabilities = highVulnerabilities;
            Histories = histories;
            Id = id;
            ImageSize = imageSize;
            ImageType = imageType;
            Labels = labels;
            LowVulnerabilities = lowVulnerabilities;
            Malware = malware;
            MediumVulnerabilities = mediumVulnerabilities;
            Name = name;
            NegligibleVulnerabilities = negligibleVulnerabilities;
            NewerImageExists = newerImageExists;
            Os = os;
            OsVersion = osVersion;
            Parent = parent;
            PartialResults = partialResults;
            PendingDisallowed = pendingDisallowed;
            Permission = permission;
            PermissionAuthor = permissionAuthor;
            PermissionComment = permissionComment;
            Registry = registry;
            RegistryType = registryType;
            RepoDigests = repoDigests;
            Repository = repository;
            ScanDate = scanDate;
            ScanError = scanError;
            ScanStatus = scanStatus;
            SensitiveData = sensitiveData;
            Tag = tag;
            TotalVulnerabilities = totalVulnerabilities;
            VirtualSize = virtualSize;
            Vulnerabilities = vulnerabilities;
            Whitelisted = whitelisted;
        }
    }
}
